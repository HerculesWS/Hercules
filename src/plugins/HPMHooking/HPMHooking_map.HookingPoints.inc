/**
 * This file is part of Hercules.
 * http://herc.ws - http://github.com/HerculesWS/Hercules
 *
 * Copyright (C) 2013-2016  Hercules Dev Team
 *
 * Hercules is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * NOTE: This file was auto-generated and should never be manually edited,
 *       as it will get overwritten.
 */

/* GENERATED FILE DO NOT EDIT */

struct HookingPointData HookingPoints[] = {
/* HCache_interface */
	{ HP_POP(HCache->init, HP_HCache_init) },
	{ HP_POP(HCache->check, HP_HCache_check) },
	{ HP_POP(HCache->open, HP_HCache_open) },
/* atcommand_interface */
	{ HP_POP(atcommand->init, HP_atcommand_init) },
	{ HP_POP(atcommand->final, HP_atcommand_final) },
	{ HP_POP(atcommand->exec, HP_atcommand_exec) },
	{ HP_POP(atcommand->create, HP_atcommand_create) },
	{ HP_POP(atcommand->can_use, HP_atcommand_can_use) },
	{ HP_POP(atcommand->can_use2, HP_atcommand_can_use2) },
	{ HP_POP(atcommand->load_groups, HP_atcommand_load_groups) },
	{ HP_POP(atcommand->exists, HP_atcommand_exists) },
	{ HP_POP(atcommand->msg_read, HP_atcommand_msg_read) },
	{ HP_POP(atcommand->final_msg, HP_atcommand_final_msg) },
	{ HP_POP(atcommand->get_bind_byname, HP_atcommand_get_bind_byname) },
	{ HP_POP(atcommand->get_info_byname, HP_atcommand_get_info_byname) },
	{ HP_POP(atcommand->check_alias, HP_atcommand_check_alias) },
	{ HP_POP(atcommand->get_suggestions, HP_atcommand_get_suggestions) },
	{ HP_POP(atcommand->config_read, HP_atcommand_config_read) },
	{ HP_POP(atcommand->stopattack, HP_atcommand_stopattack) },
	{ HP_POP(atcommand->pvpoff_sub, HP_atcommand_pvpoff_sub) },
	{ HP_POP(atcommand->pvpon_sub, HP_atcommand_pvpon_sub) },
	{ HP_POP(atcommand->atkillmonster_sub, HP_atcommand_atkillmonster_sub) },
	{ HP_POP(atcommand->raise_sub, HP_atcommand_raise_sub) },
	{ HP_POP(atcommand->get_jail_time, HP_atcommand_get_jail_time) },
	{ HP_POP(atcommand->cleanfloor_sub, HP_atcommand_cleanfloor_sub) },
	{ HP_POP(atcommand->mutearea_sub, HP_atcommand_mutearea_sub) },
	{ HP_POP(atcommand->getring, HP_atcommand_getring) },
	{ HP_POP(atcommand->channel_help, HP_atcommand_channel_help) },
	{ HP_POP(atcommand->commands_sub, HP_atcommand_commands_sub) },
	{ HP_POP(atcommand->cmd_db_clear, HP_atcommand_cmd_db_clear) },
	{ HP_POP(atcommand->cmd_db_clear_sub, HP_atcommand_cmd_db_clear_sub) },
	{ HP_POP(atcommand->doload, HP_atcommand_doload) },
	{ HP_POP(atcommand->base_commands, HP_atcommand_base_commands) },
	{ HP_POP(atcommand->add, HP_atcommand_add) },
	{ HP_POP(atcommand->msg, HP_atcommand_msg) },
	{ HP_POP(atcommand->expand_message_table, HP_atcommand_expand_message_table) },
	{ HP_POP(atcommand->msgfd, HP_atcommand_msgfd) },
	{ HP_POP(atcommand->msgsd, HP_atcommand_msgsd) },
/* battle_interface */
	{ HP_POP(battle->init, HP_battle_init) },
	{ HP_POP(battle->final, HP_battle_final) },
	{ HP_POP(battle->calc_attack, HP_battle_calc_attack) },
	{ HP_POP(battle->calc_damage, HP_battle_calc_damage) },
	{ HP_POP(battle->calc_pc_damage, HP_battle_calc_pc_damage) },
	{ HP_POP(battle->calc_gvg_damage, HP_battle_calc_gvg_damage) },
	{ HP_POP(battle->calc_bg_damage, HP_battle_calc_bg_damage) },
	{ HP_POP(battle->weapon_attack, HP_battle_weapon_attack) },
	{ HP_POP(battle->check_arrows, HP_battle_check_arrows) },
	{ HP_POP(battle->calc_weapon_attack, HP_battle_calc_weapon_attack) },
	{ HP_POP(battle->delay_damage, HP_battle_delay_damage) },
	{ HP_POP(battle->drain, HP_battle_drain) },
	{ HP_POP(battle->reflect_damage, HP_battle_reflect_damage) },
	{ HP_POP(battle->attr_ratio, HP_battle_attr_ratio) },
	{ HP_POP(battle->attr_fix, HP_battle_attr_fix) },
	{ HP_POP(battle->calc_cardfix, HP_battle_calc_cardfix) },
	{ HP_POP(battle->calc_cardfix2, HP_battle_calc_cardfix2) },
	{ HP_POP(battle->calc_elefix, HP_battle_calc_elefix) },
	{ HP_POP(battle->calc_masteryfix, HP_battle_calc_masteryfix) },
	{ HP_POP(battle->calc_chorusbonus, HP_battle_calc_chorusbonus) },
	{ HP_POP(battle->calc_skillratio, HP_battle_calc_skillratio) },
	{ HP_POP(battle->calc_sizefix, HP_battle_calc_sizefix) },
	{ HP_POP(battle->calc_weapon_damage, HP_battle_calc_weapon_damage) },
	{ HP_POP(battle->calc_defense, HP_battle_calc_defense) },
	{ HP_POP(battle->get_master, HP_battle_get_master) },
	{ HP_POP(battle->get_targeted, HP_battle_get_targeted) },
	{ HP_POP(battle->get_enemy, HP_battle_get_enemy) },
	{ HP_POP(battle->get_target, HP_battle_get_target) },
	{ HP_POP(battle->get_current_skill, HP_battle_get_current_skill) },
	{ HP_POP(battle->check_undead, HP_battle_check_undead) },
	{ HP_POP(battle->check_target, HP_battle_check_target) },
	{ HP_POP(battle->check_range, HP_battle_check_range) },
	{ HP_POP(battle->consume_ammo, HP_battle_consume_ammo) },
	{ HP_POP(battle->get_targeted_sub, HP_battle_get_targeted_sub) },
	{ HP_POP(battle->get_enemy_sub, HP_battle_get_enemy_sub) },
	{ HP_POP(battle->get_enemy_area_sub, HP_battle_get_enemy_area_sub) },
	{ HP_POP(battle->delay_damage_sub, HP_battle_delay_damage_sub) },
	{ HP_POP(battle->blewcount_bonus, HP_battle_blewcount_bonus) },
	{ HP_POP(battle->range_type, HP_battle_range_type) },
	{ HP_POP(battle->calc_base_damage, HP_battle_calc_base_damage) },
	{ HP_POP(battle->calc_base_damage2, HP_battle_calc_base_damage2) },
	{ HP_POP(battle->calc_misc_attack, HP_battle_calc_misc_attack) },
	{ HP_POP(battle->calc_magic_attack, HP_battle_calc_magic_attack) },
	{ HP_POP(battle->adjust_skill_damage, HP_battle_adjust_skill_damage) },
	{ HP_POP(battle->add_mastery, HP_battle_add_mastery) },
	{ HP_POP(battle->calc_drain, HP_battle_calc_drain) },
	{ HP_POP(battle->config_read, HP_battle_config_read) },
	{ HP_POP(battle->config_set_defaults, HP_battle_config_set_defaults) },
	{ HP_POP(battle->config_set_value, HP_battle_config_set_value) },
	{ HP_POP(battle->config_get_value, HP_battle_config_get_value) },
	{ HP_POP(battle->config_adjust, HP_battle_config_adjust) },
	{ HP_POP(battle->get_enemy_area, HP_battle_get_enemy_area) },
	{ HP_POP(battle->damage_area, HP_battle_damage_area) },
	{ HP_POP(battle->calc_masteryfix_unknown, HP_battle_calc_masteryfix_unknown) },
	{ HP_POP(battle->calc_skillratio_magic_unknown, HP_battle_calc_skillratio_magic_unknown) },
	{ HP_POP(battle->calc_skillratio_weapon_unknown, HP_battle_calc_skillratio_weapon_unknown) },
	{ HP_POP(battle->calc_misc_attack_unknown, HP_battle_calc_misc_attack_unknown) },
/* battleground_interface */
	{ HP_POP(bg->init, HP_bg_init) },
	{ HP_POP(bg->final, HP_bg_final) },
	{ HP_POP(bg->name2arena, HP_bg_name2arena) },
	{ HP_POP(bg->queue_add, HP_bg_queue_add) },
	{ HP_POP(bg->can_queue, HP_bg_can_queue) },
	{ HP_POP(bg->id2pos, HP_bg_id2pos) },
	{ HP_POP(bg->queue_pc_cleanup, HP_bg_queue_pc_cleanup) },
	{ HP_POP(bg->begin, HP_bg_begin) },
	{ HP_POP(bg->begin_timer, HP_bg_begin_timer) },
	{ HP_POP(bg->queue_pregame, HP_bg_queue_pregame) },
	{ HP_POP(bg->fillup_timer, HP_bg_fillup_timer) },
	{ HP_POP(bg->queue_ready_ack, HP_bg_queue_ready_ack) },
	{ HP_POP(bg->match_over, HP_bg_match_over) },
	{ HP_POP(bg->queue_check, HP_bg_queue_check) },
	{ HP_POP(bg->team_search, HP_bg_team_search) },
	{ HP_POP(bg->getavailablesd, HP_bg_getavailablesd) },
	{ HP_POP(bg->team_delete, HP_bg_team_delete) },
	{ HP_POP(bg->team_warp, HP_bg_team_warp) },
	{ HP_POP(bg->send_dot_remove, HP_bg_send_dot_remove) },
	{ HP_POP(bg->team_join, HP_bg_team_join) },
	{ HP_POP(bg->team_leave, HP_bg_team_leave) },
	{ HP_POP(bg->member_respawn, HP_bg_member_respawn) },
	{ HP_POP(bg->create, HP_bg_create) },
	{ HP_POP(bg->team_get_id, HP_bg_team_get_id) },
	{ HP_POP(bg->send_message, HP_bg_send_message) },
	{ HP_POP(bg->send_xy_timer_sub, HP_bg_send_xy_timer_sub) },
	{ HP_POP(bg->send_xy_timer, HP_bg_send_xy_timer) },
	{ HP_POP(bg->afk_timer, HP_bg_afk_timer) },
	{ HP_POP(bg->team_db_final, HP_bg_team_db_final) },
	{ HP_POP(bg->str2teamtype, HP_bg_str2teamtype) },
	{ HP_POP(bg->config_read, HP_bg_config_read) },
/* buyingstore_interface */
	{ HP_POP(buyingstore->setup, HP_buyingstore_setup) },
	{ HP_POP(buyingstore->create, HP_buyingstore_create) },
	{ HP_POP(buyingstore->close, HP_buyingstore_close) },
	{ HP_POP(buyingstore->open, HP_buyingstore_open) },
	{ HP_POP(buyingstore->trade, HP_buyingstore_trade) },
	{ HP_POP(buyingstore->search, HP_buyingstore_search) },
	{ HP_POP(buyingstore->searchall, HP_buyingstore_searchall) },
	{ HP_POP(buyingstore->getuid, HP_buyingstore_getuid) },
/* channel_interface */
	{ HP_POP(channel->init, HP_channel_init) },
	{ HP_POP(channel->final, HP_channel_final) },
	{ HP_POP(channel->search, HP_channel_search) },
	{ HP_POP(channel->create, HP_channel_create) },
	{ HP_POP(channel->delete, HP_channel_delete) },
	{ HP_POP(channel->set_password, HP_channel_set_password) },
	{ HP_POP(channel->ban, HP_channel_ban) },
	{ HP_POP(channel->unban, HP_channel_unban) },
	{ HP_POP(channel->set_options, HP_channel_set_options) },
	{ HP_POP(channel->send, HP_channel_send) },
	{ HP_POP(channel->join_sub, HP_channel_join_sub) },
	{ HP_POP(channel->join, HP_channel_join) },
	{ HP_POP(channel->leave, HP_channel_leave) },
	{ HP_POP(channel->leave_sub, HP_channel_leave_sub) },
	{ HP_POP(channel->quit, HP_channel_quit) },
	{ HP_POP(channel->map_join, HP_channel_map_join) },
	{ HP_POP(channel->guild_join_alliance, HP_channel_guild_join_alliance) },
	{ HP_POP(channel->guild_leave_alliance, HP_channel_guild_leave_alliance) },
	{ HP_POP(channel->quit_guild, HP_channel_quit_guild) },
	{ HP_POP(channel->irc_join, HP_channel_irc_join) },
	{ HP_POP(channel->config_read, HP_channel_config_read) },
/* chat_interface */
	{ HP_POP(chat->create_pc_chat, HP_chat_create_pc_chat) },
	{ HP_POP(chat->join, HP_chat_join) },
	{ HP_POP(chat->leave, HP_chat_leave) },
	{ HP_POP(chat->change_owner, HP_chat_change_owner) },
	{ HP_POP(chat->change_status, HP_chat_change_status) },
	{ HP_POP(chat->kick, HP_chat_kick) },
	{ HP_POP(chat->create_npc_chat, HP_chat_create_npc_chat) },
	{ HP_POP(chat->delete_npc_chat, HP_chat_delete_npc_chat) },
	{ HP_POP(chat->enable_event, HP_chat_enable_event) },
	{ HP_POP(chat->disable_event, HP_chat_disable_event) },
	{ HP_POP(chat->npc_kick_all, HP_chat_npc_kick_all) },
	{ HP_POP(chat->trigger_event, HP_chat_trigger_event) },
	{ HP_POP(chat->create, HP_chat_create) },
/* chrif_interface */
	{ HP_POP(chrif->init, HP_chrif_init) },
	{ HP_POP(chrif->final, HP_chrif_final) },
	{ HP_POP(chrif->setuserid, HP_chrif_setuserid) },
	{ HP_POP(chrif->setpasswd, HP_chrif_setpasswd) },
	{ HP_POP(chrif->checkdefaultlogin, HP_chrif_checkdefaultlogin) },
	{ HP_POP(chrif->setip, HP_chrif_setip) },
	{ HP_POP(chrif->setport, HP_chrif_setport) },
	{ HP_POP(chrif->isconnected, HP_chrif_isconnected) },
	{ HP_POP(chrif->check_shutdown, HP_chrif_check_shutdown) },
	{ HP_POP(chrif->search, HP_chrif_search) },
	{ HP_POP(chrif->auth_check, HP_chrif_auth_check) },
	{ HP_POP(chrif->auth_delete, HP_chrif_auth_delete) },
	{ HP_POP(chrif->auth_finished, HP_chrif_auth_finished) },
	{ HP_POP(chrif->authreq, HP_chrif_authreq) },
	{ HP_POP(chrif->authok, HP_chrif_authok) },
	{ HP_POP(chrif->scdata_request, HP_chrif_scdata_request) },
	{ HP_POP(chrif->save, HP_chrif_save) },
	{ HP_POP(chrif->charselectreq, HP_chrif_charselectreq) },
	{ HP_POP(chrif->changemapserver, HP_chrif_changemapserver) },
	{ HP_POP(chrif->searchcharid, HP_chrif_searchcharid) },
	{ HP_POP(chrif->changeemail, HP_chrif_changeemail) },
	{ HP_POP(chrif->char_ask_name, HP_chrif_char_ask_name) },
	{ HP_POP(chrif->updatefamelist, HP_chrif_updatefamelist) },
	{ HP_POP(chrif->buildfamelist, HP_chrif_buildfamelist) },
	{ HP_POP(chrif->save_scdata, HP_chrif_save_scdata) },
	{ HP_POP(chrif->ragsrvinfo, HP_chrif_ragsrvinfo) },
	{ HP_POP(chrif->char_offline_nsd, HP_chrif_char_offline_nsd) },
	{ HP_POP(chrif->char_reset_offline, HP_chrif_char_reset_offline) },
	{ HP_POP(chrif->send_users_tochar, HP_chrif_send_users_tochar) },
	{ HP_POP(chrif->char_online, HP_chrif_char_online) },
	{ HP_POP(chrif->changesex, HP_chrif_changesex) },
	{ HP_POP(chrif->divorce, HP_chrif_divorce) },
	{ HP_POP(chrif->removefriend, HP_chrif_removefriend) },
	{ HP_POP(chrif->send_report, HP_chrif_send_report) },
	{ HP_POP(chrif->flush, HP_chrif_flush) },
	{ HP_POP(chrif->skillid2idx, HP_chrif_skillid2idx) },
	{ HP_POP(chrif->sd_to_auth, HP_chrif_sd_to_auth) },
	{ HP_POP(chrif->check_connect_char_server, HP_chrif_check_connect_char_server) },
	{ HP_POP(chrif->auth_logout, HP_chrif_auth_logout) },
	{ HP_POP(chrif->save_ack, HP_chrif_save_ack) },
	{ HP_POP(chrif->reconnect, HP_chrif_reconnect) },
	{ HP_POP(chrif->auth_db_cleanup_sub, HP_chrif_auth_db_cleanup_sub) },
	{ HP_POP(chrif->char_ask_name_answer, HP_chrif_char_ask_name_answer) },
	{ HP_POP(chrif->auth_db_final, HP_chrif_auth_db_final) },
	{ HP_POP(chrif->send_usercount_tochar, HP_chrif_send_usercount_tochar) },
	{ HP_POP(chrif->auth_db_cleanup, HP_chrif_auth_db_cleanup) },
	{ HP_POP(chrif->connect, HP_chrif_connect) },
	{ HP_POP(chrif->connectack, HP_chrif_connectack) },
	{ HP_POP(chrif->sendmap, HP_chrif_sendmap) },
	{ HP_POP(chrif->sendmapack, HP_chrif_sendmapack) },
	{ HP_POP(chrif->recvmap, HP_chrif_recvmap) },
	{ HP_POP(chrif->changemapserverack, HP_chrif_changemapserverack) },
	{ HP_POP(chrif->changedsex, HP_chrif_changedsex) },
	{ HP_POP(chrif->divorceack, HP_chrif_divorceack) },
	{ HP_POP(chrif->idbanned, HP_chrif_idbanned) },
	{ HP_POP(chrif->recvfamelist, HP_chrif_recvfamelist) },
	{ HP_POP(chrif->load_scdata, HP_chrif_load_scdata) },
	{ HP_POP(chrif->update_ip, HP_chrif_update_ip) },
	{ HP_POP(chrif->disconnectplayer, HP_chrif_disconnectplayer) },
	{ HP_POP(chrif->removemap, HP_chrif_removemap) },
	{ HP_POP(chrif->updatefamelist_ack, HP_chrif_updatefamelist_ack) },
	{ HP_POP(chrif->keepalive, HP_chrif_keepalive) },
	{ HP_POP(chrif->keepalive_ack, HP_chrif_keepalive_ack) },
	{ HP_POP(chrif->deadopt, HP_chrif_deadopt) },
	{ HP_POP(chrif->authfail, HP_chrif_authfail) },
	{ HP_POP(chrif->on_ready, HP_chrif_on_ready) },
	{ HP_POP(chrif->on_disconnect, HP_chrif_on_disconnect) },
	{ HP_POP(chrif->parse, HP_chrif_parse) },
	{ HP_POP(chrif->save_scdata_single, HP_chrif_save_scdata_single) },
	{ HP_POP(chrif->del_scdata_single, HP_chrif_del_scdata_single) },
/* clif_interface */
	{ HP_POP(clif->init, HP_clif_init) },
	{ HP_POP(clif->final, HP_clif_final) },
	{ HP_POP(clif->setip, HP_clif_setip) },
	{ HP_POP(clif->setbindip, HP_clif_setbindip) },
	{ HP_POP(clif->setport, HP_clif_setport) },
	{ HP_POP(clif->refresh_ip, HP_clif_refresh_ip) },
	{ HP_POP(clif->send, HP_clif_send) },
	{ HP_POP(clif->send_sub, HP_clif_send_sub) },
	{ HP_POP(clif->send_actual, HP_clif_send_actual) },
	{ HP_POP(clif->parse, HP_clif_parse) },
	{ HP_POP(clif->packet, HP_clif_packet) },
	{ HP_POP(clif->parse_cmd, HP_clif_parse_cmd) },
	{ HP_POP(clif->decrypt_cmd, HP_clif_decrypt_cmd) },
	{ HP_POP(clif->authok, HP_clif_authok) },
	{ HP_POP(clif->authrefuse, HP_clif_authrefuse) },
	{ HP_POP(clif->authfail_fd, HP_clif_authfail_fd) },
	{ HP_POP(clif->charselectok, HP_clif_charselectok) },
	{ HP_POP(clif->dropflooritem, HP_clif_dropflooritem) },
	{ HP_POP(clif->clearflooritem, HP_clif_clearflooritem) },
	{ HP_POP(clif->additem, HP_clif_additem) },
	{ HP_POP(clif->dropitem, HP_clif_dropitem) },
	{ HP_POP(clif->delitem, HP_clif_delitem) },
	{ HP_POP(clif->takeitem, HP_clif_takeitem) },
	{ HP_POP(clif->item_equip, HP_clif_item_equip) },
	{ HP_POP(clif->item_normal, HP_clif_item_normal) },
	{ HP_POP(clif->arrowequip, HP_clif_arrowequip) },
	{ HP_POP(clif->arrow_fail, HP_clif_arrow_fail) },
	{ HP_POP(clif->use_card, HP_clif_use_card) },
	{ HP_POP(clif->cart_additem, HP_clif_cart_additem) },
	{ HP_POP(clif->cart_delitem, HP_clif_cart_delitem) },
	{ HP_POP(clif->equipitemack, HP_clif_equipitemack) },
	{ HP_POP(clif->unequipitemack, HP_clif_unequipitemack) },
	{ HP_POP(clif->useitemack, HP_clif_useitemack) },
	{ HP_POP(clif->addcards, HP_clif_addcards) },
	{ HP_POP(clif->addcards2, HP_clif_addcards2) },
	{ HP_POP(clif->item_sub, HP_clif_item_sub) },
	{ HP_POP(clif->getareachar_item, HP_clif_getareachar_item) },
	{ HP_POP(clif->cart_additem_ack, HP_clif_cart_additem_ack) },
	{ HP_POP(clif->cashshop_load, HP_clif_cashshop_load) },
	{ HP_POP(clif->package_announce, HP_clif_package_announce) },
	{ HP_POP(clif->item_drop_announce, HP_clif_item_drop_announce) },
	{ HP_POP(clif->clearunit_single, HP_clif_clearunit_single) },
	{ HP_POP(clif->clearunit_area, HP_clif_clearunit_area) },
	{ HP_POP(clif->clearunit_delayed, HP_clif_clearunit_delayed) },
	{ HP_POP(clif->walkok, HP_clif_walkok) },
	{ HP_POP(clif->move, HP_clif_move) },
	{ HP_POP(clif->move2, HP_clif_move2) },
	{ HP_POP(clif->blown, HP_clif_blown) },
	{ HP_POP(clif->slide, HP_clif_slide) },
	{ HP_POP(clif->fixpos, HP_clif_fixpos) },
	{ HP_POP(clif->changelook, HP_clif_changelook) },
	{ HP_POP(clif->changetraplook, HP_clif_changetraplook) },
	{ HP_POP(clif->refreshlook, HP_clif_refreshlook) },
	{ HP_POP(clif->sendlook, HP_clif_sendlook) },
	{ HP_POP(clif->class_change, HP_clif_class_change) },
	{ HP_POP(clif->skill_delunit, HP_clif_skill_delunit) },
	{ HP_POP(clif->skillunit_update, HP_clif_skillunit_update) },
	{ HP_POP(clif->clearunit_delayed_sub, HP_clif_clearunit_delayed_sub) },
	{ HP_POP(clif->set_unit_idle, HP_clif_set_unit_idle) },
	{ HP_POP(clif->spawn_unit, HP_clif_spawn_unit) },
	{ HP_POP(clif->spawn_unit2, HP_clif_spawn_unit2) },
	{ HP_POP(clif->set_unit_idle2, HP_clif_set_unit_idle2) },
	{ HP_POP(clif->set_unit_walking, HP_clif_set_unit_walking) },
	{ HP_POP(clif->calc_walkdelay, HP_clif_calc_walkdelay) },
	{ HP_POP(clif->getareachar_skillunit, HP_clif_getareachar_skillunit) },
	{ HP_POP(clif->getareachar_unit, HP_clif_getareachar_unit) },
	{ HP_POP(clif->clearchar_skillunit, HP_clif_clearchar_skillunit) },
	{ HP_POP(clif->getareachar, HP_clif_getareachar) },
	{ HP_POP(clif->graffiti_entry, HP_clif_graffiti_entry) },
	{ HP_POP(clif->spawn, HP_clif_spawn) },
	{ HP_POP(clif->changemap, HP_clif_changemap) },
	{ HP_POP(clif->changemapcell, HP_clif_changemapcell) },
	{ HP_POP(clif->map_property, HP_clif_map_property) },
	{ HP_POP(clif->pvpset, HP_clif_pvpset) },
	{ HP_POP(clif->map_property_mapall, HP_clif_map_property_mapall) },
	{ HP_POP(clif->bossmapinfo, HP_clif_bossmapinfo) },
	{ HP_POP(clif->map_type, HP_clif_map_type) },
	{ HP_POP(clif->maptypeproperty2, HP_clif_maptypeproperty2) },
	{ HP_POP(clif->changemapserver, HP_clif_changemapserver) },
	{ HP_POP(clif->npcbuysell, HP_clif_npcbuysell) },
	{ HP_POP(clif->buylist, HP_clif_buylist) },
	{ HP_POP(clif->selllist, HP_clif_selllist) },
	{ HP_POP(clif->cashshop_show, HP_clif_cashshop_show) },
	{ HP_POP(clif->npc_buy_result, HP_clif_npc_buy_result) },
	{ HP_POP(clif->npc_sell_result, HP_clif_npc_sell_result) },
	{ HP_POP(clif->cashshop_ack, HP_clif_cashshop_ack) },
	{ HP_POP(clif->scriptmes, HP_clif_scriptmes) },
	{ HP_POP(clif->scriptnext, HP_clif_scriptnext) },
	{ HP_POP(clif->scriptclose, HP_clif_scriptclose) },
	{ HP_POP(clif->scriptmenu, HP_clif_scriptmenu) },
	{ HP_POP(clif->scriptinput, HP_clif_scriptinput) },
	{ HP_POP(clif->scriptinputstr, HP_clif_scriptinputstr) },
	{ HP_POP(clif->cutin, HP_clif_cutin) },
	{ HP_POP(clif->sendfakenpc, HP_clif_sendfakenpc) },
	{ HP_POP(clif->scriptclear, HP_clif_scriptclear) },
	{ HP_POP(clif->viewpoint, HP_clif_viewpoint) },
	{ HP_POP(clif->damage, HP_clif_damage) },
	{ HP_POP(clif->sitting, HP_clif_sitting) },
	{ HP_POP(clif->standing, HP_clif_standing) },
	{ HP_POP(clif->arrow_create_list, HP_clif_arrow_create_list) },
	{ HP_POP(clif->refresh_storagewindow, HP_clif_refresh_storagewindow) },
	{ HP_POP(clif->refresh, HP_clif_refresh) },
	{ HP_POP(clif->fame_blacksmith, HP_clif_fame_blacksmith) },
	{ HP_POP(clif->fame_alchemist, HP_clif_fame_alchemist) },
	{ HP_POP(clif->fame_taekwon, HP_clif_fame_taekwon) },
	{ HP_POP(clif->ranklist, HP_clif_ranklist) },
	{ HP_POP(clif->update_rankingpoint, HP_clif_update_rankingpoint) },
	{ HP_POP(clif->pRanklist, HP_clif_pRanklist) },
	{ HP_POP(clif->hotkeys, HP_clif_hotkeys) },
	{ HP_POP(clif->insight, HP_clif_insight) },
	{ HP_POP(clif->outsight, HP_clif_outsight) },
	{ HP_POP(clif->skillcastcancel, HP_clif_skillcastcancel) },
	{ HP_POP(clif->skill_fail, HP_clif_skill_fail) },
	{ HP_POP(clif->skill_cooldown, HP_clif_skill_cooldown) },
	{ HP_POP(clif->skill_memomessage, HP_clif_skill_memomessage) },
	{ HP_POP(clif->skill_mapinfomessage, HP_clif_skill_mapinfomessage) },
	{ HP_POP(clif->skill_produce_mix_list, HP_clif_skill_produce_mix_list) },
	{ HP_POP(clif->cooking_list, HP_clif_cooking_list) },
	{ HP_POP(clif->autospell, HP_clif_autospell) },
	{ HP_POP(clif->combo_delay, HP_clif_combo_delay) },
	{ HP_POP(clif->status_change, HP_clif_status_change) },
	{ HP_POP(clif->insert_card, HP_clif_insert_card) },
	{ HP_POP(clif->inventorylist, HP_clif_inventorylist) },
	{ HP_POP(clif->equiplist, HP_clif_equiplist) },
	{ HP_POP(clif->cartlist, HP_clif_cartlist) },
	{ HP_POP(clif->favorite_item, HP_clif_favorite_item) },
	{ HP_POP(clif->clearcart, HP_clif_clearcart) },
	{ HP_POP(clif->item_identify_list, HP_clif_item_identify_list) },
	{ HP_POP(clif->item_identified, HP_clif_item_identified) },
	{ HP_POP(clif->item_repair_list, HP_clif_item_repair_list) },
	{ HP_POP(clif->item_repaireffect, HP_clif_item_repaireffect) },
	{ HP_POP(clif->item_damaged, HP_clif_item_damaged) },
	{ HP_POP(clif->item_refine_list, HP_clif_item_refine_list) },
	{ HP_POP(clif->item_skill, HP_clif_item_skill) },
	{ HP_POP(clif->mvp_item, HP_clif_mvp_item) },
	{ HP_POP(clif->mvp_exp, HP_clif_mvp_exp) },
	{ HP_POP(clif->mvp_noitem, HP_clif_mvp_noitem) },
	{ HP_POP(clif->changed_dir, HP_clif_changed_dir) },
	{ HP_POP(clif->charnameack, HP_clif_charnameack) },
	{ HP_POP(clif->monster_hp_bar, HP_clif_monster_hp_bar) },
	{ HP_POP(clif->hpmeter, HP_clif_hpmeter) },
	{ HP_POP(clif->hpmeter_single, HP_clif_hpmeter_single) },
	{ HP_POP(clif->hpmeter_sub, HP_clif_hpmeter_sub) },
	{ HP_POP(clif->upgrademessage, HP_clif_upgrademessage) },
	{ HP_POP(clif->get_weapon_view, HP_clif_get_weapon_view) },
	{ HP_POP(clif->gospel_info, HP_clif_gospel_info) },
	{ HP_POP(clif->feel_req, HP_clif_feel_req) },
	{ HP_POP(clif->starskill, HP_clif_starskill) },
	{ HP_POP(clif->feel_info, HP_clif_feel_info) },
	{ HP_POP(clif->hate_info, HP_clif_hate_info) },
	{ HP_POP(clif->mission_info, HP_clif_mission_info) },
	{ HP_POP(clif->feel_hate_reset, HP_clif_feel_hate_reset) },
	{ HP_POP(clif->partytickack, HP_clif_partytickack) },
	{ HP_POP(clif->equiptickack, HP_clif_equiptickack) },
	{ HP_POP(clif->viewequip_ack, HP_clif_viewequip_ack) },
	{ HP_POP(clif->equpcheckbox, HP_clif_equpcheckbox) },
	{ HP_POP(clif->displayexp, HP_clif_displayexp) },
	{ HP_POP(clif->font, HP_clif_font) },
	{ HP_POP(clif->progressbar, HP_clif_progressbar) },
	{ HP_POP(clif->progressbar_abort, HP_clif_progressbar_abort) },
	{ HP_POP(clif->showdigit, HP_clif_showdigit) },
	{ HP_POP(clif->elementalconverter_list, HP_clif_elementalconverter_list) },
	{ HP_POP(clif->spellbook_list, HP_clif_spellbook_list) },
	{ HP_POP(clif->magicdecoy_list, HP_clif_magicdecoy_list) },
	{ HP_POP(clif->poison_list, HP_clif_poison_list) },
	{ HP_POP(clif->autoshadowspell_list, HP_clif_autoshadowspell_list) },
	{ HP_POP(clif->skill_itemlistwindow, HP_clif_skill_itemlistwindow) },
	{ HP_POP(clif->sc_load, HP_clif_sc_load) },
	{ HP_POP(clif->sc_continue, HP_clif_sc_continue) },
	{ HP_POP(clif->sc_end, HP_clif_sc_end) },
	{ HP_POP(clif->initialstatus, HP_clif_initialstatus) },
	{ HP_POP(clif->cooldown_list, HP_clif_cooldown_list) },
	{ HP_POP(clif->updatestatus, HP_clif_updatestatus) },
	{ HP_POP(clif->changestatus, HP_clif_changestatus) },
	{ HP_POP(clif->statusupack, HP_clif_statusupack) },
	{ HP_POP(clif->movetoattack, HP_clif_movetoattack) },
	{ HP_POP(clif->solved_charname, HP_clif_solved_charname) },
	{ HP_POP(clif->charnameupdate, HP_clif_charnameupdate) },
	{ HP_POP(clif->delayquit, HP_clif_delayquit) },
	{ HP_POP(clif->getareachar_pc, HP_clif_getareachar_pc) },
	{ HP_POP(clif->disconnect_ack, HP_clif_disconnect_ack) },
	{ HP_POP(clif->PVPInfo, HP_clif_PVPInfo) },
	{ HP_POP(clif->blacksmith, HP_clif_blacksmith) },
	{ HP_POP(clif->alchemist, HP_clif_alchemist) },
	{ HP_POP(clif->taekwon, HP_clif_taekwon) },
	{ HP_POP(clif->ranking_pk, HP_clif_ranking_pk) },
	{ HP_POP(clif->quitsave, HP_clif_quitsave) },
	{ HP_POP(clif->misceffect, HP_clif_misceffect) },
	{ HP_POP(clif->changeoption, HP_clif_changeoption) },
	{ HP_POP(clif->changeoption2, HP_clif_changeoption2) },
	{ HP_POP(clif->emotion, HP_clif_emotion) },
	{ HP_POP(clif->talkiebox, HP_clif_talkiebox) },
	{ HP_POP(clif->wedding_effect, HP_clif_wedding_effect) },
	{ HP_POP(clif->divorced, HP_clif_divorced) },
	{ HP_POP(clif->callpartner, HP_clif_callpartner) },
	{ HP_POP(clif->skill_damage, HP_clif_skill_damage) },
	{ HP_POP(clif->skill_nodamage, HP_clif_skill_nodamage) },
	{ HP_POP(clif->skill_poseffect, HP_clif_skill_poseffect) },
	{ HP_POP(clif->skill_estimation, HP_clif_skill_estimation) },
	{ HP_POP(clif->skill_warppoint, HP_clif_skill_warppoint) },
	{ HP_POP(clif->useskill, HP_clif_useskill) },
	{ HP_POP(clif->produce_effect, HP_clif_produce_effect) },
	{ HP_POP(clif->devotion, HP_clif_devotion) },
	{ HP_POP(clif->spiritball, HP_clif_spiritball) },
	{ HP_POP(clif->spiritball_single, HP_clif_spiritball_single) },
	{ HP_POP(clif->bladestop, HP_clif_bladestop) },
	{ HP_POP(clif->mvp_effect, HP_clif_mvp_effect) },
	{ HP_POP(clif->heal, HP_clif_heal) },
	{ HP_POP(clif->resurrection, HP_clif_resurrection) },
	{ HP_POP(clif->refine, HP_clif_refine) },
	{ HP_POP(clif->weather, HP_clif_weather) },
	{ HP_POP(clif->specialeffect, HP_clif_specialeffect) },
	{ HP_POP(clif->specialeffect_single, HP_clif_specialeffect_single) },
	{ HP_POP(clif->specialeffect_value, HP_clif_specialeffect_value) },
	{ HP_POP(clif->millenniumshield, HP_clif_millenniumshield) },
	{ HP_POP(clif->spiritcharm, HP_clif_spiritcharm) },
	{ HP_POP(clif->charm_single, HP_clif_charm_single) },
	{ HP_POP(clif->snap, HP_clif_snap) },
	{ HP_POP(clif->weather_check, HP_clif_weather_check) },
	{ HP_POP(clif->playBGM, HP_clif_playBGM) },
	{ HP_POP(clif->soundeffect, HP_clif_soundeffect) },
	{ HP_POP(clif->soundeffectall, HP_clif_soundeffectall) },
	{ HP_POP(clif->GlobalMessage, HP_clif_GlobalMessage) },
	{ HP_POP(clif->createchat, HP_clif_createchat) },
	{ HP_POP(clif->dispchat, HP_clif_dispchat) },
	{ HP_POP(clif->joinchatfail, HP_clif_joinchatfail) },
	{ HP_POP(clif->joinchatok, HP_clif_joinchatok) },
	{ HP_POP(clif->addchat, HP_clif_addchat) },
	{ HP_POP(clif->changechatowner, HP_clif_changechatowner) },
	{ HP_POP(clif->clearchat, HP_clif_clearchat) },
	{ HP_POP(clif->leavechat, HP_clif_leavechat) },
	{ HP_POP(clif->changechatstatus, HP_clif_changechatstatus) },
	{ HP_POP(clif->wis_message, HP_clif_wis_message) },
	{ HP_POP(clif->wis_end, HP_clif_wis_end) },
	{ HP_POP(clif->disp_message, HP_clif_disp_message) },
	{ HP_POP(clif->broadcast, HP_clif_broadcast) },
	{ HP_POP(clif->broadcast2, HP_clif_broadcast2) },
	{ HP_POP(clif->messagecolor_self, HP_clif_messagecolor_self) },
	{ HP_POP(clif->messagecolor, HP_clif_messagecolor) },
	{ HP_POP(clif->disp_overhead, HP_clif_disp_overhead) },
	{ HP_POP(clif->msgtable, HP_clif_msgtable) },
	{ HP_POP(clif->msgtable_num, HP_clif_msgtable_num) },
	{ HP_POP(clif->msgtable_skill, HP_clif_msgtable_skill) },
	{ HP_POP(clif->message, HP_clif_message) },
	{ HP_POP(clif->messageln, HP_clif_messageln) },
	{ HP_POP(clif->process_chat_message, HP_clif_process_chat_message) },
	{ HP_POP(clif->process_whisper_message, HP_clif_process_whisper_message) },
	{ HP_POP(clif->wisexin, HP_clif_wisexin) },
	{ HP_POP(clif->wisall, HP_clif_wisall) },
	{ HP_POP(clif->PMIgnoreList, HP_clif_PMIgnoreList) },
	{ HP_POP(clif->ShowScript, HP_clif_ShowScript) },
	{ HP_POP(clif->traderequest, HP_clif_traderequest) },
	{ HP_POP(clif->tradestart, HP_clif_tradestart) },
	{ HP_POP(clif->tradeadditem, HP_clif_tradeadditem) },
	{ HP_POP(clif->tradeitemok, HP_clif_tradeitemok) },
	{ HP_POP(clif->tradedeal_lock, HP_clif_tradedeal_lock) },
	{ HP_POP(clif->tradecancelled, HP_clif_tradecancelled) },
	{ HP_POP(clif->tradecompleted, HP_clif_tradecompleted) },
	{ HP_POP(clif->tradeundo, HP_clif_tradeundo) },
	{ HP_POP(clif->openvendingreq, HP_clif_openvendingreq) },
	{ HP_POP(clif->showvendingboard, HP_clif_showvendingboard) },
	{ HP_POP(clif->closevendingboard, HP_clif_closevendingboard) },
	{ HP_POP(clif->vendinglist, HP_clif_vendinglist) },
	{ HP_POP(clif->buyvending, HP_clif_buyvending) },
	{ HP_POP(clif->openvending, HP_clif_openvending) },
	{ HP_POP(clif->vendingreport, HP_clif_vendingreport) },
	{ HP_POP(clif->storagelist, HP_clif_storagelist) },
	{ HP_POP(clif->updatestorageamount, HP_clif_updatestorageamount) },
	{ HP_POP(clif->storageitemadded, HP_clif_storageitemadded) },
	{ HP_POP(clif->storageitemremoved, HP_clif_storageitemremoved) },
	{ HP_POP(clif->storageclose, HP_clif_storageclose) },
	{ HP_POP(clif->skillinfoblock, HP_clif_skillinfoblock) },
	{ HP_POP(clif->skillup, HP_clif_skillup) },
	{ HP_POP(clif->skillinfo, HP_clif_skillinfo) },
	{ HP_POP(clif->addskill, HP_clif_addskill) },
	{ HP_POP(clif->deleteskill, HP_clif_deleteskill) },
	{ HP_POP(clif->party_created, HP_clif_party_created) },
	{ HP_POP(clif->party_member_info, HP_clif_party_member_info) },
	{ HP_POP(clif->party_info, HP_clif_party_info) },
	{ HP_POP(clif->party_invite, HP_clif_party_invite) },
	{ HP_POP(clif->party_inviteack, HP_clif_party_inviteack) },
	{ HP_POP(clif->party_option, HP_clif_party_option) },
	{ HP_POP(clif->party_withdraw, HP_clif_party_withdraw) },
	{ HP_POP(clif->party_message, HP_clif_party_message) },
	{ HP_POP(clif->party_xy, HP_clif_party_xy) },
	{ HP_POP(clif->party_xy_single, HP_clif_party_xy_single) },
	{ HP_POP(clif->party_hp, HP_clif_party_hp) },
	{ HP_POP(clif->party_xy_remove, HP_clif_party_xy_remove) },
	{ HP_POP(clif->party_show_picker, HP_clif_party_show_picker) },
	{ HP_POP(clif->partyinvitationstate, HP_clif_partyinvitationstate) },
	{ HP_POP(clif->PartyLeaderChanged, HP_clif_PartyLeaderChanged) },
	{ HP_POP(clif->guild_created, HP_clif_guild_created) },
	{ HP_POP(clif->guild_belonginfo, HP_clif_guild_belonginfo) },
	{ HP_POP(clif->guild_masterormember, HP_clif_guild_masterormember) },
	{ HP_POP(clif->guild_basicinfo, HP_clif_guild_basicinfo) },
	{ HP_POP(clif->guild_allianceinfo, HP_clif_guild_allianceinfo) },
	{ HP_POP(clif->guild_memberlist, HP_clif_guild_memberlist) },
	{ HP_POP(clif->guild_skillinfo, HP_clif_guild_skillinfo) },
	{ HP_POP(clif->guild_send_onlineinfo, HP_clif_guild_send_onlineinfo) },
	{ HP_POP(clif->guild_memberlogin_notice, HP_clif_guild_memberlogin_notice) },
	{ HP_POP(clif->guild_invite, HP_clif_guild_invite) },
	{ HP_POP(clif->guild_inviteack, HP_clif_guild_inviteack) },
	{ HP_POP(clif->guild_leave, HP_clif_guild_leave) },
	{ HP_POP(clif->guild_expulsion, HP_clif_guild_expulsion) },
	{ HP_POP(clif->guild_positionchanged, HP_clif_guild_positionchanged) },
	{ HP_POP(clif->guild_memberpositionchanged, HP_clif_guild_memberpositionchanged) },
	{ HP_POP(clif->guild_emblem, HP_clif_guild_emblem) },
	{ HP_POP(clif->guild_emblem_area, HP_clif_guild_emblem_area) },
	{ HP_POP(clif->guild_notice, HP_clif_guild_notice) },
	{ HP_POP(clif->guild_message, HP_clif_guild_message) },
	{ HP_POP(clif->guild_reqalliance, HP_clif_guild_reqalliance) },
	{ HP_POP(clif->guild_allianceack, HP_clif_guild_allianceack) },
	{ HP_POP(clif->guild_delalliance, HP_clif_guild_delalliance) },
	{ HP_POP(clif->guild_oppositionack, HP_clif_guild_oppositionack) },
	{ HP_POP(clif->guild_broken, HP_clif_guild_broken) },
	{ HP_POP(clif->guild_xy, HP_clif_guild_xy) },
	{ HP_POP(clif->guild_xy_single, HP_clif_guild_xy_single) },
	{ HP_POP(clif->guild_xy_remove, HP_clif_guild_xy_remove) },
	{ HP_POP(clif->guild_positionnamelist, HP_clif_guild_positionnamelist) },
	{ HP_POP(clif->guild_positioninfolist, HP_clif_guild_positioninfolist) },
	{ HP_POP(clif->guild_expulsionlist, HP_clif_guild_expulsionlist) },
	{ HP_POP(clif->validate_emblem, HP_clif_validate_emblem) },
	{ HP_POP(clif->bg_hp, HP_clif_bg_hp) },
	{ HP_POP(clif->bg_xy, HP_clif_bg_xy) },
	{ HP_POP(clif->bg_xy_remove, HP_clif_bg_xy_remove) },
	{ HP_POP(clif->bg_message, HP_clif_bg_message) },
	{ HP_POP(clif->bg_updatescore, HP_clif_bg_updatescore) },
	{ HP_POP(clif->bg_updatescore_single, HP_clif_bg_updatescore_single) },
	{ HP_POP(clif->sendbgemblem_area, HP_clif_sendbgemblem_area) },
	{ HP_POP(clif->sendbgemblem_single, HP_clif_sendbgemblem_single) },
	{ HP_POP(clif->instance, HP_clif_instance) },
	{ HP_POP(clif->instance_join, HP_clif_instance_join) },
	{ HP_POP(clif->instance_leave, HP_clif_instance_leave) },
	{ HP_POP(clif->catch_process, HP_clif_catch_process) },
	{ HP_POP(clif->pet_roulette, HP_clif_pet_roulette) },
	{ HP_POP(clif->sendegg, HP_clif_sendegg) },
	{ HP_POP(clif->send_petstatus, HP_clif_send_petstatus) },
	{ HP_POP(clif->send_petdata, HP_clif_send_petdata) },
	{ HP_POP(clif->pet_emotion, HP_clif_pet_emotion) },
	{ HP_POP(clif->pet_food, HP_clif_pet_food) },
	{ HP_POP(clif->friendslist_toggle_sub, HP_clif_friendslist_toggle_sub) },
	{ HP_POP(clif->friendslist_send, HP_clif_friendslist_send) },
	{ HP_POP(clif->friendslist_reqack, HP_clif_friendslist_reqack) },
	{ HP_POP(clif->friendslist_toggle, HP_clif_friendslist_toggle) },
	{ HP_POP(clif->friendlist_req, HP_clif_friendlist_req) },
	{ HP_POP(clif->GM_kickack, HP_clif_GM_kickack) },
	{ HP_POP(clif->GM_kick, HP_clif_GM_kick) },
	{ HP_POP(clif->manner_message, HP_clif_manner_message) },
	{ HP_POP(clif->GM_silence, HP_clif_GM_silence) },
	{ HP_POP(clif->account_name, HP_clif_account_name) },
	{ HP_POP(clif->check, HP_clif_check) },
	{ HP_POP(clif->hominfo, HP_clif_hominfo) },
	{ HP_POP(clif->homskillinfoblock, HP_clif_homskillinfoblock) },
	{ HP_POP(clif->homskillup, HP_clif_homskillup) },
	{ HP_POP(clif->hom_food, HP_clif_hom_food) },
	{ HP_POP(clif->send_homdata, HP_clif_send_homdata) },
	{ HP_POP(clif->quest_send_list, HP_clif_quest_send_list) },
	{ HP_POP(clif->quest_send_mission, HP_clif_quest_send_mission) },
	{ HP_POP(clif->quest_add, HP_clif_quest_add) },
	{ HP_POP(clif->quest_delete, HP_clif_quest_delete) },
	{ HP_POP(clif->quest_update_status, HP_clif_quest_update_status) },
	{ HP_POP(clif->quest_update_objective, HP_clif_quest_update_objective) },
	{ HP_POP(clif->quest_show_event, HP_clif_quest_show_event) },
	{ HP_POP(clif->mail_window, HP_clif_mail_window) },
	{ HP_POP(clif->mail_read, HP_clif_mail_read) },
	{ HP_POP(clif->mail_delete, HP_clif_mail_delete) },
	{ HP_POP(clif->mail_return, HP_clif_mail_return) },
	{ HP_POP(clif->mail_send, HP_clif_mail_send) },
	{ HP_POP(clif->mail_new, HP_clif_mail_new) },
	{ HP_POP(clif->mail_refreshinbox, HP_clif_mail_refreshinbox) },
	{ HP_POP(clif->mail_getattachment, HP_clif_mail_getattachment) },
	{ HP_POP(clif->mail_setattachment, HP_clif_mail_setattachment) },
	{ HP_POP(clif->auction_openwindow, HP_clif_auction_openwindow) },
	{ HP_POP(clif->auction_results, HP_clif_auction_results) },
	{ HP_POP(clif->auction_message, HP_clif_auction_message) },
	{ HP_POP(clif->auction_close, HP_clif_auction_close) },
	{ HP_POP(clif->auction_setitem, HP_clif_auction_setitem) },
	{ HP_POP(clif->mercenary_info, HP_clif_mercenary_info) },
	{ HP_POP(clif->mercenary_skillblock, HP_clif_mercenary_skillblock) },
	{ HP_POP(clif->mercenary_message, HP_clif_mercenary_message) },
	{ HP_POP(clif->mercenary_updatestatus, HP_clif_mercenary_updatestatus) },
	{ HP_POP(clif->rental_time, HP_clif_rental_time) },
	{ HP_POP(clif->rental_expired, HP_clif_rental_expired) },
	{ HP_POP(clif->PartyBookingRegisterAck, HP_clif_PartyBookingRegisterAck) },
	{ HP_POP(clif->PartyBookingDeleteAck, HP_clif_PartyBookingDeleteAck) },
	{ HP_POP(clif->PartyBookingSearchAck, HP_clif_PartyBookingSearchAck) },
	{ HP_POP(clif->PartyBookingUpdateNotify, HP_clif_PartyBookingUpdateNotify) },
	{ HP_POP(clif->PartyBookingDeleteNotify, HP_clif_PartyBookingDeleteNotify) },
	{ HP_POP(clif->PartyBookingInsertNotify, HP_clif_PartyBookingInsertNotify) },
	{ HP_POP(clif->PartyRecruitRegisterAck, HP_clif_PartyRecruitRegisterAck) },
	{ HP_POP(clif->PartyRecruitDeleteAck, HP_clif_PartyRecruitDeleteAck) },
	{ HP_POP(clif->PartyRecruitSearchAck, HP_clif_PartyRecruitSearchAck) },
	{ HP_POP(clif->PartyRecruitUpdateNotify, HP_clif_PartyRecruitUpdateNotify) },
	{ HP_POP(clif->PartyRecruitDeleteNotify, HP_clif_PartyRecruitDeleteNotify) },
	{ HP_POP(clif->PartyRecruitInsertNotify, HP_clif_PartyRecruitInsertNotify) },
	{ HP_POP(clif->PartyBookingVolunteerInfo, HP_clif_PartyBookingVolunteerInfo) },
	{ HP_POP(clif->PartyBookingRefuseVolunteer, HP_clif_PartyBookingRefuseVolunteer) },
	{ HP_POP(clif->PartyBookingCancelVolunteer, HP_clif_PartyBookingCancelVolunteer) },
	{ HP_POP(clif->PartyBookingAddFilteringList, HP_clif_PartyBookingAddFilteringList) },
	{ HP_POP(clif->PartyBookingSubFilteringList, HP_clif_PartyBookingSubFilteringList) },
	{ HP_POP(clif->buyingstore_open, HP_clif_buyingstore_open) },
	{ HP_POP(clif->buyingstore_open_failed, HP_clif_buyingstore_open_failed) },
	{ HP_POP(clif->buyingstore_myitemlist, HP_clif_buyingstore_myitemlist) },
	{ HP_POP(clif->buyingstore_entry, HP_clif_buyingstore_entry) },
	{ HP_POP(clif->buyingstore_entry_single, HP_clif_buyingstore_entry_single) },
	{ HP_POP(clif->buyingstore_disappear_entry, HP_clif_buyingstore_disappear_entry) },
	{ HP_POP(clif->buyingstore_disappear_entry_single, HP_clif_buyingstore_disappear_entry_single) },
	{ HP_POP(clif->buyingstore_itemlist, HP_clif_buyingstore_itemlist) },
	{ HP_POP(clif->buyingstore_trade_failed_buyer, HP_clif_buyingstore_trade_failed_buyer) },
	{ HP_POP(clif->buyingstore_update_item, HP_clif_buyingstore_update_item) },
	{ HP_POP(clif->buyingstore_delete_item, HP_clif_buyingstore_delete_item) },
	{ HP_POP(clif->buyingstore_trade_failed_seller, HP_clif_buyingstore_trade_failed_seller) },
	{ HP_POP(clif->search_store_info_ack, HP_clif_search_store_info_ack) },
	{ HP_POP(clif->search_store_info_failed, HP_clif_search_store_info_failed) },
	{ HP_POP(clif->open_search_store_info, HP_clif_open_search_store_info) },
	{ HP_POP(clif->search_store_info_click_ack, HP_clif_search_store_info_click_ack) },
	{ HP_POP(clif->elemental_info, HP_clif_elemental_info) },
	{ HP_POP(clif->elemental_updatestatus, HP_clif_elemental_updatestatus) },
	{ HP_POP(clif->bgqueue_ack, HP_clif_bgqueue_ack) },
	{ HP_POP(clif->bgqueue_notice_delete, HP_clif_bgqueue_notice_delete) },
	{ HP_POP(clif->bgqueue_update_info, HP_clif_bgqueue_update_info) },
	{ HP_POP(clif->bgqueue_joined, HP_clif_bgqueue_joined) },
	{ HP_POP(clif->bgqueue_pcleft, HP_clif_bgqueue_pcleft) },
	{ HP_POP(clif->bgqueue_battlebegins, HP_clif_bgqueue_battlebegins) },
	{ HP_POP(clif->adopt_reply, HP_clif_adopt_reply) },
	{ HP_POP(clif->adopt_request, HP_clif_adopt_request) },
	{ HP_POP(clif->readbook, HP_clif_readbook) },
	{ HP_POP(clif->notify_time, HP_clif_notify_time) },
	{ HP_POP(clif->user_count, HP_clif_user_count) },
	{ HP_POP(clif->noask_sub, HP_clif_noask_sub) },
	{ HP_POP(clif->bc_ready, HP_clif_bc_ready) },
	{ HP_POP(clif->channel_msg, HP_clif_channel_msg) },
	{ HP_POP(clif->channel_msg2, HP_clif_channel_msg2) },
	{ HP_POP(clif->undisguise_timer, HP_clif_undisguise_timer) },
	{ HP_POP(clif->bank_deposit, HP_clif_bank_deposit) },
	{ HP_POP(clif->bank_withdraw, HP_clif_bank_withdraw) },
	{ HP_POP(clif->show_modifiers, HP_clif_show_modifiers) },
	{ HP_POP(clif->notify_bounditem, HP_clif_notify_bounditem) },
	{ HP_POP(clif->delay_damage, HP_clif_delay_damage) },
	{ HP_POP(clif->delay_damage_sub, HP_clif_delay_damage_sub) },
	{ HP_POP(clif->npc_market_open, HP_clif_npc_market_open) },
	{ HP_POP(clif->npc_market_purchase_ack, HP_clif_npc_market_purchase_ack) },
	{ HP_POP(clif->parse_roulette_db, HP_clif_parse_roulette_db) },
	{ HP_POP(clif->roulette_generate_ack, HP_clif_roulette_generate_ack) },
	{ HP_POP(clif->openmergeitem, HP_clif_openmergeitem) },
	{ HP_POP(clif->cancelmergeitem, HP_clif_cancelmergeitem) },
	{ HP_POP(clif->comparemergeitem, HP_clif_comparemergeitem) },
	{ HP_POP(clif->ackmergeitems, HP_clif_ackmergeitems) },
	{ HP_POP(clif->isdisguised, HP_clif_isdisguised) },
	{ HP_POP(clif->bl_type, HP_clif_bl_type) },
	{ HP_POP(clif->pWantToConnection, HP_clif_pWantToConnection) },
	{ HP_POP(clif->pLoadEndAck, HP_clif_pLoadEndAck) },
	{ HP_POP(clif->pTickSend, HP_clif_pTickSend) },
	{ HP_POP(clif->pHotkey, HP_clif_pHotkey) },
	{ HP_POP(clif->pProgressbar, HP_clif_pProgressbar) },
	{ HP_POP(clif->pWalkToXY, HP_clif_pWalkToXY) },
	{ HP_POP(clif->pQuitGame, HP_clif_pQuitGame) },
	{ HP_POP(clif->pGetCharNameRequest, HP_clif_pGetCharNameRequest) },
	{ HP_POP(clif->pGlobalMessage, HP_clif_pGlobalMessage) },
	{ HP_POP(clif->pMapMove, HP_clif_pMapMove) },
	{ HP_POP(clif->pChangeDir, HP_clif_pChangeDir) },
	{ HP_POP(clif->pEmotion, HP_clif_pEmotion) },
	{ HP_POP(clif->pHowManyConnections, HP_clif_pHowManyConnections) },
	{ HP_POP(clif->pActionRequest, HP_clif_pActionRequest) },
	{ HP_POP(clif->pActionRequest_sub, HP_clif_pActionRequest_sub) },
	{ HP_POP(clif->pRestart, HP_clif_pRestart) },
	{ HP_POP(clif->pWisMessage, HP_clif_pWisMessage) },
	{ HP_POP(clif->pBroadcast, HP_clif_pBroadcast) },
	{ HP_POP(clif->pTakeItem, HP_clif_pTakeItem) },
	{ HP_POP(clif->pDropItem, HP_clif_pDropItem) },
	{ HP_POP(clif->pUseItem, HP_clif_pUseItem) },
	{ HP_POP(clif->pEquipItem, HP_clif_pEquipItem) },
	{ HP_POP(clif->pUnequipItem, HP_clif_pUnequipItem) },
	{ HP_POP(clif->pNpcClicked, HP_clif_pNpcClicked) },
	{ HP_POP(clif->pNpcBuySellSelected, HP_clif_pNpcBuySellSelected) },
	{ HP_POP(clif->pNpcBuyListSend, HP_clif_pNpcBuyListSend) },
	{ HP_POP(clif->pNpcSellListSend, HP_clif_pNpcSellListSend) },
	{ HP_POP(clif->pCreateChatRoom, HP_clif_pCreateChatRoom) },
	{ HP_POP(clif->pChatAddMember, HP_clif_pChatAddMember) },
	{ HP_POP(clif->pChatRoomStatusChange, HP_clif_pChatRoomStatusChange) },
	{ HP_POP(clif->pChangeChatOwner, HP_clif_pChangeChatOwner) },
	{ HP_POP(clif->pKickFromChat, HP_clif_pKickFromChat) },
	{ HP_POP(clif->pChatLeave, HP_clif_pChatLeave) },
	{ HP_POP(clif->pTradeRequest, HP_clif_pTradeRequest) },
	{ HP_POP(clif->pTradeAck, HP_clif_pTradeAck) },
	{ HP_POP(clif->pTradeAddItem, HP_clif_pTradeAddItem) },
	{ HP_POP(clif->pTradeOk, HP_clif_pTradeOk) },
	{ HP_POP(clif->pTradeCancel, HP_clif_pTradeCancel) },
	{ HP_POP(clif->pTradeCommit, HP_clif_pTradeCommit) },
	{ HP_POP(clif->pStopAttack, HP_clif_pStopAttack) },
	{ HP_POP(clif->pPutItemToCart, HP_clif_pPutItemToCart) },
	{ HP_POP(clif->pGetItemFromCart, HP_clif_pGetItemFromCart) },
	{ HP_POP(clif->pRemoveOption, HP_clif_pRemoveOption) },
	{ HP_POP(clif->pChangeCart, HP_clif_pChangeCart) },
	{ HP_POP(clif->pStatusUp, HP_clif_pStatusUp) },
	{ HP_POP(clif->pSkillUp, HP_clif_pSkillUp) },
	{ HP_POP(clif->pUseSkillToId, HP_clif_pUseSkillToId) },
	{ HP_POP(clif->pUseSkillToId_homun, HP_clif_pUseSkillToId_homun) },
	{ HP_POP(clif->pUseSkillToId_mercenary, HP_clif_pUseSkillToId_mercenary) },
	{ HP_POP(clif->pUseSkillToPos, HP_clif_pUseSkillToPos) },
	{ HP_POP(clif->pUseSkillToPosSub, HP_clif_pUseSkillToPosSub) },
	{ HP_POP(clif->pUseSkillToPos_homun, HP_clif_pUseSkillToPos_homun) },
	{ HP_POP(clif->pUseSkillToPos_mercenary, HP_clif_pUseSkillToPos_mercenary) },
	{ HP_POP(clif->pUseSkillToPosMoreInfo, HP_clif_pUseSkillToPosMoreInfo) },
	{ HP_POP(clif->pUseSkillMap, HP_clif_pUseSkillMap) },
	{ HP_POP(clif->pRequestMemo, HP_clif_pRequestMemo) },
	{ HP_POP(clif->pProduceMix, HP_clif_pProduceMix) },
	{ HP_POP(clif->pCooking, HP_clif_pCooking) },
	{ HP_POP(clif->pRepairItem, HP_clif_pRepairItem) },
	{ HP_POP(clif->pWeaponRefine, HP_clif_pWeaponRefine) },
	{ HP_POP(clif->pNpcSelectMenu, HP_clif_pNpcSelectMenu) },
	{ HP_POP(clif->pNpcNextClicked, HP_clif_pNpcNextClicked) },
	{ HP_POP(clif->pNpcAmountInput, HP_clif_pNpcAmountInput) },
	{ HP_POP(clif->pNpcStringInput, HP_clif_pNpcStringInput) },
	{ HP_POP(clif->pNpcCloseClicked, HP_clif_pNpcCloseClicked) },
	{ HP_POP(clif->pItemIdentify, HP_clif_pItemIdentify) },
	{ HP_POP(clif->pSelectArrow, HP_clif_pSelectArrow) },
	{ HP_POP(clif->pAutoSpell, HP_clif_pAutoSpell) },
	{ HP_POP(clif->pUseCard, HP_clif_pUseCard) },
	{ HP_POP(clif->pInsertCard, HP_clif_pInsertCard) },
	{ HP_POP(clif->pSolveCharName, HP_clif_pSolveCharName) },
	{ HP_POP(clif->pResetChar, HP_clif_pResetChar) },
	{ HP_POP(clif->pLocalBroadcast, HP_clif_pLocalBroadcast) },
	{ HP_POP(clif->pMoveToKafra, HP_clif_pMoveToKafra) },
	{ HP_POP(clif->pMoveFromKafra, HP_clif_pMoveFromKafra) },
	{ HP_POP(clif->pMoveToKafraFromCart, HP_clif_pMoveToKafraFromCart) },
	{ HP_POP(clif->pMoveFromKafraToCart, HP_clif_pMoveFromKafraToCart) },
	{ HP_POP(clif->pCloseKafra, HP_clif_pCloseKafra) },
	{ HP_POP(clif->pStoragePassword, HP_clif_pStoragePassword) },
	{ HP_POP(clif->pCreateParty, HP_clif_pCreateParty) },
	{ HP_POP(clif->pCreateParty2, HP_clif_pCreateParty2) },
	{ HP_POP(clif->pPartyInvite, HP_clif_pPartyInvite) },
	{ HP_POP(clif->pPartyInvite2, HP_clif_pPartyInvite2) },
	{ HP_POP(clif->pReplyPartyInvite, HP_clif_pReplyPartyInvite) },
	{ HP_POP(clif->pReplyPartyInvite2, HP_clif_pReplyPartyInvite2) },
	{ HP_POP(clif->pLeaveParty, HP_clif_pLeaveParty) },
	{ HP_POP(clif->pRemovePartyMember, HP_clif_pRemovePartyMember) },
	{ HP_POP(clif->pPartyChangeOption, HP_clif_pPartyChangeOption) },
	{ HP_POP(clif->pPartyMessage, HP_clif_pPartyMessage) },
	{ HP_POP(clif->pPartyChangeLeader, HP_clif_pPartyChangeLeader) },
	{ HP_POP(clif->pPartyBookingRegisterReq, HP_clif_pPartyBookingRegisterReq) },
	{ HP_POP(clif->pPartyBookingSearchReq, HP_clif_pPartyBookingSearchReq) },
	{ HP_POP(clif->pPartyBookingDeleteReq, HP_clif_pPartyBookingDeleteReq) },
	{ HP_POP(clif->pPartyBookingUpdateReq, HP_clif_pPartyBookingUpdateReq) },
	{ HP_POP(clif->pPartyRecruitRegisterReq, HP_clif_pPartyRecruitRegisterReq) },
	{ HP_POP(clif->pPartyRecruitSearchReq, HP_clif_pPartyRecruitSearchReq) },
	{ HP_POP(clif->pPartyRecruitDeleteReq, HP_clif_pPartyRecruitDeleteReq) },
	{ HP_POP(clif->pPartyRecruitUpdateReq, HP_clif_pPartyRecruitUpdateReq) },
	{ HP_POP(clif->pCloseVending, HP_clif_pCloseVending) },
	{ HP_POP(clif->pVendingListReq, HP_clif_pVendingListReq) },
	{ HP_POP(clif->pPurchaseReq, HP_clif_pPurchaseReq) },
	{ HP_POP(clif->pPurchaseReq2, HP_clif_pPurchaseReq2) },
	{ HP_POP(clif->pOpenVending, HP_clif_pOpenVending) },
	{ HP_POP(clif->pCreateGuild, HP_clif_pCreateGuild) },
	{ HP_POP(clif->pGuildCheckMaster, HP_clif_pGuildCheckMaster) },
	{ HP_POP(clif->pGuildRequestInfo, HP_clif_pGuildRequestInfo) },
	{ HP_POP(clif->pGuildChangePositionInfo, HP_clif_pGuildChangePositionInfo) },
	{ HP_POP(clif->pGuildChangeMemberPosition, HP_clif_pGuildChangeMemberPosition) },
	{ HP_POP(clif->pGuildRequestEmblem, HP_clif_pGuildRequestEmblem) },
	{ HP_POP(clif->pGuildChangeEmblem, HP_clif_pGuildChangeEmblem) },
	{ HP_POP(clif->pGuildChangeNotice, HP_clif_pGuildChangeNotice) },
	{ HP_POP(clif->pGuildInvite, HP_clif_pGuildInvite) },
	{ HP_POP(clif->pGuildReplyInvite, HP_clif_pGuildReplyInvite) },
	{ HP_POP(clif->pGuildLeave, HP_clif_pGuildLeave) },
	{ HP_POP(clif->pGuildExpulsion, HP_clif_pGuildExpulsion) },
	{ HP_POP(clif->pGuildMessage, HP_clif_pGuildMessage) },
	{ HP_POP(clif->pGuildRequestAlliance, HP_clif_pGuildRequestAlliance) },
	{ HP_POP(clif->pGuildReplyAlliance, HP_clif_pGuildReplyAlliance) },
	{ HP_POP(clif->pGuildDelAlliance, HP_clif_pGuildDelAlliance) },
	{ HP_POP(clif->pGuildOpposition, HP_clif_pGuildOpposition) },
	{ HP_POP(clif->pGuildBreak, HP_clif_pGuildBreak) },
	{ HP_POP(clif->pPetMenu, HP_clif_pPetMenu) },
	{ HP_POP(clif->pCatchPet, HP_clif_pCatchPet) },
	{ HP_POP(clif->pSelectEgg, HP_clif_pSelectEgg) },
	{ HP_POP(clif->pSendEmotion, HP_clif_pSendEmotion) },
	{ HP_POP(clif->pChangePetName, HP_clif_pChangePetName) },
	{ HP_POP(clif->pGMKick, HP_clif_pGMKick) },
	{ HP_POP(clif->pGMKickAll, HP_clif_pGMKickAll) },
	{ HP_POP(clif->pGMShift, HP_clif_pGMShift) },
	{ HP_POP(clif->pGMRemove2, HP_clif_pGMRemove2) },
	{ HP_POP(clif->pGMRecall, HP_clif_pGMRecall) },
	{ HP_POP(clif->pGMRecall2, HP_clif_pGMRecall2) },
	{ HP_POP(clif->pGM_Monster_Item, HP_clif_pGM_Monster_Item) },
	{ HP_POP(clif->pGMHide, HP_clif_pGMHide) },
	{ HP_POP(clif->pGMReqNoChat, HP_clif_pGMReqNoChat) },
	{ HP_POP(clif->pGMRc, HP_clif_pGMRc) },
	{ HP_POP(clif->pGMReqAccountName, HP_clif_pGMReqAccountName) },
	{ HP_POP(clif->pGMChangeMapType, HP_clif_pGMChangeMapType) },
	{ HP_POP(clif->pGMFullStrip, HP_clif_pGMFullStrip) },
	{ HP_POP(clif->pPMIgnore, HP_clif_pPMIgnore) },
	{ HP_POP(clif->pPMIgnoreAll, HP_clif_pPMIgnoreAll) },
	{ HP_POP(clif->pPMIgnoreList, HP_clif_pPMIgnoreList) },
	{ HP_POP(clif->pNoviceDoriDori, HP_clif_pNoviceDoriDori) },
	{ HP_POP(clif->pNoviceExplosionSpirits, HP_clif_pNoviceExplosionSpirits) },
	{ HP_POP(clif->pFriendsListAdd, HP_clif_pFriendsListAdd) },
	{ HP_POP(clif->pFriendsListReply, HP_clif_pFriendsListReply) },
	{ HP_POP(clif->pFriendsListRemove, HP_clif_pFriendsListRemove) },
	{ HP_POP(clif->pPVPInfo, HP_clif_pPVPInfo) },
	{ HP_POP(clif->pBlacksmith, HP_clif_pBlacksmith) },
	{ HP_POP(clif->pAlchemist, HP_clif_pAlchemist) },
	{ HP_POP(clif->pTaekwon, HP_clif_pTaekwon) },
	{ HP_POP(clif->pRankingPk, HP_clif_pRankingPk) },
	{ HP_POP(clif->pFeelSaveOk, HP_clif_pFeelSaveOk) },
	{ HP_POP(clif->pChangeHomunculusName, HP_clif_pChangeHomunculusName) },
	{ HP_POP(clif->pHomMoveToMaster, HP_clif_pHomMoveToMaster) },
	{ HP_POP(clif->pHomMoveTo, HP_clif_pHomMoveTo) },
	{ HP_POP(clif->pHomAttack, HP_clif_pHomAttack) },
	{ HP_POP(clif->pHomMenu, HP_clif_pHomMenu) },
	{ HP_POP(clif->pAutoRevive, HP_clif_pAutoRevive) },
	{ HP_POP(clif->pCheck, HP_clif_pCheck) },
	{ HP_POP(clif->pMail_refreshinbox, HP_clif_pMail_refreshinbox) },
	{ HP_POP(clif->pMail_read, HP_clif_pMail_read) },
	{ HP_POP(clif->pMail_getattach, HP_clif_pMail_getattach) },
	{ HP_POP(clif->pMail_delete, HP_clif_pMail_delete) },
	{ HP_POP(clif->pMail_return, HP_clif_pMail_return) },
	{ HP_POP(clif->pMail_setattach, HP_clif_pMail_setattach) },
	{ HP_POP(clif->pMail_winopen, HP_clif_pMail_winopen) },
	{ HP_POP(clif->pMail_send, HP_clif_pMail_send) },
	{ HP_POP(clif->pAuction_cancelreg, HP_clif_pAuction_cancelreg) },
	{ HP_POP(clif->pAuction_setitem, HP_clif_pAuction_setitem) },
	{ HP_POP(clif->pAuction_register, HP_clif_pAuction_register) },
	{ HP_POP(clif->pAuction_cancel, HP_clif_pAuction_cancel) },
	{ HP_POP(clif->pAuction_close, HP_clif_pAuction_close) },
	{ HP_POP(clif->pAuction_bid, HP_clif_pAuction_bid) },
	{ HP_POP(clif->pAuction_search, HP_clif_pAuction_search) },
	{ HP_POP(clif->pAuction_buysell, HP_clif_pAuction_buysell) },
	{ HP_POP(clif->pcashshop_buy, HP_clif_pcashshop_buy) },
	{ HP_POP(clif->pAdopt_request, HP_clif_pAdopt_request) },
	{ HP_POP(clif->pAdopt_reply, HP_clif_pAdopt_reply) },
	{ HP_POP(clif->pViewPlayerEquip, HP_clif_pViewPlayerEquip) },
	{ HP_POP(clif->pEquipTick, HP_clif_pEquipTick) },
	{ HP_POP(clif->pquestStateAck, HP_clif_pquestStateAck) },
	{ HP_POP(clif->pmercenary_action, HP_clif_pmercenary_action) },
	{ HP_POP(clif->pBattleChat, HP_clif_pBattleChat) },
	{ HP_POP(clif->pLessEffect, HP_clif_pLessEffect) },
	{ HP_POP(clif->pItemListWindowSelected, HP_clif_pItemListWindowSelected) },
	{ HP_POP(clif->pReqOpenBuyingStore, HP_clif_pReqOpenBuyingStore) },
	{ HP_POP(clif->pReqCloseBuyingStore, HP_clif_pReqCloseBuyingStore) },
	{ HP_POP(clif->pReqClickBuyingStore, HP_clif_pReqClickBuyingStore) },
	{ HP_POP(clif->pReqTradeBuyingStore, HP_clif_pReqTradeBuyingStore) },
	{ HP_POP(clif->pSearchStoreInfo, HP_clif_pSearchStoreInfo) },
	{ HP_POP(clif->pSearchStoreInfoNextPage, HP_clif_pSearchStoreInfoNextPage) },
	{ HP_POP(clif->pCloseSearchStoreInfo, HP_clif_pCloseSearchStoreInfo) },
	{ HP_POP(clif->pSearchStoreInfoListItemClick, HP_clif_pSearchStoreInfoListItemClick) },
	{ HP_POP(clif->pDebug, HP_clif_pDebug) },
	{ HP_POP(clif->pSkillSelectMenu, HP_clif_pSkillSelectMenu) },
	{ HP_POP(clif->pMoveItem, HP_clif_pMoveItem) },
	{ HP_POP(clif->pDull, HP_clif_pDull) },
	{ HP_POP(clif->pBGQueueRegister, HP_clif_pBGQueueRegister) },
	{ HP_POP(clif->pBGQueueCheckState, HP_clif_pBGQueueCheckState) },
	{ HP_POP(clif->pBGQueueRevokeReq, HP_clif_pBGQueueRevokeReq) },
	{ HP_POP(clif->pBGQueueBattleBeginAck, HP_clif_pBGQueueBattleBeginAck) },
	{ HP_POP(clif->pCashShopOpen, HP_clif_pCashShopOpen) },
	{ HP_POP(clif->pCashShopClose, HP_clif_pCashShopClose) },
	{ HP_POP(clif->pCashShopReqTab, HP_clif_pCashShopReqTab) },
	{ HP_POP(clif->pCashShopSchedule, HP_clif_pCashShopSchedule) },
	{ HP_POP(clif->pCashShopBuy, HP_clif_pCashShopBuy) },
	{ HP_POP(clif->pPartyTick, HP_clif_pPartyTick) },
	{ HP_POP(clif->pGuildInvite2, HP_clif_pGuildInvite2) },
	{ HP_POP(clif->pPartyBookingAddFilter, HP_clif_pPartyBookingAddFilter) },
	{ HP_POP(clif->pPartyBookingSubFilter, HP_clif_pPartyBookingSubFilter) },
	{ HP_POP(clif->pPartyBookingReqVolunteer, HP_clif_pPartyBookingReqVolunteer) },
	{ HP_POP(clif->pPartyBookingRefuseVolunteer, HP_clif_pPartyBookingRefuseVolunteer) },
	{ HP_POP(clif->pPartyBookingCancelVolunteer, HP_clif_pPartyBookingCancelVolunteer) },
	{ HP_POP(clif->pBankDeposit, HP_clif_pBankDeposit) },
	{ HP_POP(clif->pBankWithdraw, HP_clif_pBankWithdraw) },
	{ HP_POP(clif->pBankCheck, HP_clif_pBankCheck) },
	{ HP_POP(clif->pBankOpen, HP_clif_pBankOpen) },
	{ HP_POP(clif->pBankClose, HP_clif_pBankClose) },
	{ HP_POP(clif->pRouletteOpen, HP_clif_pRouletteOpen) },
	{ HP_POP(clif->pRouletteInfo, HP_clif_pRouletteInfo) },
	{ HP_POP(clif->pRouletteClose, HP_clif_pRouletteClose) },
	{ HP_POP(clif->pRouletteGenerate, HP_clif_pRouletteGenerate) },
	{ HP_POP(clif->pRouletteRecvItem, HP_clif_pRouletteRecvItem) },
	{ HP_POP(clif->pNPCShopClosed, HP_clif_pNPCShopClosed) },
	{ HP_POP(clif->pNPCMarketClosed, HP_clif_pNPCMarketClosed) },
	{ HP_POP(clif->pNPCMarketPurchase, HP_clif_pNPCMarketPurchase) },
	{ HP_POP(clif->add_random_options, HP_clif_add_random_options) },
	{ HP_POP(clif->pHotkeyRowShift, HP_clif_pHotkeyRowShift) },
	{ HP_POP(clif->dressroom_open, HP_clif_dressroom_open) },
	{ HP_POP(clif->pOneClick_ItemIdentify, HP_clif_pOneClick_ItemIdentify) },
	{ HP_POP(clif->selectcart, HP_clif_selectcart) },
	{ HP_POP(clif->pSelectCart, HP_clif_pSelectCart) },
	{ HP_POP(clif->get_bl_name, HP_clif_get_bl_name) },
/* cmdline_interface */
	{ HP_POP(cmdline->init, HP_cmdline_init) },
	{ HP_POP(cmdline->final, HP_cmdline_final) },
	{ HP_POP(cmdline->arg_add, HP_cmdline_arg_add) },
	{ HP_POP(cmdline->exec, HP_cmdline_exec) },
	{ HP_POP(cmdline->arg_next_value, HP_cmdline_arg_next_value) },
	{ HP_POP(cmdline->arg_source, HP_cmdline_arg_source) },
/* console_interface */
	{ HP_POP(console->init, HP_console_init) },
	{ HP_POP(console->final, HP_console_final) },
	{ HP_POP(console->display_title, HP_console_display_title) },
	{ HP_POP(console->display_gplnotice, HP_console_display_gplnotice) },
/* core_interface */
	{ HP_POP(core->shutdown_callback, HP_core_shutdown_callback) },
/* db_interface */
	{ HP_POP(DB->fix_options, HP_DB_fix_options) },
	{ HP_POP(DB->default_cmp, HP_DB_default_cmp) },
	{ HP_POP(DB->default_hash, HP_DB_default_hash) },
	{ HP_POP(DB->default_release, HP_DB_default_release) },
	{ HP_POP(DB->custom_release, HP_DB_custom_release) },
	{ HP_POP(DB->alloc, HP_DB_alloc) },
	{ HP_POP(DB->i2key, HP_DB_i2key) },
	{ HP_POP(DB->ui2key, HP_DB_ui2key) },
	{ HP_POP(DB->str2key, HP_DB_str2key) },
	{ HP_POP(DB->i642key, HP_DB_i642key) },
	{ HP_POP(DB->ui642key, HP_DB_ui642key) },
	{ HP_POP(DB->i2data, HP_DB_i2data) },
	{ HP_POP(DB->ui2data, HP_DB_ui2data) },
	{ HP_POP(DB->ptr2data, HP_DB_ptr2data) },
	{ HP_POP(DB->data2i, HP_DB_data2i) },
	{ HP_POP(DB->data2ui, HP_DB_data2ui) },
	{ HP_POP(DB->data2ptr, HP_DB_data2ptr) },
	{ HP_POP(DB->init, HP_DB_init) },
	{ HP_POP(DB->final, HP_DB_final) },
/* des_interface */
	{ HP_POP(des->decrypt_block, HP_des_decrypt_block) },
	{ HP_POP(des->decrypt, HP_des_decrypt) },
/* duel_interface */
	{ HP_POP(duel->create, HP_duel_create) },
	{ HP_POP(duel->invite, HP_duel_invite) },
	{ HP_POP(duel->accept, HP_duel_accept) },
	{ HP_POP(duel->reject, HP_duel_reject) },
	{ HP_POP(duel->leave, HP_duel_leave) },
	{ HP_POP(duel->showinfo, HP_duel_showinfo) },
	{ HP_POP(duel->checktime, HP_duel_checktime) },
	{ HP_POP(duel->init, HP_duel_init) },
	{ HP_POP(duel->final, HP_duel_final) },
/* elemental_interface */
	{ HP_POP(elemental->init, HP_elemental_init) },
	{ HP_POP(elemental->final, HP_elemental_final) },
	{ HP_POP(elemental->class, HP_elemental_class) },
	{ HP_POP(elemental->get_viewdata, HP_elemental_get_viewdata) },
	{ HP_POP(elemental->create, HP_elemental_create) },
	{ HP_POP(elemental->data_received, HP_elemental_data_received) },
	{ HP_POP(elemental->save, HP_elemental_save) },
	{ HP_POP(elemental->change_mode_ack, HP_elemental_change_mode_ack) },
	{ HP_POP(elemental->change_mode, HP_elemental_change_mode) },
	{ HP_POP(elemental->heal, HP_elemental_heal) },
	{ HP_POP(elemental->dead, HP_elemental_dead) },
	{ HP_POP(elemental->delete, HP_elemental_delete) },
	{ HP_POP(elemental->summon_stop, HP_elemental_summon_stop) },
	{ HP_POP(elemental->get_lifetime, HP_elemental_get_lifetime) },
	{ HP_POP(elemental->unlocktarget, HP_elemental_unlocktarget) },
	{ HP_POP(elemental->skillnotok, HP_elemental_skillnotok) },
	{ HP_POP(elemental->set_target, HP_elemental_set_target) },
	{ HP_POP(elemental->clean_single_effect, HP_elemental_clean_single_effect) },
	{ HP_POP(elemental->clean_effect, HP_elemental_clean_effect) },
	{ HP_POP(elemental->action, HP_elemental_action) },
	{ HP_POP(elemental->skill_get_requirements, HP_elemental_skill_get_requirements) },
	{ HP_POP(elemental->read_skilldb, HP_elemental_read_skilldb) },
	{ HP_POP(elemental->reload_db, HP_elemental_reload_db) },
	{ HP_POP(elemental->reload_skilldb, HP_elemental_reload_skilldb) },
	{ HP_POP(elemental->search_index, HP_elemental_search_index) },
	{ HP_POP(elemental->summon_init, HP_elemental_summon_init) },
	{ HP_POP(elemental->summon_end_timer, HP_elemental_summon_end_timer) },
	{ HP_POP(elemental->ai_sub_timer_activesearch, HP_elemental_ai_sub_timer_activesearch) },
	{ HP_POP(elemental->ai_sub_timer, HP_elemental_ai_sub_timer) },
	{ HP_POP(elemental->ai_sub_foreachclient, HP_elemental_ai_sub_foreachclient) },
	{ HP_POP(elemental->ai_timer, HP_elemental_ai_timer) },
	{ HP_POP(elemental->read_db, HP_elemental_read_db) },
/* grfio_interface */
	{ HP_POP(grfio->init, HP_grfio_init) },
	{ HP_POP(grfio->final, HP_grfio_final) },
	{ HP_POP(grfio->reads, HP_grfio_reads) },
	{ HP_POP(grfio->find_file, HP_grfio_find_file) },
	{ HP_POP(grfio->crc32, HP_grfio_crc32) },
	{ HP_POP(grfio->decode_zip, HP_grfio_decode_zip) },
	{ HP_POP(grfio->encode_zip, HP_grfio_encode_zip) },
/* guild_interface */
	{ HP_POP(guild->init, HP_guild_init) },
	{ HP_POP(guild->final, HP_guild_final) },
	{ HP_POP(guild->skill_get_max, HP_guild_skill_get_max) },
	{ HP_POP(guild->checkskill, HP_guild_checkskill) },
	{ HP_POP(guild->check_skill_require, HP_guild_check_skill_require) },
	{ HP_POP(guild->checkcastles, HP_guild_checkcastles) },
	{ HP_POP(guild->isallied, HP_guild_isallied) },
	{ HP_POP(guild->search, HP_guild_search) },
	{ HP_POP(guild->searchname, HP_guild_searchname) },
	{ HP_POP(guild->castle_search, HP_guild_castle_search) },
	{ HP_POP(guild->mapname2gc, HP_guild_mapname2gc) },
	{ HP_POP(guild->mapindex2gc, HP_guild_mapindex2gc) },
	{ HP_POP(guild->getavailablesd, HP_guild_getavailablesd) },
	{ HP_POP(guild->getindex, HP_guild_getindex) },
	{ HP_POP(guild->getposition, HP_guild_getposition) },
	{ HP_POP(guild->payexp, HP_guild_payexp) },
	{ HP_POP(guild->getexp, HP_guild_getexp) },
	{ HP_POP(guild->create, HP_guild_create) },
	{ HP_POP(guild->created, HP_guild_created) },
	{ HP_POP(guild->request_info, HP_guild_request_info) },
	{ HP_POP(guild->recv_noinfo, HP_guild_recv_noinfo) },
	{ HP_POP(guild->recv_info, HP_guild_recv_info) },
	{ HP_POP(guild->npc_request_info, HP_guild_npc_request_info) },
	{ HP_POP(guild->invite, HP_guild_invite) },
	{ HP_POP(guild->reply_invite, HP_guild_reply_invite) },
	{ HP_POP(guild->member_joined, HP_guild_member_joined) },
	{ HP_POP(guild->member_added, HP_guild_member_added) },
	{ HP_POP(guild->leave, HP_guild_leave) },
	{ HP_POP(guild->member_withdraw, HP_guild_member_withdraw) },
	{ HP_POP(guild->expulsion, HP_guild_expulsion) },
	{ HP_POP(guild->skillup, HP_guild_skillup) },
	{ HP_POP(guild->block_skill, HP_guild_block_skill) },
	{ HP_POP(guild->reqalliance, HP_guild_reqalliance) },
	{ HP_POP(guild->reply_reqalliance, HP_guild_reply_reqalliance) },
	{ HP_POP(guild->allianceack, HP_guild_allianceack) },
	{ HP_POP(guild->delalliance, HP_guild_delalliance) },
	{ HP_POP(guild->opposition, HP_guild_opposition) },
	{ HP_POP(guild->check_alliance, HP_guild_check_alliance) },
	{ HP_POP(guild->send_memberinfoshort, HP_guild_send_memberinfoshort) },
	{ HP_POP(guild->recv_memberinfoshort, HP_guild_recv_memberinfoshort) },
	{ HP_POP(guild->change_memberposition, HP_guild_change_memberposition) },
	{ HP_POP(guild->memberposition_changed, HP_guild_memberposition_changed) },
	{ HP_POP(guild->change_position, HP_guild_change_position) },
	{ HP_POP(guild->position_changed, HP_guild_position_changed) },
	{ HP_POP(guild->change_notice, HP_guild_change_notice) },
	{ HP_POP(guild->notice_changed, HP_guild_notice_changed) },
	{ HP_POP(guild->change_emblem, HP_guild_change_emblem) },
	{ HP_POP(guild->emblem_changed, HP_guild_emblem_changed) },
	{ HP_POP(guild->send_message, HP_guild_send_message) },
	{ HP_POP(guild->recv_message, HP_guild_recv_message) },
	{ HP_POP(guild->send_dot_remove, HP_guild_send_dot_remove) },
	{ HP_POP(guild->skillupack, HP_guild_skillupack) },
	{ HP_POP(guild->dobreak, HP_guild_dobreak) },
	{ HP_POP(guild->broken, HP_guild_broken) },
	{ HP_POP(guild->gm_change, HP_guild_gm_change) },
	{ HP_POP(guild->gm_changed, HP_guild_gm_changed) },
	{ HP_POP(guild->castle_map_init, HP_guild_castle_map_init) },
	{ HP_POP(guild->castledatasave, HP_guild_castledatasave) },
	{ HP_POP(guild->castledataloadack, HP_guild_castledataloadack) },
	{ HP_POP(guild->castle_reconnect, HP_guild_castle_reconnect) },
	{ HP_POP(guild->agit_start, HP_guild_agit_start) },
	{ HP_POP(guild->agit_end, HP_guild_agit_end) },
	{ HP_POP(guild->agit2_start, HP_guild_agit2_start) },
	{ HP_POP(guild->agit2_end, HP_guild_agit2_end) },
	{ HP_POP(guild->flag_add, HP_guild_flag_add) },
	{ HP_POP(guild->flag_remove, HP_guild_flag_remove) },
	{ HP_POP(guild->flags_clear, HP_guild_flags_clear) },
	{ HP_POP(guild->aura_refresh, HP_guild_aura_refresh) },
	{ HP_POP(guild->retrieveitembound, HP_guild_retrieveitembound) },
	{ HP_POP(guild->payexp_timer, HP_guild_payexp_timer) },
	{ HP_POP(guild->sd_check, HP_guild_sd_check) },
	{ HP_POP(guild->read_guildskill_tree_db, HP_guild_read_guildskill_tree_db) },
	{ HP_POP(guild->read_castledb, HP_guild_read_castledb) },
	{ HP_POP(guild->payexp_timer_sub, HP_guild_payexp_timer_sub) },
	{ HP_POP(guild->send_xy_timer_sub, HP_guild_send_xy_timer_sub) },
	{ HP_POP(guild->send_xy_timer, HP_guild_send_xy_timer) },
	{ HP_POP(guild->create_expcache, HP_guild_create_expcache) },
	{ HP_POP(guild->eventlist_db_final, HP_guild_eventlist_db_final) },
	{ HP_POP(guild->expcache_db_final, HP_guild_expcache_db_final) },
	{ HP_POP(guild->castle_db_final, HP_guild_castle_db_final) },
	{ HP_POP(guild->broken_sub, HP_guild_broken_sub) },
	{ HP_POP(guild->castle_broken_sub, HP_guild_castle_broken_sub) },
	{ HP_POP(guild->makemember, HP_guild_makemember) },
	{ HP_POP(guild->check_member, HP_guild_check_member) },
	{ HP_POP(guild->get_alliance_count, HP_guild_get_alliance_count) },
	{ HP_POP(guild->castle_reconnect_sub, HP_guild_castle_reconnect_sub) },
/* guild_storage_interface */
	{ HP_POP(gstorage->ensure, HP_gstorage_ensure) },
	{ HP_POP(gstorage->init, HP_gstorage_init) },
	{ HP_POP(gstorage->final, HP_gstorage_final) },
	{ HP_POP(gstorage->delete, HP_gstorage_delete) },
	{ HP_POP(gstorage->open, HP_gstorage_open) },
	{ HP_POP(gstorage->additem, HP_gstorage_additem) },
	{ HP_POP(gstorage->delitem, HP_gstorage_delitem) },
	{ HP_POP(gstorage->add, HP_gstorage_add) },
	{ HP_POP(gstorage->get, HP_gstorage_get) },
	{ HP_POP(gstorage->addfromcart, HP_gstorage_addfromcart) },
	{ HP_POP(gstorage->gettocart, HP_gstorage_gettocart) },
	{ HP_POP(gstorage->close, HP_gstorage_close) },
	{ HP_POP(gstorage->pc_quit, HP_gstorage_pc_quit) },
	{ HP_POP(gstorage->save, HP_gstorage_save) },
	{ HP_POP(gstorage->saved, HP_gstorage_saved) },
	{ HP_POP(gstorage->create, HP_gstorage_create) },
/* homunculus_interface */
	{ HP_POP(homun->init, HP_homun_init) },
	{ HP_POP(homun->final, HP_homun_final) },
	{ HP_POP(homun->reload, HP_homun_reload) },
	{ HP_POP(homun->reload_skill, HP_homun_reload_skill) },
	{ HP_POP(homun->get_viewdata, HP_homun_get_viewdata) },
	{ HP_POP(homun->class2type, HP_homun_class2type) },
	{ HP_POP(homun->damaged, HP_homun_damaged) },
	{ HP_POP(homun->dead, HP_homun_dead) },
	{ HP_POP(homun->vaporize, HP_homun_vaporize) },
	{ HP_POP(homun->delete, HP_homun_delete) },
	{ HP_POP(homun->checkskill, HP_homun_checkskill) },
	{ HP_POP(homun->calc_skilltree, HP_homun_calc_skilltree) },
	{ HP_POP(homun->skill_tree_get_max, HP_homun_skill_tree_get_max) },
	{ HP_POP(homun->skillup, HP_homun_skillup) },
	{ HP_POP(homun->levelup, HP_homun_levelup) },
	{ HP_POP(homun->change_class, HP_homun_change_class) },
	{ HP_POP(homun->evolve, HP_homun_evolve) },
	{ HP_POP(homun->mutate, HP_homun_mutate) },
	{ HP_POP(homun->gainexp, HP_homun_gainexp) },
	{ HP_POP(homun->add_intimacy, HP_homun_add_intimacy) },
	{ HP_POP(homun->consume_intimacy, HP_homun_consume_intimacy) },
	{ HP_POP(homun->healed, HP_homun_healed) },
	{ HP_POP(homun->save, HP_homun_save) },
	{ HP_POP(homun->menu, HP_homun_menu) },
	{ HP_POP(homun->feed, HP_homun_feed) },
	{ HP_POP(homun->hunger_timer, HP_homun_hunger_timer) },
	{ HP_POP(homun->hunger_timer_delete, HP_homun_hunger_timer_delete) },
	{ HP_POP(homun->change_name, HP_homun_change_name) },
	{ HP_POP(homun->change_name_ack, HP_homun_change_name_ack) },
	{ HP_POP(homun->db_search, HP_homun_db_search) },
	{ HP_POP(homun->create, HP_homun_create) },
	{ HP_POP(homun->init_timers, HP_homun_init_timers) },
	{ HP_POP(homun->call, HP_homun_call) },
	{ HP_POP(homun->recv_data, HP_homun_recv_data) },
	{ HP_POP(homun->creation_request, HP_homun_creation_request) },
	{ HP_POP(homun->ressurect, HP_homun_ressurect) },
	{ HP_POP(homun->revive, HP_homun_revive) },
	{ HP_POP(homun->stat_reset, HP_homun_stat_reset) },
	{ HP_POP(homun->shuffle, HP_homun_shuffle) },
	{ HP_POP(homun->read_db_sub, HP_homun_read_db_sub) },
	{ HP_POP(homun->read_db, HP_homun_read_db) },
	{ HP_POP(homun->read_skill_db_sub, HP_homun_read_skill_db_sub) },
	{ HP_POP(homun->skill_db_read, HP_homun_skill_db_read) },
	{ HP_POP(homun->exp_db_read, HP_homun_exp_db_read) },
	{ HP_POP(homun->addspiritball, HP_homun_addspiritball) },
	{ HP_POP(homun->delspiritball, HP_homun_delspiritball) },
	{ HP_POP(homun->get_intimacy_grade, HP_homun_get_intimacy_grade) },
/* instance_interface */
	{ HP_POP(instance->init, HP_instance_init) },
	{ HP_POP(instance->final, HP_instance_final) },
	{ HP_POP(instance->reload, HP_instance_reload) },
	{ HP_POP(instance->create, HP_instance_create) },
	{ HP_POP(instance->add_map, HP_instance_add_map) },
	{ HP_POP(instance->del_map, HP_instance_del_map) },
	{ HP_POP(instance->map2imap, HP_instance_map2imap) },
	{ HP_POP(instance->mapid2imapid, HP_instance_mapid2imapid) },
	{ HP_POP(instance->mapname2imap, HP_instance_mapname2imap) },
	{ HP_POP(instance->map_npcsub, HP_instance_map_npcsub) },
	{ HP_POP(instance->init_npc, HP_instance_init_npc) },
	{ HP_POP(instance->destroy, HP_instance_destroy) },
	{ HP_POP(instance->start, HP_instance_start) },
	{ HP_POP(instance->check_idle, HP_instance_check_idle) },
	{ HP_POP(instance->check_kick, HP_instance_check_kick) },
	{ HP_POP(instance->set_timeout, HP_instance_set_timeout) },
	{ HP_POP(instance->valid, HP_instance_valid) },
	{ HP_POP(instance->destroy_timer, HP_instance_destroy_timer) },
/* intif_interface */
	{ HP_POP(intif->parse, HP_intif_parse) },
	{ HP_POP(intif->create_pet, HP_intif_create_pet) },
	{ HP_POP(intif->broadcast, HP_intif_broadcast) },
	{ HP_POP(intif->broadcast2, HP_intif_broadcast2) },
	{ HP_POP(intif->main_message, HP_intif_main_message) },
	{ HP_POP(intif->wis_message, HP_intif_wis_message) },
	{ HP_POP(intif->wis_message_to_gm, HP_intif_wis_message_to_gm) },
	{ HP_POP(intif->saveregistry, HP_intif_saveregistry) },
	{ HP_POP(intif->request_registry, HP_intif_request_registry) },
	{ HP_POP(intif->request_guild_storage, HP_intif_request_guild_storage) },
	{ HP_POP(intif->send_guild_storage, HP_intif_send_guild_storage) },
	{ HP_POP(intif->create_party, HP_intif_create_party) },
	{ HP_POP(intif->request_partyinfo, HP_intif_request_partyinfo) },
	{ HP_POP(intif->party_addmember, HP_intif_party_addmember) },
	{ HP_POP(intif->party_changeoption, HP_intif_party_changeoption) },
	{ HP_POP(intif->party_leave, HP_intif_party_leave) },
	{ HP_POP(intif->party_changemap, HP_intif_party_changemap) },
	{ HP_POP(intif->break_party, HP_intif_break_party) },
	{ HP_POP(intif->party_message, HP_intif_party_message) },
	{ HP_POP(intif->party_leaderchange, HP_intif_party_leaderchange) },
	{ HP_POP(intif->guild_create, HP_intif_guild_create) },
	{ HP_POP(intif->guild_request_info, HP_intif_guild_request_info) },
	{ HP_POP(intif->guild_addmember, HP_intif_guild_addmember) },
	{ HP_POP(intif->guild_leave, HP_intif_guild_leave) },
	{ HP_POP(intif->guild_memberinfoshort, HP_intif_guild_memberinfoshort) },
	{ HP_POP(intif->guild_break, HP_intif_guild_break) },
	{ HP_POP(intif->guild_message, HP_intif_guild_message) },
	{ HP_POP(intif->guild_change_gm, HP_intif_guild_change_gm) },
	{ HP_POP(intif->guild_change_basicinfo, HP_intif_guild_change_basicinfo) },
	{ HP_POP(intif->guild_change_memberinfo, HP_intif_guild_change_memberinfo) },
	{ HP_POP(intif->guild_position, HP_intif_guild_position) },
	{ HP_POP(intif->guild_skillup, HP_intif_guild_skillup) },
	{ HP_POP(intif->guild_alliance, HP_intif_guild_alliance) },
	{ HP_POP(intif->guild_notice, HP_intif_guild_notice) },
	{ HP_POP(intif->guild_emblem, HP_intif_guild_emblem) },
	{ HP_POP(intif->guild_castle_dataload, HP_intif_guild_castle_dataload) },
	{ HP_POP(intif->guild_castle_datasave, HP_intif_guild_castle_datasave) },
	{ HP_POP(intif->itembound_req, HP_intif_itembound_req) },
	{ HP_POP(intif->request_petdata, HP_intif_request_petdata) },
	{ HP_POP(intif->save_petdata, HP_intif_save_petdata) },
	{ HP_POP(intif->delete_petdata, HP_intif_delete_petdata) },
	{ HP_POP(intif->rename, HP_intif_rename) },
	{ HP_POP(intif->homunculus_create, HP_intif_homunculus_create) },
	{ HP_POP(intif->homunculus_requestload, HP_intif_homunculus_requestload) },
	{ HP_POP(intif->homunculus_requestsave, HP_intif_homunculus_requestsave) },
	{ HP_POP(intif->homunculus_requestdelete, HP_intif_homunculus_requestdelete) },
	{ HP_POP(intif->request_questlog, HP_intif_request_questlog) },
	{ HP_POP(intif->quest_save, HP_intif_quest_save) },
	{ HP_POP(intif->mercenary_create, HP_intif_mercenary_create) },
	{ HP_POP(intif->mercenary_request, HP_intif_mercenary_request) },
	{ HP_POP(intif->mercenary_delete, HP_intif_mercenary_delete) },
	{ HP_POP(intif->mercenary_save, HP_intif_mercenary_save) },
	{ HP_POP(intif->Mail_requestinbox, HP_intif_Mail_requestinbox) },
	{ HP_POP(intif->Mail_read, HP_intif_Mail_read) },
	{ HP_POP(intif->Mail_getattach, HP_intif_Mail_getattach) },
	{ HP_POP(intif->Mail_delete, HP_intif_Mail_delete) },
	{ HP_POP(intif->Mail_return, HP_intif_Mail_return) },
	{ HP_POP(intif->Mail_send, HP_intif_Mail_send) },
	{ HP_POP(intif->Auction_requestlist, HP_intif_Auction_requestlist) },
	{ HP_POP(intif->Auction_register, HP_intif_Auction_register) },
	{ HP_POP(intif->Auction_cancel, HP_intif_Auction_cancel) },
	{ HP_POP(intif->Auction_close, HP_intif_Auction_close) },
	{ HP_POP(intif->Auction_bid, HP_intif_Auction_bid) },
	{ HP_POP(intif->elemental_create, HP_intif_elemental_create) },
	{ HP_POP(intif->elemental_request, HP_intif_elemental_request) },
	{ HP_POP(intif->elemental_delete, HP_intif_elemental_delete) },
	{ HP_POP(intif->elemental_save, HP_intif_elemental_save) },
	{ HP_POP(intif->request_accinfo, HP_intif_request_accinfo) },
	{ HP_POP(intif->CheckForCharServer, HP_intif_CheckForCharServer) },
	{ HP_POP(intif->pWisMessage, HP_intif_pWisMessage) },
	{ HP_POP(intif->pWisEnd, HP_intif_pWisEnd) },
	{ HP_POP(intif->pWisToGM_sub, HP_intif_pWisToGM_sub) },
	{ HP_POP(intif->pWisToGM, HP_intif_pWisToGM) },
	{ HP_POP(intif->pRegisters, HP_intif_pRegisters) },
	{ HP_POP(intif->pChangeNameOk, HP_intif_pChangeNameOk) },
	{ HP_POP(intif->pMessageToFD, HP_intif_pMessageToFD) },
	{ HP_POP(intif->pLoadGuildStorage, HP_intif_pLoadGuildStorage) },
	{ HP_POP(intif->pSaveGuildStorage, HP_intif_pSaveGuildStorage) },
	{ HP_POP(intif->pPartyCreated, HP_intif_pPartyCreated) },
	{ HP_POP(intif->pPartyInfo, HP_intif_pPartyInfo) },
	{ HP_POP(intif->pPartyMemberAdded, HP_intif_pPartyMemberAdded) },
	{ HP_POP(intif->pPartyOptionChanged, HP_intif_pPartyOptionChanged) },
	{ HP_POP(intif->pPartyMemberWithdraw, HP_intif_pPartyMemberWithdraw) },
	{ HP_POP(intif->pPartyMove, HP_intif_pPartyMove) },
	{ HP_POP(intif->pPartyBroken, HP_intif_pPartyBroken) },
	{ HP_POP(intif->pPartyMessage, HP_intif_pPartyMessage) },
	{ HP_POP(intif->pGuildCreated, HP_intif_pGuildCreated) },
	{ HP_POP(intif->pGuildInfo, HP_intif_pGuildInfo) },
	{ HP_POP(intif->pGuildMemberAdded, HP_intif_pGuildMemberAdded) },
	{ HP_POP(intif->pGuildMemberWithdraw, HP_intif_pGuildMemberWithdraw) },
	{ HP_POP(intif->pGuildMemberInfoShort, HP_intif_pGuildMemberInfoShort) },
	{ HP_POP(intif->pGuildBroken, HP_intif_pGuildBroken) },
	{ HP_POP(intif->pGuildMessage, HP_intif_pGuildMessage) },
	{ HP_POP(intif->pGuildBasicInfoChanged, HP_intif_pGuildBasicInfoChanged) },
	{ HP_POP(intif->pGuildMemberInfoChanged, HP_intif_pGuildMemberInfoChanged) },
	{ HP_POP(intif->pGuildPosition, HP_intif_pGuildPosition) },
	{ HP_POP(intif->pGuildSkillUp, HP_intif_pGuildSkillUp) },
	{ HP_POP(intif->pGuildAlliance, HP_intif_pGuildAlliance) },
	{ HP_POP(intif->pGuildNotice, HP_intif_pGuildNotice) },
	{ HP_POP(intif->pGuildEmblem, HP_intif_pGuildEmblem) },
	{ HP_POP(intif->pGuildCastleDataLoad, HP_intif_pGuildCastleDataLoad) },
	{ HP_POP(intif->pGuildMasterChanged, HP_intif_pGuildMasterChanged) },
	{ HP_POP(intif->pQuestLog, HP_intif_pQuestLog) },
	{ HP_POP(intif->pQuestSave, HP_intif_pQuestSave) },
	{ HP_POP(intif->pMailInboxReceived, HP_intif_pMailInboxReceived) },
	{ HP_POP(intif->pMailNew, HP_intif_pMailNew) },
	{ HP_POP(intif->pMailGetAttach, HP_intif_pMailGetAttach) },
	{ HP_POP(intif->pMailDelete, HP_intif_pMailDelete) },
	{ HP_POP(intif->pMailReturn, HP_intif_pMailReturn) },
	{ HP_POP(intif->pMailSend, HP_intif_pMailSend) },
	{ HP_POP(intif->pAuctionResults, HP_intif_pAuctionResults) },
	{ HP_POP(intif->pAuctionRegister, HP_intif_pAuctionRegister) },
	{ HP_POP(intif->pAuctionCancel, HP_intif_pAuctionCancel) },
	{ HP_POP(intif->pAuctionClose, HP_intif_pAuctionClose) },
	{ HP_POP(intif->pAuctionMessage, HP_intif_pAuctionMessage) },
	{ HP_POP(intif->pAuctionBid, HP_intif_pAuctionBid) },
	{ HP_POP(intif->pItembound_ack, HP_intif_pItembound_ack) },
	{ HP_POP(intif->pMercenaryReceived, HP_intif_pMercenaryReceived) },
	{ HP_POP(intif->pMercenaryDeleted, HP_intif_pMercenaryDeleted) },
	{ HP_POP(intif->pMercenarySaved, HP_intif_pMercenarySaved) },
	{ HP_POP(intif->pElementalReceived, HP_intif_pElementalReceived) },
	{ HP_POP(intif->pElementalDeleted, HP_intif_pElementalDeleted) },
	{ HP_POP(intif->pElementalSaved, HP_intif_pElementalSaved) },
	{ HP_POP(intif->pCreatePet, HP_intif_pCreatePet) },
	{ HP_POP(intif->pRecvPetData, HP_intif_pRecvPetData) },
	{ HP_POP(intif->pSavePetOk, HP_intif_pSavePetOk) },
	{ HP_POP(intif->pDeletePetOk, HP_intif_pDeletePetOk) },
	{ HP_POP(intif->pCreateHomunculus, HP_intif_pCreateHomunculus) },
	{ HP_POP(intif->pRecvHomunculusData, HP_intif_pRecvHomunculusData) },
	{ HP_POP(intif->pSaveHomunculusOk, HP_intif_pSaveHomunculusOk) },
	{ HP_POP(intif->pDeleteHomunculusOk, HP_intif_pDeleteHomunculusOk) },
/* irc_bot_interface */
	{ HP_POP(ircbot->init, HP_ircbot_init) },
	{ HP_POP(ircbot->final, HP_ircbot_final) },
	{ HP_POP(ircbot->parse, HP_ircbot_parse) },
	{ HP_POP(ircbot->parse_sub, HP_ircbot_parse_sub) },
	{ HP_POP(ircbot->parse_source, HP_ircbot_parse_source) },
	{ HP_POP(ircbot->func_search, HP_ircbot_func_search) },
	{ HP_POP(ircbot->connect_timer, HP_ircbot_connect_timer) },
	{ HP_POP(ircbot->identify_timer, HP_ircbot_identify_timer) },
	{ HP_POP(ircbot->join_timer, HP_ircbot_join_timer) },
	{ HP_POP(ircbot->queue_timer, HP_ircbot_queue_timer) },
	{ HP_POP(ircbot->queue, HP_ircbot_queue) },
	{ HP_POP(ircbot->send, HP_ircbot_send) },
	{ HP_POP(ircbot->relay, HP_ircbot_relay) },
	{ HP_POP(ircbot->pong, HP_ircbot_pong) },
	{ HP_POP(ircbot->privmsg, HP_ircbot_privmsg) },
	{ HP_POP(ircbot->privmsg_ctcp, HP_ircbot_privmsg_ctcp) },
	{ HP_POP(ircbot->userjoin, HP_ircbot_userjoin) },
	{ HP_POP(ircbot->userleave, HP_ircbot_userleave) },
	{ HP_POP(ircbot->usernick, HP_ircbot_usernick) },
/* itemdb_interface */
	{ HP_POP(itemdb->init, HP_itemdb_init) },
	{ HP_POP(itemdb->final, HP_itemdb_final) },
	{ HP_POP(itemdb->reload, HP_itemdb_reload) },
	{ HP_POP(itemdb->name_constants, HP_itemdb_name_constants) },
	{ HP_POP(itemdb->read_groups, HP_itemdb_read_groups) },
	{ HP_POP(itemdb->read_chains, HP_itemdb_read_chains) },
	{ HP_POP(itemdb->read_packages, HP_itemdb_read_packages) },
	{ HP_POP(itemdb->write_cached_packages, HP_itemdb_write_cached_packages) },
	{ HP_POP(itemdb->read_cached_packages, HP_itemdb_read_cached_packages) },
	{ HP_POP(itemdb->name2id, HP_itemdb_name2id) },
	{ HP_POP(itemdb->search_name, HP_itemdb_search_name) },
	{ HP_POP(itemdb->search_name_array, HP_itemdb_search_name_array) },
	{ HP_POP(itemdb->load, HP_itemdb_load) },
	{ HP_POP(itemdb->search, HP_itemdb_search) },
	{ HP_POP(itemdb->exists, HP_itemdb_exists) },
	{ HP_POP(itemdb->in_group, HP_itemdb_in_group) },
	{ HP_POP(itemdb->group_item, HP_itemdb_group_item) },
	{ HP_POP(itemdb->chain_item, HP_itemdb_chain_item) },
	{ HP_POP(itemdb->package_item, HP_itemdb_package_item) },
	{ HP_POP(itemdb->searchname_sub, HP_itemdb_searchname_sub) },
	{ HP_POP(itemdb->searchname_array_sub, HP_itemdb_searchname_array_sub) },
	{ HP_POP(itemdb->searchrandomid, HP_itemdb_searchrandomid) },
	{ HP_POP(itemdb->typename, HP_itemdb_typename) },
	{ HP_POP(itemdb->jobmask2mapid, HP_itemdb_jobmask2mapid) },
	{ HP_POP(itemdb->jobid2mapid, HP_itemdb_jobid2mapid) },
	{ HP_POP(itemdb->create_dummy_data, HP_itemdb_create_dummy_data) },
	{ HP_POP(itemdb->create_item_data, HP_itemdb_create_item_data) },
	{ HP_POP(itemdb->isequip, HP_itemdb_isequip) },
	{ HP_POP(itemdb->isequip2, HP_itemdb_isequip2) },
	{ HP_POP(itemdb->isstackable, HP_itemdb_isstackable) },
	{ HP_POP(itemdb->isstackable2, HP_itemdb_isstackable2) },
	{ HP_POP(itemdb->isdropable_sub, HP_itemdb_isdropable_sub) },
	{ HP_POP(itemdb->cantrade_sub, HP_itemdb_cantrade_sub) },
	{ HP_POP(itemdb->canpartnertrade_sub, HP_itemdb_canpartnertrade_sub) },
	{ HP_POP(itemdb->cansell_sub, HP_itemdb_cansell_sub) },
	{ HP_POP(itemdb->cancartstore_sub, HP_itemdb_cancartstore_sub) },
	{ HP_POP(itemdb->canstore_sub, HP_itemdb_canstore_sub) },
	{ HP_POP(itemdb->canguildstore_sub, HP_itemdb_canguildstore_sub) },
	{ HP_POP(itemdb->canmail_sub, HP_itemdb_canmail_sub) },
	{ HP_POP(itemdb->canauction_sub, HP_itemdb_canauction_sub) },
	{ HP_POP(itemdb->isrestricted, HP_itemdb_isrestricted) },
	{ HP_POP(itemdb->isidentified, HP_itemdb_isidentified) },
	{ HP_POP(itemdb->isidentified2, HP_itemdb_isidentified2) },
	{ HP_POP(itemdb->combo_split_atoi, HP_itemdb_combo_split_atoi) },
	{ HP_POP(itemdb->read_combos, HP_itemdb_read_combos) },
	{ HP_POP(itemdb->gendercheck, HP_itemdb_gendercheck) },
	{ HP_POP(itemdb->validate_entry, HP_itemdb_validate_entry) },
	{ HP_POP(itemdb->readdb_additional_fields, HP_itemdb_readdb_additional_fields) },
	{ HP_POP(itemdb->readdb_job_sub, HP_itemdb_readdb_job_sub) },
	{ HP_POP(itemdb->readdb_libconfig_sub, HP_itemdb_readdb_libconfig_sub) },
	{ HP_POP(itemdb->readdb_libconfig, HP_itemdb_readdb_libconfig) },
	{ HP_POP(itemdb->unique_id, HP_itemdb_unique_id) },
	{ HP_POP(itemdb->read, HP_itemdb_read) },
	{ HP_POP(itemdb->destroy_item_data, HP_itemdb_destroy_item_data) },
	{ HP_POP(itemdb->final_sub, HP_itemdb_final_sub) },
	{ HP_POP(itemdb->clear, HP_itemdb_clear) },
	{ HP_POP(itemdb->id2combo, HP_itemdb_id2combo) },
	{ HP_POP(itemdb->is_item_usable, HP_itemdb_is_item_usable) },
	{ HP_POP(itemdb->lookup_const, HP_itemdb_lookup_const) },
/* libconfig_interface */
	{ HP_POP(libconfig->read, HP_libconfig_read) },
	{ HP_POP(libconfig->write, HP_libconfig_write) },
	{ HP_POP(libconfig->set_options, HP_libconfig_set_options) },
	{ HP_POP(libconfig->get_options, HP_libconfig_get_options) },
	{ HP_POP(libconfig->read_string, HP_libconfig_read_string) },
	{ HP_POP(libconfig->read_file_src, HP_libconfig_read_file_src) },
	{ HP_POP(libconfig->write_file, HP_libconfig_write_file) },
	{ HP_POP(libconfig->set_destructor, HP_libconfig_set_destructor) },
	{ HP_POP(libconfig->set_include_dir, HP_libconfig_set_include_dir) },
	{ HP_POP(libconfig->init, HP_libconfig_init) },
	{ HP_POP(libconfig->destroy, HP_libconfig_destroy) },
	{ HP_POP(libconfig->setting_get_int, HP_libconfig_setting_get_int) },
	{ HP_POP(libconfig->setting_get_int64, HP_libconfig_setting_get_int64) },
	{ HP_POP(libconfig->setting_get_float, HP_libconfig_setting_get_float) },
	{ HP_POP(libconfig->setting_get_bool, HP_libconfig_setting_get_bool) },
	{ HP_POP(libconfig->setting_get_string, HP_libconfig_setting_get_string) },
	{ HP_POP(libconfig->setting_lookup, HP_libconfig_setting_lookup) },
	{ HP_POP(libconfig->setting_lookup_int, HP_libconfig_setting_lookup_int) },
	{ HP_POP(libconfig->setting_lookup_int64, HP_libconfig_setting_lookup_int64) },
	{ HP_POP(libconfig->setting_lookup_float, HP_libconfig_setting_lookup_float) },
	{ HP_POP(libconfig->setting_lookup_bool, HP_libconfig_setting_lookup_bool) },
	{ HP_POP(libconfig->setting_lookup_string, HP_libconfig_setting_lookup_string) },
	{ HP_POP(libconfig->setting_set_int, HP_libconfig_setting_set_int) },
	{ HP_POP(libconfig->setting_set_int64, HP_libconfig_setting_set_int64) },
	{ HP_POP(libconfig->setting_set_float, HP_libconfig_setting_set_float) },
	{ HP_POP(libconfig->setting_set_bool, HP_libconfig_setting_set_bool) },
	{ HP_POP(libconfig->setting_set_string, HP_libconfig_setting_set_string) },
	{ HP_POP(libconfig->setting_set_format, HP_libconfig_setting_set_format) },
	{ HP_POP(libconfig->setting_get_format, HP_libconfig_setting_get_format) },
	{ HP_POP(libconfig->setting_get_int_elem, HP_libconfig_setting_get_int_elem) },
	{ HP_POP(libconfig->setting_get_int64_elem, HP_libconfig_setting_get_int64_elem) },
	{ HP_POP(libconfig->setting_get_float_elem, HP_libconfig_setting_get_float_elem) },
	{ HP_POP(libconfig->setting_get_bool_elem, HP_libconfig_setting_get_bool_elem) },
	{ HP_POP(libconfig->setting_get_string_elem, HP_libconfig_setting_get_string_elem) },
	{ HP_POP(libconfig->setting_set_int_elem, HP_libconfig_setting_set_int_elem) },
	{ HP_POP(libconfig->setting_set_int64_elem, HP_libconfig_setting_set_int64_elem) },
	{ HP_POP(libconfig->setting_set_float_elem, HP_libconfig_setting_set_float_elem) },
	{ HP_POP(libconfig->setting_set_bool_elem, HP_libconfig_setting_set_bool_elem) },
	{ HP_POP(libconfig->setting_set_string_elem, HP_libconfig_setting_set_string_elem) },
	{ HP_POP(libconfig->setting_index, HP_libconfig_setting_index) },
	{ HP_POP(libconfig->setting_length, HP_libconfig_setting_length) },
	{ HP_POP(libconfig->setting_get_elem, HP_libconfig_setting_get_elem) },
	{ HP_POP(libconfig->setting_get_member, HP_libconfig_setting_get_member) },
	{ HP_POP(libconfig->setting_add, HP_libconfig_setting_add) },
	{ HP_POP(libconfig->setting_remove, HP_libconfig_setting_remove) },
	{ HP_POP(libconfig->setting_remove_elem, HP_libconfig_setting_remove_elem) },
	{ HP_POP(libconfig->setting_set_hook, HP_libconfig_setting_set_hook) },
	{ HP_POP(libconfig->lookup, HP_libconfig_lookup) },
	{ HP_POP(libconfig->lookup_int, HP_libconfig_lookup_int) },
	{ HP_POP(libconfig->lookup_int64, HP_libconfig_lookup_int64) },
	{ HP_POP(libconfig->lookup_float, HP_libconfig_lookup_float) },
	{ HP_POP(libconfig->lookup_bool, HP_libconfig_lookup_bool) },
	{ HP_POP(libconfig->lookup_string, HP_libconfig_lookup_string) },
	{ HP_POP(libconfig->load_file, HP_libconfig_load_file) },
	{ HP_POP(libconfig->setting_copy_simple, HP_libconfig_setting_copy_simple) },
	{ HP_POP(libconfig->setting_copy_elem, HP_libconfig_setting_copy_elem) },
	{ HP_POP(libconfig->setting_copy_aggregate, HP_libconfig_setting_copy_aggregate) },
	{ HP_POP(libconfig->setting_copy, HP_libconfig_setting_copy) },
	{ HP_POP(libconfig->setting_get_bool_real, HP_libconfig_setting_get_bool_real) },
	{ HP_POP(libconfig->setting_get_uint32, HP_libconfig_setting_get_uint32) },
	{ HP_POP(libconfig->setting_get_uint16, HP_libconfig_setting_get_uint16) },
	{ HP_POP(libconfig->setting_get_int16, HP_libconfig_setting_get_int16) },
	{ HP_POP(libconfig->setting_lookup_bool_real, HP_libconfig_setting_lookup_bool_real) },
	{ HP_POP(libconfig->setting_lookup_uint32, HP_libconfig_setting_lookup_uint32) },
	{ HP_POP(libconfig->setting_lookup_uint16, HP_libconfig_setting_lookup_uint16) },
	{ HP_POP(libconfig->setting_lookup_int16, HP_libconfig_setting_lookup_int16) },
	{ HP_POP(libconfig->setting_lookup_mutable_string, HP_libconfig_setting_lookup_mutable_string) },
	{ HP_POP(libconfig->lookup_mutable_string, HP_libconfig_lookup_mutable_string) },
/* log_interface */
	{ HP_POP(logs->pick_pc, HP_logs_pick_pc) },
	{ HP_POP(logs->pick_mob, HP_logs_pick_mob) },
	{ HP_POP(logs->zeny, HP_logs_zeny) },
	{ HP_POP(logs->npc, HP_logs_npc) },
	{ HP_POP(logs->chat, HP_logs_chat) },
	{ HP_POP(logs->atcommand, HP_logs_atcommand) },
	{ HP_POP(logs->branch, HP_logs_branch) },
	{ HP_POP(logs->mvpdrop, HP_logs_mvpdrop) },
	{ HP_POP(logs->pick_sub, HP_logs_pick_sub) },
	{ HP_POP(logs->zeny_sub, HP_logs_zeny_sub) },
	{ HP_POP(logs->npc_sub, HP_logs_npc_sub) },
	{ HP_POP(logs->chat_sub, HP_logs_chat_sub) },
	{ HP_POP(logs->atcommand_sub, HP_logs_atcommand_sub) },
	{ HP_POP(logs->branch_sub, HP_logs_branch_sub) },
	{ HP_POP(logs->mvpdrop_sub, HP_logs_mvpdrop_sub) },
	{ HP_POP(logs->config_read, HP_logs_config_read) },
	{ HP_POP(logs->config_done, HP_logs_config_done) },
	{ HP_POP(logs->sql_init, HP_logs_sql_init) },
	{ HP_POP(logs->sql_final, HP_logs_sql_final) },
	{ HP_POP(logs->picktype2char, HP_logs_picktype2char) },
	{ HP_POP(logs->chattype2char, HP_logs_chattype2char) },
	{ HP_POP(logs->should_log_item, HP_logs_should_log_item) },
/* mail_interface */
	{ HP_POP(mail->clear, HP_mail_clear) },
	{ HP_POP(mail->removeitem, HP_mail_removeitem) },
	{ HP_POP(mail->removezeny, HP_mail_removezeny) },
	{ HP_POP(mail->setitem, HP_mail_setitem) },
	{ HP_POP(mail->setattachment, HP_mail_setattachment) },
	{ HP_POP(mail->getattachment, HP_mail_getattachment) },
	{ HP_POP(mail->openmail, HP_mail_openmail) },
	{ HP_POP(mail->deliveryfail, HP_mail_deliveryfail) },
	{ HP_POP(mail->invalid_operation, HP_mail_invalid_operation) },
/* malloc_interface */
	{ HP_POP(iMalloc->init, HP_iMalloc_init) },
	{ HP_POP(iMalloc->final, HP_iMalloc_final) },
	{ HP_POP(iMalloc->malloc, HP_iMalloc_malloc) },
	{ HP_POP(iMalloc->calloc, HP_iMalloc_calloc) },
	{ HP_POP(iMalloc->realloc, HP_iMalloc_realloc) },
	{ HP_POP(iMalloc->reallocz, HP_iMalloc_reallocz) },
	{ HP_POP(iMalloc->astrdup, HP_iMalloc_astrdup) },
	{ HP_POP(iMalloc->astrndup, HP_iMalloc_astrndup) },
	{ HP_POP(iMalloc->free, HP_iMalloc_free) },
	{ HP_POP(iMalloc->memory_check, HP_iMalloc_memory_check) },
	{ HP_POP(iMalloc->verify_ptr, HP_iMalloc_verify_ptr) },
	{ HP_POP(iMalloc->usage, HP_iMalloc_usage) },
	{ HP_POP(iMalloc->post_shutdown, HP_iMalloc_post_shutdown) },
	{ HP_POP(iMalloc->init_messages, HP_iMalloc_init_messages) },
/* map_interface */
	{ HP_POP(map->zone_init, HP_map_zone_init) },
	{ HP_POP(map->zone_remove, HP_map_zone_remove) },
	{ HP_POP(map->zone_apply, HP_map_zone_apply) },
	{ HP_POP(map->zone_change, HP_map_zone_change) },
	{ HP_POP(map->zone_change2, HP_map_zone_change2) },
	{ HP_POP(map->getcell, HP_map_getcell) },
	{ HP_POP(map->setgatcell, HP_map_setgatcell) },
	{ HP_POP(map->cellfromcache, HP_map_cellfromcache) },
	{ HP_POP(map->setusers, HP_map_setusers) },
	{ HP_POP(map->getusers, HP_map_getusers) },
	{ HP_POP(map->usercount, HP_map_usercount) },
	{ HP_POP(map->freeblock, HP_map_freeblock) },
	{ HP_POP(map->freeblock_lock, HP_map_freeblock_lock) },
	{ HP_POP(map->freeblock_unlock, HP_map_freeblock_unlock) },
	{ HP_POP(map->addblock, HP_map_addblock) },
	{ HP_POP(map->delblock, HP_map_delblock) },
	{ HP_POP(map->moveblock, HP_map_moveblock) },
	{ HP_POP(map->count_oncell, HP_map_count_oncell) },
	{ HP_POP(map->find_skill_unit_oncell, HP_map_find_skill_unit_oncell) },
	{ HP_POP(map->get_new_object_id, HP_map_get_new_object_id) },
	{ HP_POP(map->search_freecell, HP_map_search_freecell) },
	{ HP_POP(map->closest_freecell, HP_map_closest_freecell) },
	{ HP_POP(map->quit, HP_map_quit) },
	{ HP_POP(map->addnpc, HP_map_addnpc) },
	{ HP_POP(map->clearflooritem_timer, HP_map_clearflooritem_timer) },
	{ HP_POP(map->removemobs_timer, HP_map_removemobs_timer) },
	{ HP_POP(map->clearflooritem, HP_map_clearflooritem) },
	{ HP_POP(map->addflooritem, HP_map_addflooritem) },
	{ HP_POP(map->addnickdb, HP_map_addnickdb) },
	{ HP_POP(map->delnickdb, HP_map_delnickdb) },
	{ HP_POP(map->reqnickdb, HP_map_reqnickdb) },
	{ HP_POP(map->charid2nick, HP_map_charid2nick) },
	{ HP_POP(map->charid2sd, HP_map_charid2sd) },
	{ HP_POP(map->vforeachpc, HP_map_vforeachpc) },
	{ HP_POP(map->vforeachmob, HP_map_vforeachmob) },
	{ HP_POP(map->vforeachnpc, HP_map_vforeachnpc) },
	{ HP_POP(map->vforeachregen, HP_map_vforeachregen) },
	{ HP_POP(map->vforeachiddb, HP_map_vforeachiddb) },
	{ HP_POP(map->vforeachinrange, HP_map_vforeachinrange) },
	{ HP_POP(map->vforeachinshootrange, HP_map_vforeachinshootrange) },
	{ HP_POP(map->vforeachinarea, HP_map_vforeachinarea) },
	{ HP_POP(map->vforcountinrange, HP_map_vforcountinrange) },
	{ HP_POP(map->vforcountinarea, HP_map_vforcountinarea) },
	{ HP_POP(map->vforeachinmovearea, HP_map_vforeachinmovearea) },
	{ HP_POP(map->vforeachincell, HP_map_vforeachincell) },
	{ HP_POP(map->vforeachinpath, HP_map_vforeachinpath) },
	{ HP_POP(map->vforeachinmap, HP_map_vforeachinmap) },
	{ HP_POP(map->vforeachininstance, HP_map_vforeachininstance) },
	{ HP_POP(map->id2sd, HP_map_id2sd) },
	{ HP_POP(map->id2nd, HP_map_id2nd) },
	{ HP_POP(map->id2md, HP_map_id2md) },
	{ HP_POP(map->id2fi, HP_map_id2fi) },
	{ HP_POP(map->id2cd, HP_map_id2cd) },
	{ HP_POP(map->id2su, HP_map_id2su) },
	{ HP_POP(map->id2pd, HP_map_id2pd) },
	{ HP_POP(map->id2hd, HP_map_id2hd) },
	{ HP_POP(map->id2mc, HP_map_id2mc) },
	{ HP_POP(map->id2ed, HP_map_id2ed) },
	{ HP_POP(map->id2bl, HP_map_id2bl) },
	{ HP_POP(map->blid_exists, HP_map_blid_exists) },
	{ HP_POP(map->mapindex2mapid, HP_map_mapindex2mapid) },
	{ HP_POP(map->mapname2mapid, HP_map_mapname2mapid) },
	{ HP_POP(map->mapname2ipport, HP_map_mapname2ipport) },
	{ HP_POP(map->setipport, HP_map_setipport) },
	{ HP_POP(map->eraseipport, HP_map_eraseipport) },
	{ HP_POP(map->eraseallipport, HP_map_eraseallipport) },
	{ HP_POP(map->addiddb, HP_map_addiddb) },
	{ HP_POP(map->deliddb, HP_map_deliddb) },
	{ HP_POP(map->nick2sd, HP_map_nick2sd) },
	{ HP_POP(map->getmob_boss, HP_map_getmob_boss) },
	{ HP_POP(map->id2boss, HP_map_id2boss) },
	{ HP_POP(map->race_id2mask, HP_map_race_id2mask) },
	{ HP_POP(map->reloadnpc, HP_map_reloadnpc) },
	{ HP_POP(map->check_dir, HP_map_check_dir) },
	{ HP_POP(map->calc_dir, HP_map_calc_dir) },
	{ HP_POP(map->random_dir, HP_map_random_dir) },
	{ HP_POP(map->cleanup_sub, HP_map_cleanup_sub) },
	{ HP_POP(map->delmap, HP_map_delmap) },
	{ HP_POP(map->flags_init, HP_map_flags_init) },
	{ HP_POP(map->iwall_set, HP_map_iwall_set) },
	{ HP_POP(map->iwall_get, HP_map_iwall_get) },
	{ HP_POP(map->iwall_remove, HP_map_iwall_remove) },
	{ HP_POP(map->addmobtolist, HP_map_addmobtolist) },
	{ HP_POP(map->spawnmobs, HP_map_spawnmobs) },
	{ HP_POP(map->removemobs, HP_map_removemobs) },
	{ HP_POP(map->addmap2db, HP_map_addmap2db) },
	{ HP_POP(map->removemapdb, HP_map_removemapdb) },
	{ HP_POP(map->clean, HP_map_clean) },
	{ HP_POP(map->do_shutdown, HP_map_do_shutdown) },
	{ HP_POP(map->freeblock_timer, HP_map_freeblock_timer) },
	{ HP_POP(map->searchrandfreecell, HP_map_searchrandfreecell) },
	{ HP_POP(map->count_sub, HP_map_count_sub) },
	{ HP_POP(map->create_charid2nick, HP_map_create_charid2nick) },
	{ HP_POP(map->removemobs_sub, HP_map_removemobs_sub) },
	{ HP_POP(map->gat2cell, HP_map_gat2cell) },
	{ HP_POP(map->cell2gat, HP_map_cell2gat) },
	{ HP_POP(map->getcellp, HP_map_getcellp) },
	{ HP_POP(map->setcell, HP_map_setcell) },
	{ HP_POP(map->sub_getcellp, HP_map_sub_getcellp) },
	{ HP_POP(map->sub_setcell, HP_map_sub_setcell) },
	{ HP_POP(map->iwall_nextxy, HP_map_iwall_nextxy) },
	{ HP_POP(map->create_map_data_other_server, HP_map_create_map_data_other_server) },
	{ HP_POP(map->eraseallipport_sub, HP_map_eraseallipport_sub) },
	{ HP_POP(map->init_mapcache, HP_map_init_mapcache) },
	{ HP_POP(map->readfromcache, HP_map_readfromcache) },
	{ HP_POP(map->addmap, HP_map_addmap) },
	{ HP_POP(map->delmapid, HP_map_delmapid) },
	{ HP_POP(map->zone_db_clear, HP_map_zone_db_clear) },
	{ HP_POP(map->list_final, HP_map_list_final) },
	{ HP_POP(map->waterheight, HP_map_waterheight) },
	{ HP_POP(map->readgat, HP_map_readgat) },
	{ HP_POP(map->readallmaps, HP_map_readallmaps) },
	{ HP_POP(map->config_read, HP_map_config_read) },
	{ HP_POP(map->config_read_sub, HP_map_config_read_sub) },
	{ HP_POP(map->reloadnpc_sub, HP_map_reloadnpc_sub) },
	{ HP_POP(map->inter_config_read, HP_map_inter_config_read) },
	{ HP_POP(map->inter_config_read_database_names, HP_map_inter_config_read_database_names) },
	{ HP_POP(map->inter_config_read_connection, HP_map_inter_config_read_connection) },
	{ HP_POP(map->sql_init, HP_map_sql_init) },
	{ HP_POP(map->sql_close, HP_map_sql_close) },
	{ HP_POP(map->zone_mf_cache, HP_map_zone_mf_cache) },
	{ HP_POP(map->zone_str2itemid, HP_map_zone_str2itemid) },
	{ HP_POP(map->zone_str2skillid, HP_map_zone_str2skillid) },
	{ HP_POP(map->zone_bl_type, HP_map_zone_bl_type) },
	{ HP_POP(map->read_zone_db, HP_map_read_zone_db) },
	{ HP_POP(map->db_final, HP_map_db_final) },
	{ HP_POP(map->nick_db_final, HP_map_nick_db_final) },
	{ HP_POP(map->cleanup_db_sub, HP_map_cleanup_db_sub) },
	{ HP_POP(map->abort_sub, HP_map_abort_sub) },
	{ HP_POP(map->update_cell_bl, HP_map_update_cell_bl) },
	{ HP_POP(map->get_new_bonus_id, HP_map_get_new_bonus_id) },
	{ HP_POP(map->add_questinfo, HP_map_add_questinfo) },
	{ HP_POP(map->remove_questinfo, HP_map_remove_questinfo) },
	{ HP_POP(map->merge_zone, HP_map_merge_zone) },
	{ HP_POP(map->zone_clear_single, HP_map_zone_clear_single) },
/* mapindex_interface */
	{ HP_POP(mapindex->init, HP_mapindex_init) },
	{ HP_POP(mapindex->final, HP_mapindex_final) },
	{ HP_POP(mapindex->addmap, HP_mapindex_addmap) },
	{ HP_POP(mapindex->removemap, HP_mapindex_removemap) },
	{ HP_POP(mapindex->getmapname, HP_mapindex_getmapname) },
	{ HP_POP(mapindex->getmapname_ext, HP_mapindex_getmapname_ext) },
	{ HP_POP(mapindex->name2id, HP_mapindex_name2id) },
	{ HP_POP(mapindex->id2name, HP_mapindex_id2name) },
	{ HP_POP(mapindex->check_default, HP_mapindex_check_default) },
/* mapit_interface */
	{ HP_POP(mapit->alloc, HP_mapit_alloc) },
	{ HP_POP(mapit->free, HP_mapit_free) },
	{ HP_POP(mapit->first, HP_mapit_first) },
	{ HP_POP(mapit->last, HP_mapit_last) },
	{ HP_POP(mapit->next, HP_mapit_next) },
	{ HP_POP(mapit->prev, HP_mapit_prev) },
	{ HP_POP(mapit->exists, HP_mapit_exists) },
/* mapreg_interface */
	{ HP_POP(mapreg->init, HP_mapreg_init) },
	{ HP_POP(mapreg->final, HP_mapreg_final) },
	{ HP_POP(mapreg->readreg, HP_mapreg_readreg) },
	{ HP_POP(mapreg->readregstr, HP_mapreg_readregstr) },
	{ HP_POP(mapreg->setreg, HP_mapreg_setreg) },
	{ HP_POP(mapreg->setregstr, HP_mapreg_setregstr) },
	{ HP_POP(mapreg->load, HP_mapreg_load) },
	{ HP_POP(mapreg->save, HP_mapreg_save) },
	{ HP_POP(mapreg->save_timer, HP_mapreg_save_timer) },
	{ HP_POP(mapreg->destroyreg, HP_mapreg_destroyreg) },
	{ HP_POP(mapreg->reload, HP_mapreg_reload) },
	{ HP_POP(mapreg->config_read, HP_mapreg_config_read) },
/* md5_interface */
	{ HP_POP(md5->string, HP_md5_string) },
	{ HP_POP(md5->binary, HP_md5_binary) },
	{ HP_POP(md5->salt, HP_md5_salt) },
/* mercenary_interface */
	{ HP_POP(mercenary->init, HP_mercenary_init) },
	{ HP_POP(mercenary->class, HP_mercenary_class) },
	{ HP_POP(mercenary->get_viewdata, HP_mercenary_get_viewdata) },
	{ HP_POP(mercenary->create, HP_mercenary_create) },
	{ HP_POP(mercenary->data_received, HP_mercenary_data_received) },
	{ HP_POP(mercenary->save, HP_mercenary_save) },
	{ HP_POP(mercenary->heal, HP_mercenary_heal) },
	{ HP_POP(mercenary->dead, HP_mercenary_dead) },
	{ HP_POP(mercenary->delete, HP_mercenary_delete) },
	{ HP_POP(mercenary->contract_stop, HP_mercenary_contract_stop) },
	{ HP_POP(mercenary->get_lifetime, HP_mercenary_get_lifetime) },
	{ HP_POP(mercenary->get_guild, HP_mercenary_get_guild) },
	{ HP_POP(mercenary->get_faith, HP_mercenary_get_faith) },
	{ HP_POP(mercenary->set_faith, HP_mercenary_set_faith) },
	{ HP_POP(mercenary->get_calls, HP_mercenary_get_calls) },
	{ HP_POP(mercenary->set_calls, HP_mercenary_set_calls) },
	{ HP_POP(mercenary->kills, HP_mercenary_kills) },
	{ HP_POP(mercenary->checkskill, HP_mercenary_checkskill) },
	{ HP_POP(mercenary->read_db, HP_mercenary_read_db) },
	{ HP_POP(mercenary->read_skilldb, HP_mercenary_read_skilldb) },
	{ HP_POP(mercenary->killbonus, HP_mercenary_killbonus) },
	{ HP_POP(mercenary->search_index, HP_mercenary_search_index) },
	{ HP_POP(mercenary->contract_end_timer, HP_mercenary_contract_end_timer) },
	{ HP_POP(mercenary->read_db_sub, HP_mercenary_read_db_sub) },
	{ HP_POP(mercenary->read_skill_db_sub, HP_mercenary_read_skill_db_sub) },
/* mob_interface */
	{ HP_POP(mob->init, HP_mob_init) },
	{ HP_POP(mob->final, HP_mob_final) },
	{ HP_POP(mob->reload, HP_mob_reload) },
	{ HP_POP(mob->db, HP_mob_db) },
	{ HP_POP(mob->chat, HP_mob_chat) },
	{ HP_POP(mob->makedummymobdb, HP_mob_makedummymobdb) },
	{ HP_POP(mob->spawn_guardian_sub, HP_mob_spawn_guardian_sub) },
	{ HP_POP(mob->skill_id2skill_idx, HP_mob_skill_id2skill_idx) },
	{ HP_POP(mob->db_searchname, HP_mob_db_searchname) },
	{ HP_POP(mob->db_searchname_array_sub, HP_mob_db_searchname_array_sub) },
	{ HP_POP(mob->mvptomb_create, HP_mob_mvptomb_create) },
	{ HP_POP(mob->mvptomb_destroy, HP_mob_mvptomb_destroy) },
	{ HP_POP(mob->db_searchname_array, HP_mob_db_searchname_array) },
	{ HP_POP(mob->db_checkid, HP_mob_db_checkid) },
	{ HP_POP(mob->get_viewdata, HP_mob_get_viewdata) },
	{ HP_POP(mob->parse_dataset, HP_mob_parse_dataset) },
	{ HP_POP(mob->spawn_dataset, HP_mob_spawn_dataset) },
	{ HP_POP(mob->get_random_id, HP_mob_get_random_id) },
	{ HP_POP(mob->ksprotected, HP_mob_ksprotected) },
	{ HP_POP(mob->once_spawn_sub, HP_mob_once_spawn_sub) },
	{ HP_POP(mob->once_spawn, HP_mob_once_spawn) },
	{ HP_POP(mob->once_spawn_area, HP_mob_once_spawn_area) },
	{ HP_POP(mob->spawn_guardian, HP_mob_spawn_guardian) },
	{ HP_POP(mob->spawn_bg, HP_mob_spawn_bg) },
	{ HP_POP(mob->can_reach, HP_mob_can_reach) },
	{ HP_POP(mob->linksearch, HP_mob_linksearch) },
	{ HP_POP(mob->delayspawn, HP_mob_delayspawn) },
	{ HP_POP(mob->setdelayspawn, HP_mob_setdelayspawn) },
	{ HP_POP(mob->count_sub, HP_mob_count_sub) },
	{ HP_POP(mob->spawn, HP_mob_spawn) },
	{ HP_POP(mob->can_changetarget, HP_mob_can_changetarget) },
	{ HP_POP(mob->target, HP_mob_target) },
	{ HP_POP(mob->ai_sub_hard_activesearch, HP_mob_ai_sub_hard_activesearch) },
	{ HP_POP(mob->ai_sub_hard_changechase, HP_mob_ai_sub_hard_changechase) },
	{ HP_POP(mob->ai_sub_hard_bg_ally, HP_mob_ai_sub_hard_bg_ally) },
	{ HP_POP(mob->ai_sub_hard_lootsearch, HP_mob_ai_sub_hard_lootsearch) },
	{ HP_POP(mob->warpchase_sub, HP_mob_warpchase_sub) },
	{ HP_POP(mob->ai_sub_hard_slavemob, HP_mob_ai_sub_hard_slavemob) },
	{ HP_POP(mob->unlocktarget, HP_mob_unlocktarget) },
	{ HP_POP(mob->randomwalk, HP_mob_randomwalk) },
	{ HP_POP(mob->warpchase, HP_mob_warpchase) },
	{ HP_POP(mob->ai_sub_hard, HP_mob_ai_sub_hard) },
	{ HP_POP(mob->ai_sub_hard_timer, HP_mob_ai_sub_hard_timer) },
	{ HP_POP(mob->ai_sub_foreachclient, HP_mob_ai_sub_foreachclient) },
	{ HP_POP(mob->ai_sub_lazy, HP_mob_ai_sub_lazy) },
	{ HP_POP(mob->ai_lazy, HP_mob_ai_lazy) },
	{ HP_POP(mob->ai_hard, HP_mob_ai_hard) },
	{ HP_POP(mob->setdropitem, HP_mob_setdropitem) },
	{ HP_POP(mob->setlootitem, HP_mob_setlootitem) },
	{ HP_POP(mob->delay_item_drop, HP_mob_delay_item_drop) },
	{ HP_POP(mob->item_drop, HP_mob_item_drop) },
	{ HP_POP(mob->timer_delete, HP_mob_timer_delete) },
	{ HP_POP(mob->deleteslave_sub, HP_mob_deleteslave_sub) },
	{ HP_POP(mob->deleteslave, HP_mob_deleteslave) },
	{ HP_POP(mob->respawn, HP_mob_respawn) },
	{ HP_POP(mob->log_damage, HP_mob_log_damage) },
	{ HP_POP(mob->damage, HP_mob_damage) },
	{ HP_POP(mob->dead, HP_mob_dead) },
	{ HP_POP(mob->revive, HP_mob_revive) },
	{ HP_POP(mob->guardian_guildchange, HP_mob_guardian_guildchange) },
	{ HP_POP(mob->random_class, HP_mob_random_class) },
	{ HP_POP(mob->class_change, HP_mob_class_change) },
	{ HP_POP(mob->heal, HP_mob_heal) },
	{ HP_POP(mob->warpslave_sub, HP_mob_warpslave_sub) },
	{ HP_POP(mob->warpslave, HP_mob_warpslave) },
	{ HP_POP(mob->countslave_sub, HP_mob_countslave_sub) },
	{ HP_POP(mob->countslave, HP_mob_countslave) },
	{ HP_POP(mob->summonslave, HP_mob_summonslave) },
	{ HP_POP(mob->getfriendhprate_sub, HP_mob_getfriendhprate_sub) },
	{ HP_POP(mob->getfriendhprate, HP_mob_getfriendhprate) },
	{ HP_POP(mob->getmasterhpltmaxrate, HP_mob_getmasterhpltmaxrate) },
	{ HP_POP(mob->getfriendstatus_sub, HP_mob_getfriendstatus_sub) },
	{ HP_POP(mob->getfriendstatus, HP_mob_getfriendstatus) },
	{ HP_POP(mob->skill_use, HP_mob_skill_use) },
	{ HP_POP(mob->skill_event, HP_mob_skill_event) },
	{ HP_POP(mob->is_clone, HP_mob_is_clone) },
	{ HP_POP(mob->clone_spawn, HP_mob_clone_spawn) },
	{ HP_POP(mob->clone_delete, HP_mob_clone_delete) },
	{ HP_POP(mob->drop_adjust, HP_mob_drop_adjust) },
	{ HP_POP(mob->item_dropratio_adjust, HP_mob_item_dropratio_adjust) },
	{ HP_POP(mob->readdb, HP_mob_readdb) },
	{ HP_POP(mob->lookup_const, HP_mob_lookup_const) },
	{ HP_POP(mob->get_const, HP_mob_get_const) },
	{ HP_POP(mob->db_validate_entry, HP_mob_db_validate_entry) },
	{ HP_POP(mob->read_libconfig, HP_mob_read_libconfig) },
	{ HP_POP(mob->read_db_additional_fields, HP_mob_read_db_additional_fields) },
	{ HP_POP(mob->read_db_sub, HP_mob_read_db_sub) },
	{ HP_POP(mob->read_db_drops_sub, HP_mob_read_db_drops_sub) },
	{ HP_POP(mob->read_db_mvpdrops_sub, HP_mob_read_db_mvpdrops_sub) },
	{ HP_POP(mob->read_db_mode_sub, HP_mob_read_db_mode_sub) },
	{ HP_POP(mob->read_db_stats_sub, HP_mob_read_db_stats_sub) },
	{ HP_POP(mob->name_constants, HP_mob_name_constants) },
	{ HP_POP(mob->readdb_mobavail, HP_mob_readdb_mobavail) },
	{ HP_POP(mob->read_randommonster, HP_mob_read_randommonster) },
	{ HP_POP(mob->parse_row_chatdb, HP_mob_parse_row_chatdb) },
	{ HP_POP(mob->readchatdb, HP_mob_readchatdb) },
	{ HP_POP(mob->parse_row_mobskilldb, HP_mob_parse_row_mobskilldb) },
	{ HP_POP(mob->readskilldb, HP_mob_readskilldb) },
	{ HP_POP(mob->readdb_race2, HP_mob_readdb_race2) },
	{ HP_POP(mob->readdb_itemratio, HP_mob_readdb_itemratio) },
	{ HP_POP(mob->load, HP_mob_load) },
	{ HP_POP(mob->clear_spawninfo, HP_mob_clear_spawninfo) },
	{ HP_POP(mob->destroy_mob_db, HP_mob_destroy_mob_db) },
/* mutex_interface */
	{ HP_POP(mutex->create, HP_mutex_create) },
	{ HP_POP(mutex->destroy, HP_mutex_destroy) },
	{ HP_POP(mutex->lock, HP_mutex_lock) },
	{ HP_POP(mutex->trylock, HP_mutex_trylock) },
	{ HP_POP(mutex->unlock, HP_mutex_unlock) },
	{ HP_POP(mutex->cond_create, HP_mutex_cond_create) },
	{ HP_POP(mutex->cond_destroy, HP_mutex_cond_destroy) },
	{ HP_POP(mutex->cond_wait, HP_mutex_cond_wait) },
	{ HP_POP(mutex->cond_signal, HP_mutex_cond_signal) },
	{ HP_POP(mutex->cond_broadcast, HP_mutex_cond_broadcast) },
/* npc_chat_interface */
	{ HP_POP(npc_chat->sub, HP_npc_chat_sub) },
	{ HP_POP(npc_chat->finalize, HP_npc_chat_finalize) },
	{ HP_POP(npc_chat->def_pattern, HP_npc_chat_def_pattern) },
	{ HP_POP(npc_chat->create_pcrematch_entry, HP_npc_chat_create_pcrematch_entry) },
	{ HP_POP(npc_chat->delete_pcreset, HP_npc_chat_delete_pcreset) },
	{ HP_POP(npc_chat->deactivate_pcreset, HP_npc_chat_deactivate_pcreset) },
	{ HP_POP(npc_chat->activate_pcreset, HP_npc_chat_activate_pcreset) },
	{ HP_POP(npc_chat->lookup_pcreset, HP_npc_chat_lookup_pcreset) },
	{ HP_POP(npc_chat->finalize_pcrematch_entry, HP_npc_chat_finalize_pcrematch_entry) },
/* npc_interface */
	{ HP_POP(npc->init, HP_npc_init) },
	{ HP_POP(npc->final, HP_npc_final) },
	{ HP_POP(npc->get_new_npc_id, HP_npc_get_new_npc_id) },
	{ HP_POP(npc->get_viewdata, HP_npc_get_viewdata) },
	{ HP_POP(npc->isnear_sub, HP_npc_isnear_sub) },
	{ HP_POP(npc->isnear, HP_npc_isnear) },
	{ HP_POP(npc->ontouch_event, HP_npc_ontouch_event) },
	{ HP_POP(npc->ontouch2_event, HP_npc_ontouch2_event) },
	{ HP_POP(npc->onuntouch_event, HP_npc_onuntouch_event) },
	{ HP_POP(npc->enable_sub, HP_npc_enable_sub) },
	{ HP_POP(npc->enable, HP_npc_enable) },
	{ HP_POP(npc->name2id, HP_npc_name2id) },
	{ HP_POP(npc->event_dequeue, HP_npc_event_dequeue) },
	{ HP_POP(npc->event_export_create, HP_npc_event_export_create) },
	{ HP_POP(npc->event_export, HP_npc_event_export) },
	{ HP_POP(npc->event_sub, HP_npc_event_sub) },
	{ HP_POP(npc->event_doall_sub, HP_npc_event_doall_sub) },
	{ HP_POP(npc->event_do, HP_npc_event_do) },
	{ HP_POP(npc->event_doall_id, HP_npc_event_doall_id) },
	{ HP_POP(npc->event_doall, HP_npc_event_doall) },
	{ HP_POP(npc->event_do_clock, HP_npc_event_do_clock) },
	{ HP_POP(npc->event_do_oninit, HP_npc_event_do_oninit) },
	{ HP_POP(npc->timerevent_export, HP_npc_timerevent_export) },
	{ HP_POP(npc->timerevent, HP_npc_timerevent) },
	{ HP_POP(npc->timerevent_start, HP_npc_timerevent_start) },
	{ HP_POP(npc->timerevent_stop, HP_npc_timerevent_stop) },
	{ HP_POP(npc->timerevent_quit, HP_npc_timerevent_quit) },
	{ HP_POP(npc->gettimerevent_tick, HP_npc_gettimerevent_tick) },
	{ HP_POP(npc->settimerevent_tick, HP_npc_settimerevent_tick) },
	{ HP_POP(npc->event, HP_npc_event) },
	{ HP_POP(npc->touch_areanpc_sub, HP_npc_touch_areanpc_sub) },
	{ HP_POP(npc->touchnext_areanpc, HP_npc_touchnext_areanpc) },
	{ HP_POP(npc->touch_areanpc, HP_npc_touch_areanpc) },
	{ HP_POP(npc->untouch_areanpc, HP_npc_untouch_areanpc) },
	{ HP_POP(npc->touch_areanpc2, HP_npc_touch_areanpc2) },
	{ HP_POP(npc->check_areanpc, HP_npc_check_areanpc) },
	{ HP_POP(npc->checknear, HP_npc_checknear) },
	{ HP_POP(npc->globalmessage, HP_npc_globalmessage) },
	{ HP_POP(npc->run_tomb, HP_npc_run_tomb) },
	{ HP_POP(npc->click, HP_npc_click) },
	{ HP_POP(npc->scriptcont, HP_npc_scriptcont) },
	{ HP_POP(npc->buysellsel, HP_npc_buysellsel) },
	{ HP_POP(npc->cashshop_buylist, HP_npc_cashshop_buylist) },
	{ HP_POP(npc->buylist_sub, HP_npc_buylist_sub) },
	{ HP_POP(npc->cashshop_buy, HP_npc_cashshop_buy) },
	{ HP_POP(npc->buylist, HP_npc_buylist) },
	{ HP_POP(npc->selllist_sub, HP_npc_selllist_sub) },
	{ HP_POP(npc->selllist, HP_npc_selllist) },
	{ HP_POP(npc->remove_map, HP_npc_remove_map) },
	{ HP_POP(npc->unload_ev, HP_npc_unload_ev) },
	{ HP_POP(npc->unload_ev_label, HP_npc_unload_ev_label) },
	{ HP_POP(npc->unload_dup_sub, HP_npc_unload_dup_sub) },
	{ HP_POP(npc->unload_duplicates, HP_npc_unload_duplicates) },
	{ HP_POP(npc->unload, HP_npc_unload) },
	{ HP_POP(npc->clearsrcfile, HP_npc_clearsrcfile) },
	{ HP_POP(npc->addsrcfile, HP_npc_addsrcfile) },
	{ HP_POP(npc->delsrcfile, HP_npc_delsrcfile) },
	{ HP_POP(npc->retainpathreference, HP_npc_retainpathreference) },
	{ HP_POP(npc->releasepathreference, HP_npc_releasepathreference) },
	{ HP_POP(npc->parsename, HP_npc_parsename) },
	{ HP_POP(npc->parseview, HP_npc_parseview) },
	{ HP_POP(npc->viewisid, HP_npc_viewisid) },
	{ HP_POP(npc->create_npc, HP_npc_create_npc) },
	{ HP_POP(npc->add_warp, HP_npc_add_warp) },
	{ HP_POP(npc->parse_warp, HP_npc_parse_warp) },
	{ HP_POP(npc->parse_shop, HP_npc_parse_shop) },
	{ HP_POP(npc->parse_unknown_object, HP_npc_parse_unknown_object) },
	{ HP_POP(npc->convertlabel_db, HP_npc_convertlabel_db) },
	{ HP_POP(npc->skip_script, HP_npc_skip_script) },
	{ HP_POP(npc->parse_script, HP_npc_parse_script) },
	{ HP_POP(npc->add_to_location, HP_npc_add_to_location) },
	{ HP_POP(npc->duplicate_script_sub, HP_npc_duplicate_script_sub) },
	{ HP_POP(npc->duplicate_shop_sub, HP_npc_duplicate_shop_sub) },
	{ HP_POP(npc->duplicate_warp_sub, HP_npc_duplicate_warp_sub) },
	{ HP_POP(npc->duplicate_sub, HP_npc_duplicate_sub) },
	{ HP_POP(npc->parse_duplicate, HP_npc_parse_duplicate) },
	{ HP_POP(npc->duplicate4instance, HP_npc_duplicate4instance) },
	{ HP_POP(npc->setcells, HP_npc_setcells) },
	{ HP_POP(npc->unsetcells_sub, HP_npc_unsetcells_sub) },
	{ HP_POP(npc->unsetcells, HP_npc_unsetcells) },
	{ HP_POP(npc->movenpc, HP_npc_movenpc) },
	{ HP_POP(npc->setdisplayname, HP_npc_setdisplayname) },
	{ HP_POP(npc->setclass, HP_npc_setclass) },
	{ HP_POP(npc->do_atcmd_event, HP_npc_do_atcmd_event) },
	{ HP_POP(npc->parse_function, HP_npc_parse_function) },
	{ HP_POP(npc->parse_mob2, HP_npc_parse_mob2) },
	{ HP_POP(npc->parse_mob, HP_npc_parse_mob) },
	{ HP_POP(npc->parse_mapflag, HP_npc_parse_mapflag) },
	{ HP_POP(npc->parse_unknown_mapflag, HP_npc_parse_unknown_mapflag) },
	{ HP_POP(npc->parsesrcfile, HP_npc_parsesrcfile) },
	{ HP_POP(npc->script_event, HP_npc_script_event) },
	{ HP_POP(npc->read_event_script, HP_npc_read_event_script) },
	{ HP_POP(npc->path_db_clear_sub, HP_npc_path_db_clear_sub) },
	{ HP_POP(npc->ev_label_db_clear_sub, HP_npc_ev_label_db_clear_sub) },
	{ HP_POP(npc->reload, HP_npc_reload) },
	{ HP_POP(npc->unloadfile, HP_npc_unloadfile) },
	{ HP_POP(npc->do_clear_npc, HP_npc_do_clear_npc) },
	{ HP_POP(npc->debug_warps_sub, HP_npc_debug_warps_sub) },
	{ HP_POP(npc->debug_warps, HP_npc_debug_warps) },
	{ HP_POP(npc->trader_count_funds, HP_npc_trader_count_funds) },
	{ HP_POP(npc->trader_pay, HP_npc_trader_pay) },
	{ HP_POP(npc->trader_update, HP_npc_trader_update) },
	{ HP_POP(npc->market_buylist, HP_npc_market_buylist) },
	{ HP_POP(npc->trader_open, HP_npc_trader_open) },
	{ HP_POP(npc->market_fromsql, HP_npc_market_fromsql) },
	{ HP_POP(npc->market_tosql, HP_npc_market_tosql) },
	{ HP_POP(npc->market_delfromsql, HP_npc_market_delfromsql) },
	{ HP_POP(npc->market_delfromsql_sub, HP_npc_market_delfromsql_sub) },
	{ HP_POP(npc->db_checkid, HP_npc_db_checkid) },
	{ HP_POP(npc->secure_timeout_timer, HP_npc_secure_timeout_timer) },
/* nullpo_interface */
	{ HP_POP(nullpo->assert_report, HP_nullpo_assert_report) },
/* party_interface */
	{ HP_POP(party->init, HP_party_init) },
	{ HP_POP(party->final, HP_party_final) },
	{ HP_POP(party->search, HP_party_search) },
	{ HP_POP(party->searchname, HP_party_searchname) },
	{ HP_POP(party->getmemberid, HP_party_getmemberid) },
	{ HP_POP(party->getavailablesd, HP_party_getavailablesd) },
	{ HP_POP(party->create, HP_party_create) },
	{ HP_POP(party->created, HP_party_created) },
	{ HP_POP(party->request_info, HP_party_request_info) },
	{ HP_POP(party->invite, HP_party_invite) },
	{ HP_POP(party->member_joined, HP_party_member_joined) },
	{ HP_POP(party->member_added, HP_party_member_added) },
	{ HP_POP(party->leave, HP_party_leave) },
	{ HP_POP(party->removemember, HP_party_removemember) },
	{ HP_POP(party->member_withdraw, HP_party_member_withdraw) },
	{ HP_POP(party->reply_invite, HP_party_reply_invite) },
	{ HP_POP(party->recv_noinfo, HP_party_recv_noinfo) },
	{ HP_POP(party->recv_info, HP_party_recv_info) },
	{ HP_POP(party->recv_movemap, HP_party_recv_movemap) },
	{ HP_POP(party->broken, HP_party_broken) },
	{ HP_POP(party->optionchanged, HP_party_optionchanged) },
	{ HP_POP(party->changeoption, HP_party_changeoption) },
	{ HP_POP(party->changeleader, HP_party_changeleader) },
	{ HP_POP(party->send_movemap, HP_party_send_movemap) },
	{ HP_POP(party->send_levelup, HP_party_send_levelup) },
	{ HP_POP(party->send_logout, HP_party_send_logout) },
	{ HP_POP(party->send_message, HP_party_send_message) },
	{ HP_POP(party->recv_message, HP_party_recv_message) },
	{ HP_POP(party->skill_check, HP_party_skill_check) },
	{ HP_POP(party->send_xy_clear, HP_party_send_xy_clear) },
	{ HP_POP(party->exp_share, HP_party_exp_share) },
	{ HP_POP(party->share_loot, HP_party_share_loot) },
	{ HP_POP(party->send_dot_remove, HP_party_send_dot_remove) },
	{ HP_POP(party->sub_count, HP_party_sub_count) },
	{ HP_POP(party->sub_count_chorus, HP_party_sub_count_chorus) },
	{ HP_POP(party->booking_register, HP_party_booking_register) },
	{ HP_POP(party->booking_update, HP_party_booking_update) },
	{ HP_POP(party->booking_search, HP_party_booking_search) },
	{ HP_POP(party->recruit_register, HP_party_recruit_register) },
	{ HP_POP(party->recruit_update, HP_party_recruit_update) },
	{ HP_POP(party->recruit_search, HP_party_recruit_search) },
	{ HP_POP(party->booking_delete, HP_party_booking_delete) },
	{ HP_POP(party->vforeachsamemap, HP_party_vforeachsamemap) },
	{ HP_POP(party->send_xy_timer, HP_party_send_xy_timer) },
	{ HP_POP(party->fill_member, HP_party_fill_member) },
	{ HP_POP(party->sd_check, HP_party_sd_check) },
	{ HP_POP(party->check_state, HP_party_check_state) },
	{ HP_POP(party->create_booking_data, HP_party_create_booking_data) },
	{ HP_POP(party->db_final, HP_party_db_final) },
/* path_interface */
	{ HP_POP(path->blownpos, HP_path_blownpos) },
	{ HP_POP(path->search, HP_path_search) },
	{ HP_POP(path->search_long, HP_path_search_long) },
	{ HP_POP(path->check_distance, HP_path_check_distance) },
	{ HP_POP(path->distance, HP_path_distance) },
	{ HP_POP(path->check_distance_client, HP_path_check_distance_client) },
	{ HP_POP(path->distance_client, HP_path_distance_client) },
/* pc_groups_interface */
	{ HP_POP(pcg->init, HP_pcg_init) },
	{ HP_POP(pcg->final, HP_pcg_final) },
	{ HP_POP(pcg->reload, HP_pcg_reload) },
	{ HP_POP(pcg->get_dummy_group, HP_pcg_get_dummy_group) },
	{ HP_POP(pcg->exists, HP_pcg_exists) },
	{ HP_POP(pcg->id2group, HP_pcg_id2group) },
	{ HP_POP(pcg->has_permission, HP_pcg_has_permission) },
	{ HP_POP(pcg->should_log_commands, HP_pcg_should_log_commands) },
	{ HP_POP(pcg->get_name, HP_pcg_get_name) },
	{ HP_POP(pcg->get_level, HP_pcg_get_level) },
	{ HP_POP(pcg->get_idx, HP_pcg_get_idx) },
/* pc_interface */
	{ HP_POP(pc->init, HP_pc_init) },
	{ HP_POP(pc->final, HP_pc_final) },
	{ HP_POP(pc->get_dummy_sd, HP_pc_get_dummy_sd) },
	{ HP_POP(pc->class2idx, HP_pc_class2idx) },
	{ HP_POP(pc->can_talk, HP_pc_can_talk) },
	{ HP_POP(pc->can_attack, HP_pc_can_attack) },
	{ HP_POP(pc->can_use_command, HP_pc_can_use_command) },
	{ HP_POP(pc->set_group, HP_pc_set_group) },
	{ HP_POP(pc->should_log_commands, HP_pc_should_log_commands) },
	{ HP_POP(pc->setrestartvalue, HP_pc_setrestartvalue) },
	{ HP_POP(pc->makesavestatus, HP_pc_makesavestatus) },
	{ HP_POP(pc->respawn, HP_pc_respawn) },
	{ HP_POP(pc->setnewpc, HP_pc_setnewpc) },
	{ HP_POP(pc->authok, HP_pc_authok) },
	{ HP_POP(pc->authfail, HP_pc_authfail) },
	{ HP_POP(pc->reg_received, HP_pc_reg_received) },
	{ HP_POP(pc->isequip, HP_pc_isequip) },
	{ HP_POP(pc->equippoint, HP_pc_equippoint) },
	{ HP_POP(pc->setinventorydata, HP_pc_setinventorydata) },
	{ HP_POP(pc->checkskill, HP_pc_checkskill) },
	{ HP_POP(pc->checkskill2, HP_pc_checkskill2) },
	{ HP_POP(pc->checkallowskill, HP_pc_checkallowskill) },
	{ HP_POP(pc->checkequip, HP_pc_checkequip) },
	{ HP_POP(pc->calc_skilltree, HP_pc_calc_skilltree) },
	{ HP_POP(pc->calc_skilltree_normalize_job, HP_pc_calc_skilltree_normalize_job) },
	{ HP_POP(pc->clean_skilltree, HP_pc_clean_skilltree) },
	{ HP_POP(pc->setpos, HP_pc_setpos) },
	{ HP_POP(pc->setsavepoint, HP_pc_setsavepoint) },
	{ HP_POP(pc->randomwarp, HP_pc_randomwarp) },
	{ HP_POP(pc->memo, HP_pc_memo) },
	{ HP_POP(pc->checkadditem, HP_pc_checkadditem) },
	{ HP_POP(pc->inventoryblank, HP_pc_inventoryblank) },
	{ HP_POP(pc->search_inventory, HP_pc_search_inventory) },
	{ HP_POP(pc->payzeny, HP_pc_payzeny) },
	{ HP_POP(pc->additem, HP_pc_additem) },
	{ HP_POP(pc->getzeny, HP_pc_getzeny) },
	{ HP_POP(pc->delitem, HP_pc_delitem) },
	{ HP_POP(pc->paycash, HP_pc_paycash) },
	{ HP_POP(pc->getcash, HP_pc_getcash) },
	{ HP_POP(pc->cart_additem, HP_pc_cart_additem) },
	{ HP_POP(pc->cart_delitem, HP_pc_cart_delitem) },
	{ HP_POP(pc->putitemtocart, HP_pc_putitemtocart) },
	{ HP_POP(pc->getitemfromcart, HP_pc_getitemfromcart) },
	{ HP_POP(pc->cartitem_amount, HP_pc_cartitem_amount) },
	{ HP_POP(pc->takeitem, HP_pc_takeitem) },
	{ HP_POP(pc->dropitem, HP_pc_dropitem) },
	{ HP_POP(pc->isequipped, HP_pc_isequipped) },
	{ HP_POP(pc->can_Adopt, HP_pc_can_Adopt) },
	{ HP_POP(pc->adoption, HP_pc_adoption) },
	{ HP_POP(pc->updateweightstatus, HP_pc_updateweightstatus) },
	{ HP_POP(pc->addautobonus, HP_pc_addautobonus) },
	{ HP_POP(pc->exeautobonus, HP_pc_exeautobonus) },
	{ HP_POP(pc->endautobonus, HP_pc_endautobonus) },
	{ HP_POP(pc->delautobonus, HP_pc_delautobonus) },
	{ HP_POP(pc->bonus, HP_pc_bonus) },
	{ HP_POP(pc->bonus2, HP_pc_bonus2) },
	{ HP_POP(pc->bonus3, HP_pc_bonus3) },
	{ HP_POP(pc->bonus4, HP_pc_bonus4) },
	{ HP_POP(pc->bonus5, HP_pc_bonus5) },
	{ HP_POP(pc->skill, HP_pc_skill) },
	{ HP_POP(pc->insert_card, HP_pc_insert_card) },
	{ HP_POP(pc->can_insert_card, HP_pc_can_insert_card) },
	{ HP_POP(pc->can_insert_card_into, HP_pc_can_insert_card_into) },
	{ HP_POP(pc->steal_item, HP_pc_steal_item) },
	{ HP_POP(pc->steal_coin, HP_pc_steal_coin) },
	{ HP_POP(pc->modifybuyvalue, HP_pc_modifybuyvalue) },
	{ HP_POP(pc->modifysellvalue, HP_pc_modifysellvalue) },
	{ HP_POP(pc->follow, HP_pc_follow) },
	{ HP_POP(pc->stop_following, HP_pc_stop_following) },
	{ HP_POP(pc->maxbaselv, HP_pc_maxbaselv) },
	{ HP_POP(pc->maxjoblv, HP_pc_maxjoblv) },
	{ HP_POP(pc->checkbaselevelup, HP_pc_checkbaselevelup) },
	{ HP_POP(pc->checkjoblevelup, HP_pc_checkjoblevelup) },
	{ HP_POP(pc->gainexp, HP_pc_gainexp) },
	{ HP_POP(pc->nextbaseexp, HP_pc_nextbaseexp) },
	{ HP_POP(pc->thisbaseexp, HP_pc_thisbaseexp) },
	{ HP_POP(pc->nextjobexp, HP_pc_nextjobexp) },
	{ HP_POP(pc->thisjobexp, HP_pc_thisjobexp) },
	{ HP_POP(pc->gets_status_point, HP_pc_gets_status_point) },
	{ HP_POP(pc->need_status_point, HP_pc_need_status_point) },
	{ HP_POP(pc->maxparameterincrease, HP_pc_maxparameterincrease) },
	{ HP_POP(pc->statusup, HP_pc_statusup) },
	{ HP_POP(pc->statusup2, HP_pc_statusup2) },
	{ HP_POP(pc->skillup, HP_pc_skillup) },
	{ HP_POP(pc->allskillup, HP_pc_allskillup) },
	{ HP_POP(pc->resetlvl, HP_pc_resetlvl) },
	{ HP_POP(pc->resetstate, HP_pc_resetstate) },
	{ HP_POP(pc->resetskill, HP_pc_resetskill) },
	{ HP_POP(pc->resetfeel, HP_pc_resetfeel) },
	{ HP_POP(pc->resethate, HP_pc_resethate) },
	{ HP_POP(pc->equipitem, HP_pc_equipitem) },
	{ HP_POP(pc->equipitem_pos, HP_pc_equipitem_pos) },
	{ HP_POP(pc->unequipitem, HP_pc_unequipitem) },
	{ HP_POP(pc->unequipitem_pos, HP_pc_unequipitem_pos) },
	{ HP_POP(pc->checkitem, HP_pc_checkitem) },
	{ HP_POP(pc->useitem, HP_pc_useitem) },
	{ HP_POP(pc->skillatk_bonus, HP_pc_skillatk_bonus) },
	{ HP_POP(pc->skillheal_bonus, HP_pc_skillheal_bonus) },
	{ HP_POP(pc->skillheal2_bonus, HP_pc_skillheal2_bonus) },
	{ HP_POP(pc->damage, HP_pc_damage) },
	{ HP_POP(pc->dead, HP_pc_dead) },
	{ HP_POP(pc->revive, HP_pc_revive) },
	{ HP_POP(pc->heal, HP_pc_heal) },
	{ HP_POP(pc->itemheal, HP_pc_itemheal) },
	{ HP_POP(pc->percentheal, HP_pc_percentheal) },
	{ HP_POP(pc->jobchange, HP_pc_jobchange) },
	{ HP_POP(pc->setoption, HP_pc_setoption) },
	{ HP_POP(pc->setcart, HP_pc_setcart) },
	{ HP_POP(pc->setfalcon, HP_pc_setfalcon) },
	{ HP_POP(pc->setridingpeco, HP_pc_setridingpeco) },
	{ HP_POP(pc->setmadogear, HP_pc_setmadogear) },
	{ HP_POP(pc->setridingdragon, HP_pc_setridingdragon) },
	{ HP_POP(pc->setridingwug, HP_pc_setridingwug) },
	{ HP_POP(pc->changelook, HP_pc_changelook) },
	{ HP_POP(pc->equiplookall, HP_pc_equiplookall) },
	{ HP_POP(pc->readparam, HP_pc_readparam) },
	{ HP_POP(pc->setparam, HP_pc_setparam) },
	{ HP_POP(pc->readreg, HP_pc_readreg) },
	{ HP_POP(pc->setreg, HP_pc_setreg) },
	{ HP_POP(pc->readregstr, HP_pc_readregstr) },
	{ HP_POP(pc->setregstr, HP_pc_setregstr) },
	{ HP_POP(pc->readregistry, HP_pc_readregistry) },
	{ HP_POP(pc->setregistry, HP_pc_setregistry) },
	{ HP_POP(pc->readregistry_str, HP_pc_readregistry_str) },
	{ HP_POP(pc->setregistry_str, HP_pc_setregistry_str) },
	{ HP_POP(pc->addeventtimer, HP_pc_addeventtimer) },
	{ HP_POP(pc->deleventtimer, HP_pc_deleventtimer) },
	{ HP_POP(pc->cleareventtimer, HP_pc_cleareventtimer) },
	{ HP_POP(pc->addeventtimercount, HP_pc_addeventtimercount) },
	{ HP_POP(pc->calc_pvprank, HP_pc_calc_pvprank) },
	{ HP_POP(pc->calc_pvprank_timer, HP_pc_calc_pvprank_timer) },
	{ HP_POP(pc->ismarried, HP_pc_ismarried) },
	{ HP_POP(pc->marriage, HP_pc_marriage) },
	{ HP_POP(pc->divorce, HP_pc_divorce) },
	{ HP_POP(pc->get_partner, HP_pc_get_partner) },
	{ HP_POP(pc->get_father, HP_pc_get_father) },
	{ HP_POP(pc->get_mother, HP_pc_get_mother) },
	{ HP_POP(pc->get_child, HP_pc_get_child) },
	{ HP_POP(pc->bleeding, HP_pc_bleeding) },
	{ HP_POP(pc->regen, HP_pc_regen) },
	{ HP_POP(pc->setstand, HP_pc_setstand) },
	{ HP_POP(pc->candrop, HP_pc_candrop) },
	{ HP_POP(pc->jobid2mapid, HP_pc_jobid2mapid) },
	{ HP_POP(pc->mapid2jobid, HP_pc_mapid2jobid) },
	{ HP_POP(pc->job_name, HP_pc_job_name) },
	{ HP_POP(pc->setinvincibletimer, HP_pc_setinvincibletimer) },
	{ HP_POP(pc->delinvincibletimer, HP_pc_delinvincibletimer) },
	{ HP_POP(pc->addspiritball, HP_pc_addspiritball) },
	{ HP_POP(pc->delspiritball, HP_pc_delspiritball) },
	{ HP_POP(pc->getmaxspiritball, HP_pc_getmaxspiritball) },
	{ HP_POP(pc->addfame, HP_pc_addfame) },
	{ HP_POP(pc->famerank, HP_pc_famerank) },
	{ HP_POP(pc->set_hate_mob, HP_pc_set_hate_mob) },
	{ HP_POP(pc->readdb, HP_pc_readdb) },
	{ HP_POP(pc->map_day_timer, HP_pc_map_day_timer) },
	{ HP_POP(pc->map_night_timer, HP_pc_map_night_timer) },
	{ HP_POP(pc->inventory_rentals, HP_pc_inventory_rentals) },
	{ HP_POP(pc->inventory_rental_clear, HP_pc_inventory_rental_clear) },
	{ HP_POP(pc->inventory_rental_add, HP_pc_inventory_rental_add) },
	{ HP_POP(pc->disguise, HP_pc_disguise) },
	{ HP_POP(pc->isautolooting, HP_pc_isautolooting) },
	{ HP_POP(pc->overheat, HP_pc_overheat) },
	{ HP_POP(pc->banding, HP_pc_banding) },
	{ HP_POP(pc->itemcd_do, HP_pc_itemcd_do) },
	{ HP_POP(pc->load_combo, HP_pc_load_combo) },
	{ HP_POP(pc->add_charm, HP_pc_add_charm) },
	{ HP_POP(pc->del_charm, HP_pc_del_charm) },
	{ HP_POP(pc->baselevelchanged, HP_pc_baselevelchanged) },
	{ HP_POP(pc->level_penalty_mod, HP_pc_level_penalty_mod) },
	{ HP_POP(pc->calc_skillpoint, HP_pc_calc_skillpoint) },
	{ HP_POP(pc->invincible_timer, HP_pc_invincible_timer) },
	{ HP_POP(pc->spiritball_timer, HP_pc_spiritball_timer) },
	{ HP_POP(pc->check_banding, HP_pc_check_banding) },
	{ HP_POP(pc->inventory_rental_end, HP_pc_inventory_rental_end) },
	{ HP_POP(pc->check_skilltree, HP_pc_check_skilltree) },
	{ HP_POP(pc->bonus_autospell, HP_pc_bonus_autospell) },
	{ HP_POP(pc->bonus_autospell_onskill, HP_pc_bonus_autospell_onskill) },
	{ HP_POP(pc->bonus_addeff, HP_pc_bonus_addeff) },
	{ HP_POP(pc->bonus_addeff_onskill, HP_pc_bonus_addeff_onskill) },
	{ HP_POP(pc->bonus_item_drop, HP_pc_bonus_item_drop) },
	{ HP_POP(pc->calcexp, HP_pc_calcexp) },
	{ HP_POP(pc->respawn_timer, HP_pc_respawn_timer) },
	{ HP_POP(pc->jobchange_killclone, HP_pc_jobchange_killclone) },
	{ HP_POP(pc->getstat, HP_pc_getstat) },
	{ HP_POP(pc->setstat, HP_pc_setstat) },
	{ HP_POP(pc->eventtimer, HP_pc_eventtimer) },
	{ HP_POP(pc->daynight_timer_sub, HP_pc_daynight_timer_sub) },
	{ HP_POP(pc->charm_timer, HP_pc_charm_timer) },
	{ HP_POP(pc->readdb_levelpenalty, HP_pc_readdb_levelpenalty) },
	{ HP_POP(pc->autosave, HP_pc_autosave) },
	{ HP_POP(pc->follow_timer, HP_pc_follow_timer) },
	{ HP_POP(pc->read_skill_tree, HP_pc_read_skill_tree) },
	{ HP_POP(pc->clear_skill_tree, HP_pc_clear_skill_tree) },
	{ HP_POP(pc->isUseitem, HP_pc_isUseitem) },
	{ HP_POP(pc->show_steal, HP_pc_show_steal) },
	{ HP_POP(pc->checkcombo, HP_pc_checkcombo) },
	{ HP_POP(pc->calcweapontype, HP_pc_calcweapontype) },
	{ HP_POP(pc->removecombo, HP_pc_removecombo) },
	{ HP_POP(pc->bank_deposit, HP_pc_bank_deposit) },
	{ HP_POP(pc->bank_withdraw, HP_pc_bank_withdraw) },
	{ HP_POP(pc->rental_expire, HP_pc_rental_expire) },
	{ HP_POP(pc->scdata_received, HP_pc_scdata_received) },
	{ HP_POP(pc->bound_clear, HP_pc_bound_clear) },
	{ HP_POP(pc->expiration_timer, HP_pc_expiration_timer) },
	{ HP_POP(pc->global_expiration_timer, HP_pc_global_expiration_timer) },
	{ HP_POP(pc->expire_check, HP_pc_expire_check) },
	{ HP_POP(pc->db_checkid, HP_pc_db_checkid) },
	{ HP_POP(pc->validate_levels, HP_pc_validate_levels) },
	{ HP_POP(pc->autotrade_load, HP_pc_autotrade_load) },
	{ HP_POP(pc->autotrade_update, HP_pc_autotrade_update) },
	{ HP_POP(pc->autotrade_start, HP_pc_autotrade_start) },
	{ HP_POP(pc->autotrade_prepare, HP_pc_autotrade_prepare) },
	{ HP_POP(pc->autotrade_populate, HP_pc_autotrade_populate) },
	{ HP_POP(pc->autotrade_final, HP_pc_autotrade_final) },
	{ HP_POP(pc->check_job_name, HP_pc_check_job_name) },
	{ HP_POP(pc->update_idle_time, HP_pc_update_idle_time) },
	{ HP_POP(pc->have_magnifier, HP_pc_have_magnifier) },
	{ HP_POP(pc->process_chat_message, HP_pc_process_chat_message) },
	{ HP_POP(pc->check_supernovice_call, HP_pc_check_supernovice_call) },
/* pcre_interface */
	{ HP_POP(libpcre->compile, HP_libpcre_compile) },
	{ HP_POP(libpcre->study, HP_libpcre_study) },
	{ HP_POP(libpcre->exec, HP_libpcre_exec) },
	{ HP_POP(libpcre->free, HP_libpcre_free) },
	{ HP_POP(libpcre->copy_substring, HP_libpcre_copy_substring) },
	{ HP_POP(libpcre->free_substring, HP_libpcre_free_substring) },
	{ HP_POP(libpcre->copy_named_substring, HP_libpcre_copy_named_substring) },
	{ HP_POP(libpcre->get_substring, HP_libpcre_get_substring) },
/* pet_interface */
	{ HP_POP(pet->init, HP_pet_init) },
	{ HP_POP(pet->final, HP_pet_final) },
	{ HP_POP(pet->hungry_val, HP_pet_hungry_val) },
	{ HP_POP(pet->set_intimate, HP_pet_set_intimate) },
	{ HP_POP(pet->create_egg, HP_pet_create_egg) },
	{ HP_POP(pet->unlocktarget, HP_pet_unlocktarget) },
	{ HP_POP(pet->attackskill, HP_pet_attackskill) },
	{ HP_POP(pet->target_check, HP_pet_target_check) },
	{ HP_POP(pet->sc_check, HP_pet_sc_check) },
	{ HP_POP(pet->hungry, HP_pet_hungry) },
	{ HP_POP(pet->search_petDB_index, HP_pet_search_petDB_index) },
	{ HP_POP(pet->hungry_timer_delete, HP_pet_hungry_timer_delete) },
	{ HP_POP(pet->performance, HP_pet_performance) },
	{ HP_POP(pet->return_egg, HP_pet_return_egg) },
	{ HP_POP(pet->data_init, HP_pet_data_init) },
	{ HP_POP(pet->birth_process, HP_pet_birth_process) },
	{ HP_POP(pet->recv_petdata, HP_pet_recv_petdata) },
	{ HP_POP(pet->select_egg, HP_pet_select_egg) },
	{ HP_POP(pet->catch_process1, HP_pet_catch_process1) },
	{ HP_POP(pet->catch_process2, HP_pet_catch_process2) },
	{ HP_POP(pet->get_egg, HP_pet_get_egg) },
	{ HP_POP(pet->unequipitem, HP_pet_unequipitem) },
	{ HP_POP(pet->food, HP_pet_food) },
	{ HP_POP(pet->ai_sub_hard_lootsearch, HP_pet_ai_sub_hard_lootsearch) },
	{ HP_POP(pet->menu, HP_pet_menu) },
	{ HP_POP(pet->change_name, HP_pet_change_name) },
	{ HP_POP(pet->change_name_ack, HP_pet_change_name_ack) },
	{ HP_POP(pet->equipitem, HP_pet_equipitem) },
	{ HP_POP(pet->randomwalk, HP_pet_randomwalk) },
	{ HP_POP(pet->ai_sub_hard, HP_pet_ai_sub_hard) },
	{ HP_POP(pet->ai_sub_foreachclient, HP_pet_ai_sub_foreachclient) },
	{ HP_POP(pet->ai_hard, HP_pet_ai_hard) },
	{ HP_POP(pet->delay_item_drop, HP_pet_delay_item_drop) },
	{ HP_POP(pet->lootitem_drop, HP_pet_lootitem_drop) },
	{ HP_POP(pet->skill_bonus_timer, HP_pet_skill_bonus_timer) },
	{ HP_POP(pet->recovery_timer, HP_pet_recovery_timer) },
	{ HP_POP(pet->skill_support_timer, HP_pet_skill_support_timer) },
	{ HP_POP(pet->read_db, HP_pet_read_db) },
/* quest_interface */
	{ HP_POP(quest->init, HP_quest_init) },
	{ HP_POP(quest->final, HP_quest_final) },
	{ HP_POP(quest->reload, HP_quest_reload) },
	{ HP_POP(quest->db, HP_quest_db) },
	{ HP_POP(quest->pc_login, HP_quest_pc_login) },
	{ HP_POP(quest->add, HP_quest_add) },
	{ HP_POP(quest->change, HP_quest_change) },
	{ HP_POP(quest->delete, HP_quest_delete) },
	{ HP_POP(quest->update_objective_sub, HP_quest_update_objective_sub) },
	{ HP_POP(quest->update_objective, HP_quest_update_objective) },
	{ HP_POP(quest->update_status, HP_quest_update_status) },
	{ HP_POP(quest->check, HP_quest_check) },
	{ HP_POP(quest->clear, HP_quest_clear) },
	{ HP_POP(quest->read_db, HP_quest_read_db) },
	{ HP_POP(quest->read_db_sub, HP_quest_read_db_sub) },
/* rnd_interface */
	{ HP_POP(rnd->init, HP_rnd_init) },
	{ HP_POP(rnd->final, HP_rnd_final) },
	{ HP_POP(rnd->seed, HP_rnd_seed) },
	{ HP_POP(rnd->random, HP_rnd_random) },
	{ HP_POP(rnd->roll, HP_rnd_roll) },
	{ HP_POP(rnd->value, HP_rnd_value) },
	{ HP_POP(rnd->uniform, HP_rnd_uniform) },
	{ HP_POP(rnd->uniform53, HP_rnd_uniform53) },
/* script_interface */
	{ HP_POP(script->init, HP_script_init) },
	{ HP_POP(script->final, HP_script_final) },
	{ HP_POP(script->reload, HP_script_reload) },
	{ HP_POP(script->parse, HP_script_parse) },
	{ HP_POP(script->add_builtin, HP_script_add_builtin) },
	{ HP_POP(script->parse_builtin, HP_script_parse_builtin) },
	{ HP_POP(script->parse_subexpr, HP_script_parse_subexpr) },
	{ HP_POP(script->skip_space, HP_script_skip_space) },
	{ HP_POP(script->error, HP_script_error) },
	{ HP_POP(script->warning, HP_script_warning) },
	{ HP_POP(script->addScript, HP_script_addScript) },
	{ HP_POP(script->conv_num, HP_script_conv_num) },
	{ HP_POP(script->conv_str, HP_script_conv_str) },
	{ HP_POP(script->rid2sd, HP_script_rid2sd) },
	{ HP_POP(script->id2sd, HP_script_id2sd) },
	{ HP_POP(script->charid2sd, HP_script_charid2sd) },
	{ HP_POP(script->nick2sd, HP_script_nick2sd) },
	{ HP_POP(script->detach_rid, HP_script_detach_rid) },
	{ HP_POP(script->push_val, HP_script_push_val) },
	{ HP_POP(script->get_val, HP_script_get_val) },
	{ HP_POP(script->get_val_ref_str, HP_script_get_val_ref_str) },
	{ HP_POP(script->get_val_scope_str, HP_script_get_val_scope_str) },
	{ HP_POP(script->get_val_npc_str, HP_script_get_val_npc_str) },
	{ HP_POP(script->get_val_instance_str, HP_script_get_val_instance_str) },
	{ HP_POP(script->get_val_ref_num, HP_script_get_val_ref_num) },
	{ HP_POP(script->get_val_scope_num, HP_script_get_val_scope_num) },
	{ HP_POP(script->get_val_npc_num, HP_script_get_val_npc_num) },
	{ HP_POP(script->get_val_instance_num, HP_script_get_val_instance_num) },
	{ HP_POP(script->get_val2, HP_script_get_val2) },
	{ HP_POP(script->push_str, HP_script_push_str) },
	{ HP_POP(script->push_conststr, HP_script_push_conststr) },
	{ HP_POP(script->push_copy, HP_script_push_copy) },
	{ HP_POP(script->pop_stack, HP_script_pop_stack) },
	{ HP_POP(script->set_constant, HP_script_set_constant) },
	{ HP_POP(script->set_constant2, HP_script_set_constant2) },
	{ HP_POP(script->get_constant, HP_script_get_constant) },
	{ HP_POP(script->label_add, HP_script_label_add) },
	{ HP_POP(script->run, HP_script_run) },
	{ HP_POP(script->run_npc, HP_script_run_npc) },
	{ HP_POP(script->run_pet, HP_script_run_pet) },
	{ HP_POP(script->run_main, HP_script_run_main) },
	{ HP_POP(script->run_timer, HP_script_run_timer) },
	{ HP_POP(script->set_var, HP_script_set_var) },
	{ HP_POP(script->stop_instances, HP_script_stop_instances) },
	{ HP_POP(script->free_code, HP_script_free_code) },
	{ HP_POP(script->free_vars, HP_script_free_vars) },
	{ HP_POP(script->alloc_state, HP_script_alloc_state) },
	{ HP_POP(script->free_state, HP_script_free_state) },
	{ HP_POP(script->add_pending_ref, HP_script_add_pending_ref) },
	{ HP_POP(script->run_autobonus, HP_script_run_autobonus) },
	{ HP_POP(script->cleararray_pc, HP_script_cleararray_pc) },
	{ HP_POP(script->setarray_pc, HP_script_setarray_pc) },
	{ HP_POP(script->config_read, HP_script_config_read) },
	{ HP_POP(script->add_str, HP_script_add_str) },
	{ HP_POP(script->get_str, HP_script_get_str) },
	{ HP_POP(script->search_str, HP_script_search_str) },
	{ HP_POP(script->setd_sub, HP_script_setd_sub) },
	{ HP_POP(script->attach_state, HP_script_attach_state) },
	{ HP_POP(script->queue, HP_script_queue) },
	{ HP_POP(script->queue_add, HP_script_queue_add) },
	{ HP_POP(script->queue_del, HP_script_queue_del) },
	{ HP_POP(script->queue_remove, HP_script_queue_remove) },
	{ HP_POP(script->queue_create, HP_script_queue_create) },
	{ HP_POP(script->queue_clear, HP_script_queue_clear) },
	{ HP_POP(script->parse_curly_close, HP_script_parse_curly_close) },
	{ HP_POP(script->parse_syntax_close, HP_script_parse_syntax_close) },
	{ HP_POP(script->parse_syntax_close_sub, HP_script_parse_syntax_close_sub) },
	{ HP_POP(script->parse_syntax, HP_script_parse_syntax) },
	{ HP_POP(script->get_com, HP_script_get_com) },
	{ HP_POP(script->get_num, HP_script_get_num) },
	{ HP_POP(script->op2name, HP_script_op2name) },
	{ HP_POP(script->reportsrc, HP_script_reportsrc) },
	{ HP_POP(script->reportdata, HP_script_reportdata) },
	{ HP_POP(script->reportfunc, HP_script_reportfunc) },
	{ HP_POP(script->disp_warning_message, HP_script_disp_warning_message) },
	{ HP_POP(script->check_event, HP_script_check_event) },
	{ HP_POP(script->calc_hash, HP_script_calc_hash) },
	{ HP_POP(script->addb, HP_script_addb) },
	{ HP_POP(script->addc, HP_script_addc) },
	{ HP_POP(script->addi, HP_script_addi) },
	{ HP_POP(script->addl, HP_script_addl) },
	{ HP_POP(script->set_label, HP_script_set_label) },
	{ HP_POP(script->skip_word, HP_script_skip_word) },
	{ HP_POP(script->add_word, HP_script_add_word) },
	{ HP_POP(script->parse_callfunc, HP_script_parse_callfunc) },
	{ HP_POP(script->parse_nextline, HP_script_parse_nextline) },
	{ HP_POP(script->parse_variable, HP_script_parse_variable) },
	{ HP_POP(script->parse_simpleexpr, HP_script_parse_simpleexpr) },
	{ HP_POP(script->parse_simpleexpr_paren, HP_script_parse_simpleexpr_paren) },
	{ HP_POP(script->parse_simpleexpr_number, HP_script_parse_simpleexpr_number) },
	{ HP_POP(script->parse_simpleexpr_string, HP_script_parse_simpleexpr_string) },
	{ HP_POP(script->parse_simpleexpr_name, HP_script_parse_simpleexpr_name) },
	{ HP_POP(script->add_translatable_string, HP_script_add_translatable_string) },
	{ HP_POP(script->parse_expr, HP_script_parse_expr) },
	{ HP_POP(script->parse_line, HP_script_parse_line) },
	{ HP_POP(script->read_constdb, HP_script_read_constdb) },
	{ HP_POP(script->constdb_comment, HP_script_constdb_comment) },
	{ HP_POP(script->load_parameters, HP_script_load_parameters) },
	{ HP_POP(script->print_line, HP_script_print_line) },
	{ HP_POP(script->errorwarning_sub, HP_script_errorwarning_sub) },
	{ HP_POP(script->set_reg, HP_script_set_reg) },
	{ HP_POP(script->set_reg_ref_str, HP_script_set_reg_ref_str) },
	{ HP_POP(script->set_reg_scope_str, HP_script_set_reg_scope_str) },
	{ HP_POP(script->set_reg_npc_str, HP_script_set_reg_npc_str) },
	{ HP_POP(script->set_reg_instance_str, HP_script_set_reg_instance_str) },
	{ HP_POP(script->set_reg_ref_num, HP_script_set_reg_ref_num) },
	{ HP_POP(script->set_reg_scope_num, HP_script_set_reg_scope_num) },
	{ HP_POP(script->set_reg_npc_num, HP_script_set_reg_npc_num) },
	{ HP_POP(script->set_reg_instance_num, HP_script_set_reg_instance_num) },
	{ HP_POP(script->stack_expand, HP_script_stack_expand) },
	{ HP_POP(script->push_retinfo, HP_script_push_retinfo) },
	{ HP_POP(script->op_3, HP_script_op_3) },
	{ HP_POP(script->op_2str, HP_script_op_2str) },
	{ HP_POP(script->op_2num, HP_script_op_2num) },
	{ HP_POP(script->op_2, HP_script_op_2) },
	{ HP_POP(script->op_1, HP_script_op_1) },
	{ HP_POP(script->check_buildin_argtype, HP_script_check_buildin_argtype) },
	{ HP_POP(script->detach_state, HP_script_detach_state) },
	{ HP_POP(script->db_free_code_sub, HP_script_db_free_code_sub) },
	{ HP_POP(script->add_autobonus, HP_script_add_autobonus) },
	{ HP_POP(script->menu_countoptions, HP_script_menu_countoptions) },
	{ HP_POP(script->buildin_areawarp_sub, HP_script_buildin_areawarp_sub) },
	{ HP_POP(script->buildin_areapercentheal_sub, HP_script_buildin_areapercentheal_sub) },
	{ HP_POP(script->buildin_delitem_delete, HP_script_buildin_delitem_delete) },
	{ HP_POP(script->buildin_delitem_search, HP_script_buildin_delitem_search) },
	{ HP_POP(script->buildin_killmonster_sub_strip, HP_script_buildin_killmonster_sub_strip) },
	{ HP_POP(script->buildin_killmonster_sub, HP_script_buildin_killmonster_sub) },
	{ HP_POP(script->buildin_killmonsterall_sub_strip, HP_script_buildin_killmonsterall_sub_strip) },
	{ HP_POP(script->buildin_killmonsterall_sub, HP_script_buildin_killmonsterall_sub) },
	{ HP_POP(script->buildin_announce_sub, HP_script_buildin_announce_sub) },
	{ HP_POP(script->buildin_getareausers_sub, HP_script_buildin_getareausers_sub) },
	{ HP_POP(script->buildin_getareadropitem_sub, HP_script_buildin_getareadropitem_sub) },
	{ HP_POP(script->mapflag_pvp_sub, HP_script_mapflag_pvp_sub) },
	{ HP_POP(script->buildin_pvpoff_sub, HP_script_buildin_pvpoff_sub) },
	{ HP_POP(script->buildin_maprespawnguildid_sub_pc, HP_script_buildin_maprespawnguildid_sub_pc) },
	{ HP_POP(script->buildin_maprespawnguildid_sub_mob, HP_script_buildin_maprespawnguildid_sub_mob) },
	{ HP_POP(script->buildin_mobcount_sub, HP_script_buildin_mobcount_sub) },
	{ HP_POP(script->playbgm_sub, HP_script_playbgm_sub) },
	{ HP_POP(script->playbgm_foreachpc_sub, HP_script_playbgm_foreachpc_sub) },
	{ HP_POP(script->soundeffect_sub, HP_script_soundeffect_sub) },
	{ HP_POP(script->buildin_query_sql_sub, HP_script_buildin_query_sql_sub) },
	{ HP_POP(script->buildin_instance_warpall_sub, HP_script_buildin_instance_warpall_sub) },
	{ HP_POP(script->buildin_mobuseskill_sub, HP_script_buildin_mobuseskill_sub) },
	{ HP_POP(script->cleanfloor_sub, HP_script_cleanfloor_sub) },
	{ HP_POP(script->run_func, HP_script_run_func) },
	{ HP_POP(script->getfuncname, HP_script_getfuncname) },
	{ HP_POP(script->calc_hash_ci, HP_script_calc_hash_ci) },
	{ HP_POP(script->array_src, HP_script_array_src) },
	{ HP_POP(script->array_update, HP_script_array_update) },
	{ HP_POP(script->array_delete, HP_script_array_delete) },
	{ HP_POP(script->array_remove_member, HP_script_array_remove_member) },
	{ HP_POP(script->array_add_member, HP_script_array_add_member) },
	{ HP_POP(script->array_size, HP_script_array_size) },
	{ HP_POP(script->array_highest_key, HP_script_array_highest_key) },
	{ HP_POP(script->array_free_db, HP_script_array_free_db) },
	{ HP_POP(script->array_ensure_zero, HP_script_array_ensure_zero) },
	{ HP_POP(script->reg_destroy_single, HP_script_reg_destroy_single) },
	{ HP_POP(script->reg_destroy, HP_script_reg_destroy) },
	{ HP_POP(script->generic_ui_array_expand, HP_script_generic_ui_array_expand) },
	{ HP_POP(script->array_cpy_list, HP_script_array_cpy_list) },
	{ HP_POP(script->hardcoded_constants, HP_script_hardcoded_constants) },
	{ HP_POP(script->mapindexname2id, HP_script_mapindexname2id) },
	{ HP_POP(script->string_dup, HP_script_string_dup) },
	{ HP_POP(script->load_translations, HP_script_load_translations) },
	{ HP_POP(script->load_translation_addstring, HP_script_load_translation_addstring) },
	{ HP_POP(script->load_translation, HP_script_load_translation) },
	{ HP_POP(script->translation_db_destroyer, HP_script_translation_db_destroyer) },
	{ HP_POP(script->clear_translations, HP_script_clear_translations) },
	{ HP_POP(script->parse_cleanup_timer, HP_script_parse_cleanup_timer) },
	{ HP_POP(script->add_language, HP_script_add_language) },
	{ HP_POP(script->get_translation_file_name, HP_script_get_translation_file_name) },
	{ HP_POP(script->parser_clean_leftovers, HP_script_parser_clean_leftovers) },
	{ HP_POP(script->run_use_script, HP_script_run_use_script) },
	{ HP_POP(script->run_item_equip_script, HP_script_run_item_equip_script) },
	{ HP_POP(script->run_item_unequip_script, HP_script_run_item_unequip_script) },
/* searchstore_interface */
	{ HP_POP(searchstore->open, HP_searchstore_open) },
	{ HP_POP(searchstore->query, HP_searchstore_query) },
	{ HP_POP(searchstore->querynext, HP_searchstore_querynext) },
	{ HP_POP(searchstore->next, HP_searchstore_next) },
	{ HP_POP(searchstore->clear, HP_searchstore_clear) },
	{ HP_POP(searchstore->close, HP_searchstore_close) },
	{ HP_POP(searchstore->click, HP_searchstore_click) },
	{ HP_POP(searchstore->queryremote, HP_searchstore_queryremote) },
	{ HP_POP(searchstore->clearremote, HP_searchstore_clearremote) },
	{ HP_POP(searchstore->result, HP_searchstore_result) },
/* showmsg_interface */
	{ HP_POP(showmsg->init, HP_showmsg_init) },
	{ HP_POP(showmsg->final, HP_showmsg_final) },
	{ HP_POP(showmsg->clearScreen, HP_showmsg_clearScreen) },
	{ HP_POP(showmsg->showMessageV, HP_showmsg_showMessageV) },
/* skill_interface */
	{ HP_POP(skill->init, HP_skill_init) },
	{ HP_POP(skill->final, HP_skill_final) },
	{ HP_POP(skill->reload, HP_skill_reload) },
	{ HP_POP(skill->read_db, HP_skill_read_db) },
	{ HP_POP(skill->get_index, HP_skill_get_index) },
	{ HP_POP(skill->get_type, HP_skill_get_type) },
	{ HP_POP(skill->get_hit, HP_skill_get_hit) },
	{ HP_POP(skill->get_inf, HP_skill_get_inf) },
	{ HP_POP(skill->get_ele, HP_skill_get_ele) },
	{ HP_POP(skill->get_nk, HP_skill_get_nk) },
	{ HP_POP(skill->get_max, HP_skill_get_max) },
	{ HP_POP(skill->get_range, HP_skill_get_range) },
	{ HP_POP(skill->get_range2, HP_skill_get_range2) },
	{ HP_POP(skill->get_splash, HP_skill_get_splash) },
	{ HP_POP(skill->get_hp, HP_skill_get_hp) },
	{ HP_POP(skill->get_mhp, HP_skill_get_mhp) },
	{ HP_POP(skill->get_sp, HP_skill_get_sp) },
	{ HP_POP(skill->get_state, HP_skill_get_state) },
	{ HP_POP(skill->get_spiritball, HP_skill_get_spiritball) },
	{ HP_POP(skill->get_zeny, HP_skill_get_zeny) },
	{ HP_POP(skill->get_num, HP_skill_get_num) },
	{ HP_POP(skill->get_cast, HP_skill_get_cast) },
	{ HP_POP(skill->get_delay, HP_skill_get_delay) },
	{ HP_POP(skill->get_walkdelay, HP_skill_get_walkdelay) },
	{ HP_POP(skill->get_time, HP_skill_get_time) },
	{ HP_POP(skill->get_time2, HP_skill_get_time2) },
	{ HP_POP(skill->get_castnodex, HP_skill_get_castnodex) },
	{ HP_POP(skill->get_delaynodex, HP_skill_get_delaynodex) },
	{ HP_POP(skill->get_castdef, HP_skill_get_castdef) },
	{ HP_POP(skill->get_weapontype, HP_skill_get_weapontype) },
	{ HP_POP(skill->get_ammotype, HP_skill_get_ammotype) },
	{ HP_POP(skill->get_ammo_qty, HP_skill_get_ammo_qty) },
	{ HP_POP(skill->get_unit_id, HP_skill_get_unit_id) },
	{ HP_POP(skill->get_inf2, HP_skill_get_inf2) },
	{ HP_POP(skill->get_castcancel, HP_skill_get_castcancel) },
	{ HP_POP(skill->get_maxcount, HP_skill_get_maxcount) },
	{ HP_POP(skill->get_blewcount, HP_skill_get_blewcount) },
	{ HP_POP(skill->get_unit_flag, HP_skill_get_unit_flag) },
	{ HP_POP(skill->get_unit_target, HP_skill_get_unit_target) },
	{ HP_POP(skill->get_unit_interval, HP_skill_get_unit_interval) },
	{ HP_POP(skill->get_unit_bl_target, HP_skill_get_unit_bl_target) },
	{ HP_POP(skill->get_unit_layout_type, HP_skill_get_unit_layout_type) },
	{ HP_POP(skill->get_unit_range, HP_skill_get_unit_range) },
	{ HP_POP(skill->get_cooldown, HP_skill_get_cooldown) },
	{ HP_POP(skill->tree_get_max, HP_skill_tree_get_max) },
	{ HP_POP(skill->get_name, HP_skill_get_name) },
	{ HP_POP(skill->get_desc, HP_skill_get_desc) },
	{ HP_POP(skill->chk, HP_skill_chk) },
	{ HP_POP(skill->get_casttype, HP_skill_get_casttype) },
	{ HP_POP(skill->get_casttype2, HP_skill_get_casttype2) },
	{ HP_POP(skill->is_combo, HP_skill_is_combo) },
	{ HP_POP(skill->name2id, HP_skill_name2id) },
	{ HP_POP(skill->isammotype, HP_skill_isammotype) },
	{ HP_POP(skill->castend_id, HP_skill_castend_id) },
	{ HP_POP(skill->castend_pos, HP_skill_castend_pos) },
	{ HP_POP(skill->castend_map, HP_skill_castend_map) },
	{ HP_POP(skill->cleartimerskill, HP_skill_cleartimerskill) },
	{ HP_POP(skill->addtimerskill, HP_skill_addtimerskill) },
	{ HP_POP(skill->additional_effect, HP_skill_additional_effect) },
	{ HP_POP(skill->counter_additional_effect, HP_skill_counter_additional_effect) },
	{ HP_POP(skill->blown, HP_skill_blown) },
	{ HP_POP(skill->break_equip, HP_skill_break_equip) },
	{ HP_POP(skill->strip_equip, HP_skill_strip_equip) },
	{ HP_POP(skill->id2group, HP_skill_id2group) },
	{ HP_POP(skill->unitsetting, HP_skill_unitsetting) },
	{ HP_POP(skill->initunit, HP_skill_initunit) },
	{ HP_POP(skill->delunit, HP_skill_delunit) },
	{ HP_POP(skill->init_unitgroup, HP_skill_init_unitgroup) },
	{ HP_POP(skill->del_unitgroup, HP_skill_del_unitgroup) },
	{ HP_POP(skill->clear_unitgroup, HP_skill_clear_unitgroup) },
	{ HP_POP(skill->clear_group, HP_skill_clear_group) },
	{ HP_POP(skill->unit_onplace, HP_skill_unit_onplace) },
	{ HP_POP(skill->unit_ondamaged, HP_skill_unit_ondamaged) },
	{ HP_POP(skill->cast_fix, HP_skill_cast_fix) },
	{ HP_POP(skill->cast_fix_sc, HP_skill_cast_fix_sc) },
	{ HP_POP(skill->vf_cast_fix, HP_skill_vf_cast_fix) },
	{ HP_POP(skill->delay_fix, HP_skill_delay_fix) },
	{ HP_POP(skill->check_condition_castbegin, HP_skill_check_condition_castbegin) },
	{ HP_POP(skill->check_condition_castend, HP_skill_check_condition_castend) },
	{ HP_POP(skill->consume_requirement, HP_skill_consume_requirement) },
	{ HP_POP(skill->get_requirement, HP_skill_get_requirement) },
	{ HP_POP(skill->check_pc_partner, HP_skill_check_pc_partner) },
	{ HP_POP(skill->unit_move, HP_skill_unit_move) },
	{ HP_POP(skill->unit_onleft, HP_skill_unit_onleft) },
	{ HP_POP(skill->unit_onout, HP_skill_unit_onout) },
	{ HP_POP(skill->unit_move_unit_group, HP_skill_unit_move_unit_group) },
	{ HP_POP(skill->sit, HP_skill_sit) },
	{ HP_POP(skill->brandishspear, HP_skill_brandishspear) },
	{ HP_POP(skill->repairweapon, HP_skill_repairweapon) },
	{ HP_POP(skill->identify, HP_skill_identify) },
	{ HP_POP(skill->weaponrefine, HP_skill_weaponrefine) },
	{ HP_POP(skill->autospell, HP_skill_autospell) },
	{ HP_POP(skill->calc_heal, HP_skill_calc_heal) },
	{ HP_POP(skill->check_cloaking, HP_skill_check_cloaking) },
	{ HP_POP(skill->check_cloaking_end, HP_skill_check_cloaking_end) },
	{ HP_POP(skill->can_cloak, HP_skill_can_cloak) },
	{ HP_POP(skill->enchant_elemental_end, HP_skill_enchant_elemental_end) },
	{ HP_POP(skill->not_ok, HP_skill_not_ok) },
	{ HP_POP(skill->not_ok_unknown, HP_skill_not_ok_unknown) },
	{ HP_POP(skill->not_ok_hom, HP_skill_not_ok_hom) },
	{ HP_POP(skill->not_ok_hom_unknown, HP_skill_not_ok_hom_unknown) },
	{ HP_POP(skill->not_ok_mercenary, HP_skill_not_ok_mercenary) },
	{ HP_POP(skill->chastle_mob_changetarget, HP_skill_chastle_mob_changetarget) },
	{ HP_POP(skill->can_produce_mix, HP_skill_can_produce_mix) },
	{ HP_POP(skill->produce_mix, HP_skill_produce_mix) },
	{ HP_POP(skill->arrow_create, HP_skill_arrow_create) },
	{ HP_POP(skill->castend_type, HP_skill_castend_type) },
	{ HP_POP(skill->castend_nodamage_id, HP_skill_castend_nodamage_id) },
	{ HP_POP(skill->castend_damage_id, HP_skill_castend_damage_id) },
	{ HP_POP(skill->castend_pos2, HP_skill_castend_pos2) },
	{ HP_POP(skill->blockpc_start, HP_skill_blockpc_start) },
	{ HP_POP(skill->blockhomun_start, HP_skill_blockhomun_start) },
	{ HP_POP(skill->blockmerc_start, HP_skill_blockmerc_start) },
	{ HP_POP(skill->attack, HP_skill_attack) },
	{ HP_POP(skill->attack_area, HP_skill_attack_area) },
	{ HP_POP(skill->area_sub, HP_skill_area_sub) },
	{ HP_POP(skill->area_sub_count, HP_skill_area_sub_count) },
	{ HP_POP(skill->check_unit_range, HP_skill_check_unit_range) },
	{ HP_POP(skill->check_unit_range_sub, HP_skill_check_unit_range_sub) },
	{ HP_POP(skill->check_unit_range2, HP_skill_check_unit_range2) },
	{ HP_POP(skill->check_unit_range2_sub, HP_skill_check_unit_range2_sub) },
	{ HP_POP(skill->toggle_magicpower, HP_skill_toggle_magicpower) },
	{ HP_POP(skill->magic_reflect, HP_skill_magic_reflect) },
	{ HP_POP(skill->onskillusage, HP_skill_onskillusage) },
	{ HP_POP(skill->cell_overlap, HP_skill_cell_overlap) },
	{ HP_POP(skill->timerskill, HP_skill_timerskill) },
	{ HP_POP(skill->trap_splash, HP_skill_trap_splash) },
	{ HP_POP(skill->check_condition_mercenary, HP_skill_check_condition_mercenary) },
	{ HP_POP(skill->locate_element_field, HP_skill_locate_element_field) },
	{ HP_POP(skill->graffitiremover, HP_skill_graffitiremover) },
	{ HP_POP(skill->activate_reverberation, HP_skill_activate_reverberation) },
	{ HP_POP(skill->dance_overlap_sub, HP_skill_dance_overlap_sub) },
	{ HP_POP(skill->dance_overlap, HP_skill_dance_overlap) },
	{ HP_POP(skill->get_unit_layout, HP_skill_get_unit_layout) },
	{ HP_POP(skill->frostjoke_scream, HP_skill_frostjoke_scream) },
	{ HP_POP(skill->greed, HP_skill_greed) },
	{ HP_POP(skill->destroy_trap, HP_skill_destroy_trap) },
	{ HP_POP(skill->unitgrouptickset_search, HP_skill_unitgrouptickset_search) },
	{ HP_POP(skill->dance_switch, HP_skill_dance_switch) },
	{ HP_POP(skill->check_condition_char_sub, HP_skill_check_condition_char_sub) },
	{ HP_POP(skill->check_condition_mob_master_sub, HP_skill_check_condition_mob_master_sub) },
	{ HP_POP(skill->brandishspear_first, HP_skill_brandishspear_first) },
	{ HP_POP(skill->brandishspear_dir, HP_skill_brandishspear_dir) },
	{ HP_POP(skill->get_fixed_cast, HP_skill_get_fixed_cast) },
	{ HP_POP(skill->sit_count, HP_skill_sit_count) },
	{ HP_POP(skill->sit_in, HP_skill_sit_in) },
	{ HP_POP(skill->sit_out, HP_skill_sit_out) },
	{ HP_POP(skill->unitsetmapcell, HP_skill_unitsetmapcell) },
	{ HP_POP(skill->unit_onplace_timer, HP_skill_unit_onplace_timer) },
	{ HP_POP(skill->unit_onplace_timer_unknown, HP_skill_unit_onplace_timer_unknown) },
	{ HP_POP(skill->unit_effect, HP_skill_unit_effect) },
	{ HP_POP(skill->unit_timer_sub_onplace, HP_skill_unit_timer_sub_onplace) },
	{ HP_POP(skill->unit_move_sub, HP_skill_unit_move_sub) },
	{ HP_POP(skill->blockpc_end, HP_skill_blockpc_end) },
	{ HP_POP(skill->blockhomun_end, HP_skill_blockhomun_end) },
	{ HP_POP(skill->blockmerc_end, HP_skill_blockmerc_end) },
	{ HP_POP(skill->split_atoi, HP_skill_split_atoi) },
	{ HP_POP(skill->unit_timer, HP_skill_unit_timer) },
	{ HP_POP(skill->unit_timer_sub, HP_skill_unit_timer_sub) },
	{ HP_POP(skill->init_unit_layout, HP_skill_init_unit_layout) },
	{ HP_POP(skill->init_unit_layout_unknown, HP_skill_init_unit_layout_unknown) },
	{ HP_POP(skill->validate_hittype, HP_skill_validate_hittype) },
	{ HP_POP(skill->validate_skilltype, HP_skill_validate_skilltype) },
	{ HP_POP(skill->validate_attacktype, HP_skill_validate_attacktype) },
	{ HP_POP(skill->validate_element, HP_skill_validate_element) },
	{ HP_POP(skill->validate_skillinfo, HP_skill_validate_skillinfo) },
	{ HP_POP(skill->validate_damagetype, HP_skill_validate_damagetype) },
	{ HP_POP(skill->validate_castnodex, HP_skill_validate_castnodex) },
	{ HP_POP(skill->validate_weapontype, HP_skill_validate_weapontype) },
	{ HP_POP(skill->validate_ammotype, HP_skill_validate_ammotype) },
	{ HP_POP(skill->validate_state, HP_skill_validate_state) },
	{ HP_POP(skill->validate_item_requirements, HP_skill_validate_item_requirements) },
	{ HP_POP(skill->validate_unit_target, HP_skill_validate_unit_target) },
	{ HP_POP(skill->validate_unit_flag, HP_skill_validate_unit_flag) },
	{ HP_POP(skill->validate_additional_fields, HP_skill_validate_additional_fields) },
	{ HP_POP(skill->validate_skilldb, HP_skill_validate_skilldb) },
	{ HP_POP(skill->read_skilldb, HP_skill_read_skilldb) },
	{ HP_POP(skill->config_set_level, HP_skill_config_set_level) },
	{ HP_POP(skill->level_set_value, HP_skill_level_set_value) },
	{ HP_POP(skill->parse_row_producedb, HP_skill_parse_row_producedb) },
	{ HP_POP(skill->parse_row_createarrowdb, HP_skill_parse_row_createarrowdb) },
	{ HP_POP(skill->parse_row_abradb, HP_skill_parse_row_abradb) },
	{ HP_POP(skill->parse_row_spellbookdb, HP_skill_parse_row_spellbookdb) },
	{ HP_POP(skill->parse_row_magicmushroomdb, HP_skill_parse_row_magicmushroomdb) },
	{ HP_POP(skill->parse_row_reproducedb, HP_skill_parse_row_reproducedb) },
	{ HP_POP(skill->parse_row_improvisedb, HP_skill_parse_row_improvisedb) },
	{ HP_POP(skill->parse_row_changematerialdb, HP_skill_parse_row_changematerialdb) },
	{ HP_POP(skill->usave_add, HP_skill_usave_add) },
	{ HP_POP(skill->usave_trigger, HP_skill_usave_trigger) },
	{ HP_POP(skill->cooldown_load, HP_skill_cooldown_load) },
	{ HP_POP(skill->spellbook, HP_skill_spellbook) },
	{ HP_POP(skill->block_check, HP_skill_block_check) },
	{ HP_POP(skill->detonator, HP_skill_detonator) },
	{ HP_POP(skill->check_camouflage, HP_skill_check_camouflage) },
	{ HP_POP(skill->magicdecoy, HP_skill_magicdecoy) },
	{ HP_POP(skill->poisoningweapon, HP_skill_poisoningweapon) },
	{ HP_POP(skill->select_menu, HP_skill_select_menu) },
	{ HP_POP(skill->elementalanalysis, HP_skill_elementalanalysis) },
	{ HP_POP(skill->changematerial, HP_skill_changematerial) },
	{ HP_POP(skill->get_elemental_type, HP_skill_get_elemental_type) },
	{ HP_POP(skill->cooldown_save, HP_skill_cooldown_save) },
	{ HP_POP(skill->get_new_group_id, HP_skill_get_new_group_id) },
	{ HP_POP(skill->check_shadowform, HP_skill_check_shadowform) },
	{ HP_POP(skill->castend_damage_id_unknown, HP_skill_castend_damage_id_unknown) },
	{ HP_POP(skill->additional_effect_unknown, HP_skill_additional_effect_unknown) },
	{ HP_POP(skill->counter_additional_effect_unknown, HP_skill_counter_additional_effect_unknown) },
	{ HP_POP(skill->attack_combo1_unknown, HP_skill_attack_combo1_unknown) },
	{ HP_POP(skill->attack_combo2_unknown, HP_skill_attack_combo2_unknown) },
	{ HP_POP(skill->attack_display_unknown, HP_skill_attack_display_unknown) },
	{ HP_POP(skill->attack_copy_unknown, HP_skill_attack_copy_unknown) },
	{ HP_POP(skill->attack_dir_unknown, HP_skill_attack_dir_unknown) },
	{ HP_POP(skill->attack_blow_unknown, HP_skill_attack_blow_unknown) },
	{ HP_POP(skill->attack_post_unknown, HP_skill_attack_post_unknown) },
	{ HP_POP(skill->timerskill_dead_unknown, HP_skill_timerskill_dead_unknown) },
	{ HP_POP(skill->timerskill_target_unknown, HP_skill_timerskill_target_unknown) },
	{ HP_POP(skill->timerskill_notarget_unknown, HP_skill_timerskill_notarget_unknown) },
	{ HP_POP(skill->cleartimerskill_exception, HP_skill_cleartimerskill_exception) },
	{ HP_POP(skill->castend_id_unknown, HP_skill_castend_id_unknown) },
	{ HP_POP(skill->castend_nodamage_id_dead_unknown, HP_skill_castend_nodamage_id_dead_unknown) },
	{ HP_POP(skill->castend_nodamage_id_undead_unknown, HP_skill_castend_nodamage_id_undead_unknown) },
	{ HP_POP(skill->castend_nodamage_id_mado_unknown, HP_skill_castend_nodamage_id_mado_unknown) },
	{ HP_POP(skill->castend_nodamage_id_unknown, HP_skill_castend_nodamage_id_unknown) },
	{ HP_POP(skill->castend_pos2_effect_unknown, HP_skill_castend_pos2_effect_unknown) },
	{ HP_POP(skill->castend_pos2_unknown, HP_skill_castend_pos2_unknown) },
	{ HP_POP(skill->unitsetting1_unknown, HP_skill_unitsetting1_unknown) },
	{ HP_POP(skill->unitsetting2_unknown, HP_skill_unitsetting2_unknown) },
	{ HP_POP(skill->unit_onplace_unknown, HP_skill_unit_onplace_unknown) },
	{ HP_POP(skill->check_condition_castbegin_off_unknown, HP_skill_check_condition_castbegin_off_unknown) },
	{ HP_POP(skill->check_condition_castbegin_mount_unknown, HP_skill_check_condition_castbegin_mount_unknown) },
	{ HP_POP(skill->check_condition_castbegin_madogear_unknown, HP_skill_check_condition_castbegin_madogear_unknown) },
	{ HP_POP(skill->check_condition_castbegin_unknown, HP_skill_check_condition_castbegin_unknown) },
	{ HP_POP(skill->check_condition_castend_unknown, HP_skill_check_condition_castend_unknown) },
	{ HP_POP(skill->get_requirement_off_unknown, HP_skill_get_requirement_off_unknown) },
	{ HP_POP(skill->get_requirement_item_unknown, HP_skill_get_requirement_item_unknown) },
	{ HP_POP(skill->get_requirement_unknown, HP_skill_get_requirement_unknown) },
	{ HP_POP(skill->splash_target, HP_skill_splash_target) },
	{ HP_POP(skill->check_npc_chaospanic, HP_skill_check_npc_chaospanic) },
	{ HP_POP(skill->count_wos, HP_skill_count_wos) },
/* socket_interface */
	{ HP_POP(sockt->init, HP_sockt_init) },
	{ HP_POP(sockt->final, HP_sockt_final) },
	{ HP_POP(sockt->perform, HP_sockt_perform) },
	{ HP_POP(sockt->datasync, HP_sockt_datasync) },
	{ HP_POP(sockt->make_listen_bind, HP_sockt_make_listen_bind) },
	{ HP_POP(sockt->make_connection, HP_sockt_make_connection) },
	{ HP_POP(sockt->realloc_fifo, HP_sockt_realloc_fifo) },
	{ HP_POP(sockt->realloc_writefifo, HP_sockt_realloc_writefifo) },
	{ HP_POP(sockt->wfifoset, HP_sockt_wfifoset) },
	{ HP_POP(sockt->rfifoskip, HP_sockt_rfifoskip) },
	{ HP_POP(sockt->close, HP_sockt_close) },
	{ HP_POP(sockt->session_is_valid, HP_sockt_session_is_valid) },
	{ HP_POP(sockt->session_is_active, HP_sockt_session_is_active) },
	{ HP_POP(sockt->flush, HP_sockt_flush) },
	{ HP_POP(sockt->flush_fifos, HP_sockt_flush_fifos) },
	{ HP_POP(sockt->set_nonblocking, HP_sockt_set_nonblocking) },
	{ HP_POP(sockt->set_defaultparse, HP_sockt_set_defaultparse) },
	{ HP_POP(sockt->host2ip, HP_sockt_host2ip) },
	{ HP_POP(sockt->ip2str, HP_sockt_ip2str) },
	{ HP_POP(sockt->str2ip, HP_sockt_str2ip) },
	{ HP_POP(sockt->ntows, HP_sockt_ntows) },
	{ HP_POP(sockt->getips, HP_sockt_getips) },
	{ HP_POP(sockt->eof, HP_sockt_eof) },
	{ HP_POP(sockt->lan_subnet_check, HP_sockt_lan_subnet_check) },
	{ HP_POP(sockt->allowed_ip_check, HP_sockt_allowed_ip_check) },
	{ HP_POP(sockt->trusted_ip_check, HP_sockt_trusted_ip_check) },
	{ HP_POP(sockt->net_config_read_sub, HP_sockt_net_config_read_sub) },
	{ HP_POP(sockt->net_config_read, HP_sockt_net_config_read) },
/* sql_interface */
	{ HP_POP(SQL->Connect, HP_SQL_Connect) },
	{ HP_POP(SQL->GetTimeout, HP_SQL_GetTimeout) },
	{ HP_POP(SQL->GetColumnNames, HP_SQL_GetColumnNames) },
	{ HP_POP(SQL->SetEncoding, HP_SQL_SetEncoding) },
	{ HP_POP(SQL->Ping, HP_SQL_Ping) },
	{ HP_POP(SQL->EscapeString, HP_SQL_EscapeString) },
	{ HP_POP(SQL->EscapeStringLen, HP_SQL_EscapeStringLen) },
	{ HP_POP(SQL->QueryV, HP_SQL_QueryV) },
	{ HP_POP(SQL->QueryStr, HP_SQL_QueryStr) },
	{ HP_POP(SQL->LastInsertId, HP_SQL_LastInsertId) },
	{ HP_POP(SQL->NumColumns, HP_SQL_NumColumns) },
	{ HP_POP(SQL->NumRows, HP_SQL_NumRows) },
	{ HP_POP(SQL->NextRow, HP_SQL_NextRow) },
	{ HP_POP(SQL->GetData, HP_SQL_GetData) },
	{ HP_POP(SQL->FreeResult, HP_SQL_FreeResult) },
	{ HP_POP(SQL->ShowDebug_, HP_SQL_ShowDebug_) },
	{ HP_POP(SQL->Free, HP_SQL_Free) },
	{ HP_POP(SQL->Malloc, HP_SQL_Malloc) },
	{ HP_POP(SQL->StmtMalloc, HP_SQL_StmtMalloc) },
	{ HP_POP(SQL->StmtPrepareV, HP_SQL_StmtPrepareV) },
	{ HP_POP(SQL->StmtPrepareStr, HP_SQL_StmtPrepareStr) },
	{ HP_POP(SQL->StmtNumParams, HP_SQL_StmtNumParams) },
	{ HP_POP(SQL->StmtBindParam, HP_SQL_StmtBindParam) },
	{ HP_POP(SQL->StmtExecute, HP_SQL_StmtExecute) },
	{ HP_POP(SQL->StmtLastInsertId, HP_SQL_StmtLastInsertId) },
	{ HP_POP(SQL->StmtNumColumns, HP_SQL_StmtNumColumns) },
	{ HP_POP(SQL->StmtBindColumn, HP_SQL_StmtBindColumn) },
	{ HP_POP(SQL->StmtNumRows, HP_SQL_StmtNumRows) },
	{ HP_POP(SQL->StmtNextRow, HP_SQL_StmtNextRow) },
	{ HP_POP(SQL->StmtFreeResult, HP_SQL_StmtFreeResult) },
	{ HP_POP(SQL->StmtFree, HP_SQL_StmtFree) },
	{ HP_POP(SQL->StmtShowDebug_, HP_SQL_StmtShowDebug_) },
/* status_interface */
	{ HP_POP(status->init, HP_status_init) },
	{ HP_POP(status->final, HP_status_final) },
	{ HP_POP(status->get_refine_chance, HP_status_get_refine_chance) },
	{ HP_POP(status->skill2sc, HP_status_skill2sc) },
	{ HP_POP(status->sc2skill, HP_status_sc2skill) },
	{ HP_POP(status->sc2scb_flag, HP_status_sc2scb_flag) },
	{ HP_POP(status->type2relevant_bl_types, HP_status_type2relevant_bl_types) },
	{ HP_POP(status->get_sc_type, HP_status_get_sc_type) },
	{ HP_POP(status->damage, HP_status_damage) },
	{ HP_POP(status->charge, HP_status_charge) },
	{ HP_POP(status->percent_change, HP_status_percent_change) },
	{ HP_POP(status->set_hp, HP_status_set_hp) },
	{ HP_POP(status->set_sp, HP_status_set_sp) },
	{ HP_POP(status->heal, HP_status_heal) },
	{ HP_POP(status->revive, HP_status_revive) },
	{ HP_POP(status->fixed_revive, HP_status_fixed_revive) },
	{ HP_POP(status->get_regen_data, HP_status_get_regen_data) },
	{ HP_POP(status->get_status_data, HP_status_get_status_data) },
	{ HP_POP(status->get_base_status, HP_status_get_base_status) },
	{ HP_POP(status->get_name, HP_status_get_name) },
	{ HP_POP(status->get_class, HP_status_get_class) },
	{ HP_POP(status->get_lv, HP_status_get_lv) },
	{ HP_POP(status->get_def, HP_status_get_def) },
	{ HP_POP(status->get_speed, HP_status_get_speed) },
	{ HP_POP(status->calc_attack_element, HP_status_calc_attack_element) },
	{ HP_POP(status->get_party_id, HP_status_get_party_id) },
	{ HP_POP(status->get_guild_id, HP_status_get_guild_id) },
	{ HP_POP(status->get_emblem_id, HP_status_get_emblem_id) },
	{ HP_POP(status->get_mexp, HP_status_get_mexp) },
	{ HP_POP(status->get_race2, HP_status_get_race2) },
	{ HP_POP(status->get_viewdata, HP_status_get_viewdata) },
	{ HP_POP(status->set_viewdata, HP_status_set_viewdata) },
	{ HP_POP(status->change_init, HP_status_change_init) },
	{ HP_POP(status->get_sc, HP_status_get_sc) },
	{ HP_POP(status->isdead, HP_status_isdead) },
	{ HP_POP(status->isimmune, HP_status_isimmune) },
	{ HP_POP(status->get_sc_def, HP_status_get_sc_def) },
	{ HP_POP(status->change_start, HP_status_change_start) },
	{ HP_POP(status->change_end_, HP_status_change_end_) },
	{ HP_POP(status->kaahi_heal_timer, HP_status_kaahi_heal_timer) },
	{ HP_POP(status->change_timer, HP_status_change_timer) },
	{ HP_POP(status->change_timer_sub, HP_status_change_timer_sub) },
	{ HP_POP(status->change_clear, HP_status_change_clear) },
	{ HP_POP(status->change_clear_buffs, HP_status_change_clear_buffs) },
	{ HP_POP(status->calc_bl_, HP_status_calc_bl_) },
	{ HP_POP(status->calc_mob_, HP_status_calc_mob_) },
	{ HP_POP(status->calc_pet_, HP_status_calc_pet_) },
	{ HP_POP(status->calc_pc_, HP_status_calc_pc_) },
	{ HP_POP(status->calc_pc_additional, HP_status_calc_pc_additional) },
	{ HP_POP(status->calc_homunculus_, HP_status_calc_homunculus_) },
	{ HP_POP(status->calc_mercenary_, HP_status_calc_mercenary_) },
	{ HP_POP(status->calc_elemental_, HP_status_calc_elemental_) },
	{ HP_POP(status->calc_misc, HP_status_calc_misc) },
	{ HP_POP(status->calc_regen, HP_status_calc_regen) },
	{ HP_POP(status->calc_regen_rate, HP_status_calc_regen_rate) },
	{ HP_POP(status->check_skilluse, HP_status_check_skilluse) },
	{ HP_POP(status->check_visibility, HP_status_check_visibility) },
	{ HP_POP(status->change_spread, HP_status_change_spread) },
	{ HP_POP(status->calc_def, HP_status_calc_def) },
	{ HP_POP(status->calc_def2, HP_status_calc_def2) },
	{ HP_POP(status->calc_mdef, HP_status_calc_mdef) },
	{ HP_POP(status->calc_mdef2, HP_status_calc_mdef2) },
	{ HP_POP(status->calc_batk, HP_status_calc_batk) },
	{ HP_POP(status->base_matk, HP_status_base_matk) },
	{ HP_POP(status->get_weapon_atk, HP_status_get_weapon_atk) },
	{ HP_POP(status->get_total_mdef, HP_status_get_total_mdef) },
	{ HP_POP(status->get_total_def, HP_status_get_total_def) },
	{ HP_POP(status->get_matk, HP_status_get_matk) },
	{ HP_POP(status->update_matk, HP_status_update_matk) },
	{ HP_POP(status->readdb, HP_status_readdb) },
	{ HP_POP(status->initChangeTables, HP_status_initChangeTables) },
	{ HP_POP(status->initDummyData, HP_status_initDummyData) },
	{ HP_POP(status->base_amotion_pc, HP_status_base_amotion_pc) },
	{ HP_POP(status->base_atk, HP_status_base_atk) },
	{ HP_POP(status->get_base_maxhp, HP_status_get_base_maxhp) },
	{ HP_POP(status->get_base_maxsp, HP_status_get_base_maxsp) },
	{ HP_POP(status->calc_npc_, HP_status_calc_npc_) },
	{ HP_POP(status->calc_str, HP_status_calc_str) },
	{ HP_POP(status->calc_agi, HP_status_calc_agi) },
	{ HP_POP(status->calc_vit, HP_status_calc_vit) },
	{ HP_POP(status->calc_int, HP_status_calc_int) },
	{ HP_POP(status->calc_dex, HP_status_calc_dex) },
	{ HP_POP(status->calc_luk, HP_status_calc_luk) },
	{ HP_POP(status->calc_watk, HP_status_calc_watk) },
	{ HP_POP(status->calc_matk, HP_status_calc_matk) },
	{ HP_POP(status->calc_hit, HP_status_calc_hit) },
	{ HP_POP(status->calc_critical, HP_status_calc_critical) },
	{ HP_POP(status->calc_flee, HP_status_calc_flee) },
	{ HP_POP(status->calc_flee2, HP_status_calc_flee2) },
	{ HP_POP(status->calc_speed, HP_status_calc_speed) },
	{ HP_POP(status->calc_aspd_rate, HP_status_calc_aspd_rate) },
	{ HP_POP(status->calc_dmotion, HP_status_calc_dmotion) },
	{ HP_POP(status->calc_aspd, HP_status_calc_aspd) },
	{ HP_POP(status->calc_fix_aspd, HP_status_calc_fix_aspd) },
	{ HP_POP(status->calc_maxhp, HP_status_calc_maxhp) },
	{ HP_POP(status->calc_maxsp, HP_status_calc_maxsp) },
	{ HP_POP(status->calc_element, HP_status_calc_element) },
	{ HP_POP(status->calc_element_lv, HP_status_calc_element_lv) },
	{ HP_POP(status->calc_mode, HP_status_calc_mode) },
	{ HP_POP(status->calc_ematk, HP_status_calc_ematk) },
	{ HP_POP(status->calc_bl_main, HP_status_calc_bl_main) },
	{ HP_POP(status->display_add, HP_status_display_add) },
	{ HP_POP(status->display_remove, HP_status_display_remove) },
	{ HP_POP(status->natural_heal, HP_status_natural_heal) },
	{ HP_POP(status->natural_heal_timer, HP_status_natural_heal_timer) },
	{ HP_POP(status->readdb_job2, HP_status_readdb_job2) },
	{ HP_POP(status->readdb_sizefix, HP_status_readdb_sizefix) },
	{ HP_POP(status->readdb_refine_libconfig, HP_status_readdb_refine_libconfig) },
	{ HP_POP(status->readdb_refine_libconfig_sub, HP_status_readdb_refine_libconfig_sub) },
	{ HP_POP(status->readdb_scconfig, HP_status_readdb_scconfig) },
	{ HP_POP(status->read_job_db, HP_status_read_job_db) },
	{ HP_POP(status->read_job_db_sub, HP_status_read_job_db_sub) },
	{ HP_POP(status->set_sc, HP_status_set_sc) },
	{ HP_POP(status->copy, HP_status_copy) },
	{ HP_POP(status->base_matk_min, HP_status_base_matk_min) },
	{ HP_POP(status->base_matk_max, HP_status_base_matk_max) },
/* storage_interface */
	{ HP_POP(storage->reconnect, HP_storage_reconnect) },
	{ HP_POP(storage->delitem, HP_storage_delitem) },
	{ HP_POP(storage->open, HP_storage_open) },
	{ HP_POP(storage->add, HP_storage_add) },
	{ HP_POP(storage->get, HP_storage_get) },
	{ HP_POP(storage->additem, HP_storage_additem) },
	{ HP_POP(storage->addfromcart, HP_storage_addfromcart) },
	{ HP_POP(storage->gettocart, HP_storage_gettocart) },
	{ HP_POP(storage->close, HP_storage_close) },
	{ HP_POP(storage->pc_quit, HP_storage_pc_quit) },
	{ HP_POP(storage->comp_item, HP_storage_comp_item) },
	{ HP_POP(storage->sortitem, HP_storage_sortitem) },
	{ HP_POP(storage->reconnect_sub, HP_storage_reconnect_sub) },
/* stringbuf_interface */
	{ HP_POP(StrBuf->Malloc, HP_StrBuf_Malloc) },
	{ HP_POP(StrBuf->Init, HP_StrBuf_Init) },
	{ HP_POP(StrBuf->Vprintf, HP_StrBuf_Vprintf) },
	{ HP_POP(StrBuf->Append, HP_StrBuf_Append) },
	{ HP_POP(StrBuf->AppendStr, HP_StrBuf_AppendStr) },
	{ HP_POP(StrBuf->Length, HP_StrBuf_Length) },
	{ HP_POP(StrBuf->Value, HP_StrBuf_Value) },
	{ HP_POP(StrBuf->Clear, HP_StrBuf_Clear) },
	{ HP_POP(StrBuf->Destroy, HP_StrBuf_Destroy) },
	{ HP_POP(StrBuf->Free, HP_StrBuf_Free) },
/* strlib_interface */
	{ HP_POP(strlib->jstrescape, HP_strlib_jstrescape) },
	{ HP_POP(strlib->jstrescapecpy, HP_strlib_jstrescapecpy) },
	{ HP_POP(strlib->jmemescapecpy, HP_strlib_jmemescapecpy) },
	{ HP_POP(strlib->remove_control_chars_, HP_strlib_remove_control_chars_) },
	{ HP_POP(strlib->trim_, HP_strlib_trim_) },
	{ HP_POP(strlib->normalize_name_, HP_strlib_normalize_name_) },
	{ HP_POP(strlib->stristr_, HP_strlib_stristr_) },
	{ HP_POP(strlib->strnlen_, HP_strlib_strnlen_) },
	{ HP_POP(strlib->strtok_r_, HP_strlib_strtok_r_) },
	{ HP_POP(strlib->e_mail_check_, HP_strlib_e_mail_check_) },
	{ HP_POP(strlib->config_switch_, HP_strlib_config_switch_) },
	{ HP_POP(strlib->safestrncpy_, HP_strlib_safestrncpy_) },
	{ HP_POP(strlib->safestrnlen_, HP_strlib_safestrnlen_) },
	{ HP_POP(strlib->strline_, HP_strlib_strline_) },
	{ HP_POP(strlib->bin2hex_, HP_strlib_bin2hex_) },
/* sv_interface */
	{ HP_POP(sv->parse_next, HP_sv_parse_next) },
	{ HP_POP(sv->parse, HP_sv_parse) },
	{ HP_POP(sv->split, HP_sv_split) },
	{ HP_POP(sv->escape_c, HP_sv_escape_c) },
	{ HP_POP(sv->unescape_c, HP_sv_unescape_c) },
	{ HP_POP(sv->skip_escaped_c, HP_sv_skip_escaped_c) },
	{ HP_POP(sv->readdb, HP_sv_readdb) },
/* sysinfo_interface */
	{ HP_POP(sysinfo->getpagesize, HP_sysinfo_getpagesize) },
	{ HP_POP(sysinfo->platform, HP_sysinfo_platform) },
	{ HP_POP(sysinfo->osversion, HP_sysinfo_osversion) },
	{ HP_POP(sysinfo->cpu, HP_sysinfo_cpu) },
	{ HP_POP(sysinfo->cpucores, HP_sysinfo_cpucores) },
	{ HP_POP(sysinfo->arch, HP_sysinfo_arch) },
	{ HP_POP(sysinfo->is64bit, HP_sysinfo_is64bit) },
	{ HP_POP(sysinfo->compiler, HP_sysinfo_compiler) },
	{ HP_POP(sysinfo->cflags, HP_sysinfo_cflags) },
	{ HP_POP(sysinfo->time, HP_sysinfo_time) },
	{ HP_POP(sysinfo->vcstype, HP_sysinfo_vcstype) },
	{ HP_POP(sysinfo->vcstypeid, HP_sysinfo_vcstypeid) },
	{ HP_POP(sysinfo->vcsrevision_src, HP_sysinfo_vcsrevision_src) },
	{ HP_POP(sysinfo->vcsrevision_scripts, HP_sysinfo_vcsrevision_scripts) },
	{ HP_POP(sysinfo->vcsrevision_reload, HP_sysinfo_vcsrevision_reload) },
	{ HP_POP(sysinfo->is_superuser, HP_sysinfo_is_superuser) },
	{ HP_POP(sysinfo->init, HP_sysinfo_init) },
	{ HP_POP(sysinfo->final, HP_sysinfo_final) },
/* thread_interface */
	{ HP_POP(thread->init, HP_thread_init) },
	{ HP_POP(thread->final, HP_thread_final) },
	{ HP_POP(thread->create, HP_thread_create) },
	{ HP_POP(thread->create_opt, HP_thread_create_opt) },
	{ HP_POP(thread->destroy, HP_thread_destroy) },
	{ HP_POP(thread->self, HP_thread_self) },
	{ HP_POP(thread->get_tid, HP_thread_get_tid) },
	{ HP_POP(thread->wait, HP_thread_wait) },
	{ HP_POP(thread->prio_set, HP_thread_prio_set) },
	{ HP_POP(thread->prio_get, HP_thread_prio_get) },
	{ HP_POP(thread->yield, HP_thread_yield) },
/* timer_interface */
	{ HP_POP(timer->gettick, HP_timer_gettick) },
	{ HP_POP(timer->gettick_nocache, HP_timer_gettick_nocache) },
	{ HP_POP(timer->add, HP_timer_add) },
	{ HP_POP(timer->add_interval, HP_timer_add_interval) },
	{ HP_POP(timer->get, HP_timer_get) },
	{ HP_POP(timer->delete, HP_timer_delete) },
	{ HP_POP(timer->addtick, HP_timer_addtick) },
	{ HP_POP(timer->settick, HP_timer_settick) },
	{ HP_POP(timer->add_func_list, HP_timer_add_func_list) },
	{ HP_POP(timer->get_uptime, HP_timer_get_uptime) },
	{ HP_POP(timer->perform, HP_timer_perform) },
	{ HP_POP(timer->init, HP_timer_init) },
	{ HP_POP(timer->final, HP_timer_final) },
/* trade_interface */
	{ HP_POP(trade->request, HP_trade_request) },
	{ HP_POP(trade->ack, HP_trade_ack) },
	{ HP_POP(trade->check_impossible, HP_trade_check_impossible) },
	{ HP_POP(trade->check, HP_trade_check) },
	{ HP_POP(trade->additem, HP_trade_additem) },
	{ HP_POP(trade->addzeny, HP_trade_addzeny) },
	{ HP_POP(trade->ok, HP_trade_ok) },
	{ HP_POP(trade->cancel, HP_trade_cancel) },
	{ HP_POP(trade->commit, HP_trade_commit) },
/* unit_interface */
	{ HP_POP(unit->init, HP_unit_init) },
	{ HP_POP(unit->final, HP_unit_final) },
	{ HP_POP(unit->bl2ud, HP_unit_bl2ud) },
	{ HP_POP(unit->bl2ud2, HP_unit_bl2ud2) },
	{ HP_POP(unit->init_ud, HP_unit_init_ud) },
	{ HP_POP(unit->attack_timer, HP_unit_attack_timer) },
	{ HP_POP(unit->walktoxy_timer, HP_unit_walktoxy_timer) },
	{ HP_POP(unit->walktoxy_sub, HP_unit_walktoxy_sub) },
	{ HP_POP(unit->delay_walktoxy_timer, HP_unit_delay_walktoxy_timer) },
	{ HP_POP(unit->walktoxy, HP_unit_walktoxy) },
	{ HP_POP(unit->walktobl_sub, HP_unit_walktobl_sub) },
	{ HP_POP(unit->walktobl, HP_unit_walktobl) },
	{ HP_POP(unit->run, HP_unit_run) },
	{ HP_POP(unit->run_hit, HP_unit_run_hit) },
	{ HP_POP(unit->escape, HP_unit_escape) },
	{ HP_POP(unit->movepos, HP_unit_movepos) },
	{ HP_POP(unit->setdir, HP_unit_setdir) },
	{ HP_POP(unit->getdir, HP_unit_getdir) },
	{ HP_POP(unit->blown, HP_unit_blown) },
	{ HP_POP(unit->warp, HP_unit_warp) },
	{ HP_POP(unit->stop_walking, HP_unit_stop_walking) },
	{ HP_POP(unit->skilluse_id, HP_unit_skilluse_id) },
	{ HP_POP(unit->step_timer, HP_unit_step_timer) },
	{ HP_POP(unit->stop_stepaction, HP_unit_stop_stepaction) },
	{ HP_POP(unit->is_walking, HP_unit_is_walking) },
	{ HP_POP(unit->can_move, HP_unit_can_move) },
	{ HP_POP(unit->resume_running, HP_unit_resume_running) },
	{ HP_POP(unit->set_walkdelay, HP_unit_set_walkdelay) },
	{ HP_POP(unit->skilluse_id2, HP_unit_skilluse_id2) },
	{ HP_POP(unit->skilluse_pos, HP_unit_skilluse_pos) },
	{ HP_POP(unit->skilluse_pos2, HP_unit_skilluse_pos2) },
	{ HP_POP(unit->set_target, HP_unit_set_target) },
	{ HP_POP(unit->stop_attack, HP_unit_stop_attack) },
	{ HP_POP(unit->unattackable, HP_unit_unattackable) },
	{ HP_POP(unit->attack, HP_unit_attack) },
	{ HP_POP(unit->cancel_combo, HP_unit_cancel_combo) },
	{ HP_POP(unit->can_reach_pos, HP_unit_can_reach_pos) },
	{ HP_POP(unit->can_reach_bl, HP_unit_can_reach_bl) },
	{ HP_POP(unit->calc_pos, HP_unit_calc_pos) },
	{ HP_POP(unit->attack_timer_sub, HP_unit_attack_timer_sub) },
	{ HP_POP(unit->skillcastcancel, HP_unit_skillcastcancel) },
	{ HP_POP(unit->dataset, HP_unit_dataset) },
	{ HP_POP(unit->counttargeted, HP_unit_counttargeted) },
	{ HP_POP(unit->fixdamage, HP_unit_fixdamage) },
	{ HP_POP(unit->changeviewsize, HP_unit_changeviewsize) },
	{ HP_POP(unit->remove_map, HP_unit_remove_map) },
	{ HP_POP(unit->remove_map_pc, HP_unit_remove_map_pc) },
	{ HP_POP(unit->free_pc, HP_unit_free_pc) },
	{ HP_POP(unit->free, HP_unit_free) },
/* vending_interface */
	{ HP_POP(vending->init, HP_vending_init) },
	{ HP_POP(vending->final, HP_vending_final) },
	{ HP_POP(vending->close, HP_vending_close) },
	{ HP_POP(vending->open, HP_vending_open) },
	{ HP_POP(vending->list, HP_vending_list) },
	{ HP_POP(vending->purchase, HP_vending_purchase) },
	{ HP_POP(vending->search, HP_vending_search) },
	{ HP_POP(vending->searchall, HP_vending_searchall) },
};

int HookingPointsLenMax = 49;
