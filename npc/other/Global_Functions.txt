//===== Hercules Script ======================================
//= Global Functions
//===== By: ==================================================
//= Lupus, kobra_k88
//===== Current Version: =====================================
//= 2.18
//===== Description: =========================================
//= General script functions.
//===== Additional Comments: =================================
//= Added F_ClearJobVar - on getting a new job it clears all Job Quest variables
//= Removed individual job check functions as they were redundant [kobra_k88]
//= 1.3 Added Job Change Function for Baby/Normal Classes
//= 1.3b a fix, due to const.txt change [Lupus]
//= 1.4 Added Is_Taekwon_Class: Taekwondo, Star Knight(Gladiator),Soul Linker [Lupus]
//= 1.5 Added clear of Bard Quest variables. 1.5a updated [Lupus]
//= 1.6 Added F_RandMes, F_SexMes, F_Hi, F_Bye functions [Lupus]
//=     Moved here useful function 'getJobName'
//= 1.7 Added "F_ItemName" function, added a great sample for "F_ItemName"
//= 1.8 Added Job Vars clear for Extended classes: TK,SL,SG [Lupus]
//= 1.9 Added "F_ClearGarbage" func that clears outdated, wasted variables [Lupus]
//= 1.91 Added "F_SaveQuestSkills","F_Load?Skills" functions [Lupus]
//= 2.0 Fixed F_Save/LoadQuestSkills functions. Had to split in into 2 vars [Lupus]
//= 2.01 Added $talk to F_ClearGarbage [Evera]
//= 2.02 Added $dtsglobalelig and $dts|(1<<6) to F_ClearGarbage [Evera]
//= 2.03 Added Gunslinger vars to F_ClearJobVar [Lupus]
//= 2.04 Added dtseligible 2 (becomes MISC_QUEST|128) to F_ClearGarbage [Evera]
//= 2.05 Book of Devil -> MISC_QUEST|256, clear other Niflheim garbage vars [Lupus]
//=     +more garbage clean
//= 2.06 Pass to Bio-Lab -> MISC_QUEST|512 [Lupus]
//= 2.07 Added TK_Q variable clear. 2.08 Added NINJ_Q variable clear [Lupus]
//= 2.09 Cleared F_ClearGarbage [Lupus]
//= 2.10 Added F_CheckMaxCount to check count of carrid items. [L0ne_w0lf]
//= 2.10a Removed function F_CheckMaxCount. Not needed. [L0ne_W0lf]
//= 2.11 Updated function Job_Change to jobchange based on Upper value. [Paradox924X]
//= 2.12 Added more unused vars to F_ClearGarbage [Lupus]
//= 2.13 Added more unused vars to F_ClearGarbage [Lupus]
//= 2.14 Added old novice variables to F_ClearGarbage. [L0ne_W0lf]
//= 2.15 Added no unused DTS variables to F_ClearGarbage. [L0ne_W0lf]
//= 2.16 Added F_GetWeaponType, and F_GetArmorType. [L0ne_W0lf]
//= 2.17 Renamed 'F_RandMes' to 'F_Rand'. [Euphy]
//= 2.18 Removed useless 'getJobName' function. [Euphy]
//============================================================


//////////////////////////////////////////////////////////////////////////////////
// Function that clears job quest variables
//////////////////////////////////////////////////////////////////////////////////

function	script	F_ClearJobVar	{
	// Misc ---------------------------------
	set JBLVL,0;
	set FIRSTAID,0;
	set PLAYDEAD,0;
	set got_bandage,0;
	set got_novnametag,0;
	// First Class Jobs ---------------------
	set job_acolyte_q,0; set job_acolyte_q2,0;
	set job_archer_q,0;
	set job_magician_q,0;
	set job_merchant_q,0; set job_merchant_q2,0; set job_merchant_q3,0;
	set job_sword_q,0; set SWTEST, 0;
	set job_thief_q,0;
	// Super Novice
	set SUPNOV_Q,0;
	// 2-1 Jobs ------------------------------
	set ASSIN_Q,0; set ASSIN_Q2,0; set ASSIN_Q3,0;
	set BSMITH_Q,0; set BSMITH_Q2,0;
	set HNTR_Q,0; set HNTR_Q2,0;
	set KNIGHT_Q,0; set KNIGHT_Q2,0;
	set PRIEST_Q,0; set PRIEST_Q2,0; set PRIEST_Q3,0;
	set WIZ_Q,0; set WIZ_Q2,0;
	// 2-2 Jobs ------------------------------
	set ROGUE_Q,0; set ROGUE_Q2,0;
	set ALCH_Q,0; set ALCH_Q2,0;
	set CRUS_Q,0;
	set MONK_Q,0; set JOB_MONK_C,0;
	set SAGE_Q,0; set SAGE_Q2,0;
	set DANC_Q,0;
	set BARD_Q,0;
	// Extended Classes
	set TAEK_Q,0; set TK_Q,0;
	set STGL_Q,0;
	set SOUL_Q,0;
	set GUNS_Q,0;
	set NINJ_Q,0;
	return;
}

function	script	F_ClearGarbage	{
	// Clear outdated global VARS
	//Clear TURTLE var if the Turtle Islans Quest is already done
		if(TURTLE==20) set MISC_QUEST,MISC_QUEST | 65536;
		if(MISC_QUEST & 65536) set TURTLE,0; //now clear the var if the quest is over
	//Clear previously saved Quest Skills (now it isn't used)
		set ADV_QSK,0;
		set ADV_QSK2,0;
	//Old Seset Skill Event used to use RES_SKILL var
		set RES_SKILL,0;
	//Here you put outdated variables from your outdated EVENTS
	//e.g. Is XMAS done? Add the EVENT var clearing code here.
	
	//due to bugs in BS quest:
	set wizard_m2,0;
	
	// Old Novice Ground Variables.
	set NEW_MES_FLAG0,0;
	set NEW_MES_FLAG1,0;
	set NEW_MES_FLAG2,0;
	set NEW_MES_FLAG3,0;
	set NEW_MES_FLAG4,0;
	set NEW_MES_FLAG5,0;
	set NEW_LVUP0,0;
	set NEW_LVUP1,0;
	set NEW_JOBLVUP,0;
	
	// Old DTS variables that are no longer used.
	set dtseligible,0;
	set MISC_QUEST,MISC_QUEST & ~128;
	
	return;
}

//////////////////////////////////////////////////////////////////////////////////
// Used in REBIRTH scripts
// Class = Internal Class ID
// BaseJob = Base Job (0..23)
// Upper : 0 - Default, 1 - Advanced, 2 - Baby
//////////////////////////////////////////////////////////////////////////////////

function	script	Job_Change	{
	jobchange getarg(0),Upper; //Jobchange based on Upper
	logmes "CLASS CHANGE: " +strcharinfo(0)+ " become a "+jobname(Class);
	return;
}


//////////////////////////////////////////////////////////////////////////////////
// Functions used to spiff up dialoges [Lupus]
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
// *** Function "F_Rand"
//////////////////////////////////////////////////////////////////////////////////
//returns random argument
// Example: check F_Bye or F_Hi functions
// READ AND THINK: You can use it to pick a random number from a list:
// set @itemIDfromList, callfunc("F_Rand",1129,1222,1163,1357,1360,1522,1811,1410);

function	script	F_Rand	{
	return getarg(rand(getargcount()));
}


//////////////////////////////////////////////////////////////////////////////////
// *** Function "F_Sex"
//////////////////////////////////////////////////////////////////////////////////
//returns 1st argument if female, 2nd argument otherwise
// Example: mes callfunc("F_Sex","What a beautiful lady!","What a handsome man!");

function	script	F_SexMes	{
	return getarg(Sex);
}


//////////////////////////////////////////////////////////////////////////////////
// *** Function "F_Hi"
//////////////////////////////////////////////////////////////////////////////////
//returns random HELLO message

function	script	F_Hi	{
	return callfunc("F_Rand","Hi!","Hello!","Good day!","How are you?","Hello there.");
}


//////////////////////////////////////////////////////////////////////////////////
// *** Function "F_Bye"
//////////////////////////////////////////////////////////////////////////////////
//returns random BYE message

function	script	F_Bye	{
	return callfunc("F_Rand","Bye. See you again.","Later.","Goodbye.","Good luck!","Have a nice day!","Byebye!!!");
}


//////////////////////////////////////////////////////////////////////////////////
// *** Function "F_ItemName"
//////////////////////////////////////////////////////////////////////////////////
// Returns expanded item name string
//Argumentss
// 0 - Item ID
// 1 - Element N (0=none,1=Ice,2=Earth,3=Fire,4=Wind)
// 2 - VVS meter 0...3
// 3 - Refine
// Example: mes "Show me your "+callfunc("F_ItemName",1201,1,2,5)+"...";
//  is equal to: mes "Show me your ^000090 +5 VVS Fire Knife ^000000..."

function	script	F_ItemName	{
	if(getarg(3))
		set .@t$,.@t$+"+"+getarg(3)+" ";
	switch(getarg(2)) {
		case 0: break;
		case 1: set .@t$,.@t$+"VS "; break;
		case 2: set .@t$,.@t$+"VVS "; break;
		case 3: set .@t$,.@t$+"VVVS "; break;
		default: set .@t$,.@t$+getarg(2)+"xVS "; break;
	}
	switch(getarg(1)) {
		case 1: set .@t$,.@t$+"Ice "; break;
		case 2: set .@t$,.@t$+"Earth "; break;
		case 3: set .@t$,.@t$+"Fire "; break;
		case 4: set .@t$,.@t$+"Wind "; break;
		default: set .@t$,.@t$+"Strange "; break;
	}
	return "^000090"+.@t$+getitemname(getarg(0))+"^000000";
}

//////////////////////////////////////////////////////////////////////////////////
// *** Function "F_SaveQuestSkills": Store learnt quest skills 
//////////////////////////////////////////////////////////////////////////////////
function	script	F_SaveQuestSkills	{
	set ADV_QSK,0; set ADV_QSK2,0;
	//1st classes quest skills
	for(set .@i, 0; .@i < 14; set .@i, .@i + 1){
		if(getskilllv(144+.@i)) set ADV_QSK,ADV_QSK|pow(2,.@i);
	}
	//2nd classes quest skills
	for(set .@i, 0; .@i < 19; set .@i, .@i + 1){
		if(getskilllv(1001+.@i)) set ADV_QSK2,ADV_QSK2|pow(2,.@i);
	}
	return;
}

//////////////////////////////////////////////////////////////////////////////////
// *** Function "F_Load1Skills": Restore learnt 1st class quest skills
//////////////////////////////////////////////////////////////////////////////////
function	script	F_Load1Skills	{
	//1st classes quest skills
	for(set .@i, 0; .@i < 14; set .@i, .@i + 1){
		if(ADV_QSK|pow(2,.@i) == ADV_QSK) skill 144+.@i,1,0;
	}
	set ADV_QSK,0; //Clear var
	return;
}

//////////////////////////////////////////////////////////////////////////////////
// *** Function "F_Load2Skills": Restore learnt 2nd class quest skills
//////////////////////////////////////////////////////////////////////////////////
function	script	F_Load2Skills	{
	//2nd classes quest skills
	for(set .@i, 0; .@i < 19; set .@i, .@i + 1){
		if(ADV_QSK2|pow(2,.@i) == ADV_QSK2) skill 1001+.@i,1,0;
	}
	set ADV_QSK2,0; //Clear var
	return;
}

//////////////////////////////////////////////////////////////////////////////////
// *** Function "F_GetWeaponType": Determine weapon type by view
//////////////////////////////////////////////////////////////////////////////////
function	script	F_GetWeaponType	{
	switch(getiteminfo(getarg(0),11)) {
		case 1: return "Dagger"; break;
		case 2: return "One-handed Sword"; break;
		case 3: return "Two-handed Sword"; break;
		case 4: return "One-handed Spear"; break;
		case 5: return "Two-handed Spear"; break;
		case 6: return "One-handed Axe"; break;
		case 7: return "Two-handed Axe"; break;
		case 8: return "Mace"; break;
		//case 9: return "Unused"; break;
		case 10: return "Staff"; break;
		case 11: return "Bow"; break;
		case 12: return "Knuckle"; break;
		case 13: return "Instrument"; break;
		case 14: return "Whip"; break;
		case 15: return "Book"; break;
		case 16: return "Katar"; break;
		case 17: return "Revolver"; break;
		case 18: return "Rifle"; break;
		case 19: return "Gatling gun"; break;
		case 20: return "Shotgun"; break;
		case 21: return "Grenade Launcher"; break;
		case 22: return "Shuriken"; break;
		default: return "Unable to Determine Equip Type"; break;
	}
	end;
}

//////////////////////////////////////////////////////////////////////////////////
// *** Function "F_GetArmorType": Determine equipment type by equip location
//////////////////////////////////////////////////////////////////////////////////
function	script	F_GetArmorType	{
	switch(getiteminfo(getarg(0),5)) {
		case 001: return "Lower Headgear"; break;
		case 2: return "Weapon"; break;
		case 4: return "Garment"; break;
		case 8: return "Accessory"; break;
		case 16: return "Armor"; break;
		case 32: return "Shield"; break;
		case 64: return "Shoes"; break;
		case 128: return "Accessory"; break;
		case 256: return "Upper Headgear"; break;
		case 512: return "Middle Headgear"; break;
		default: return "Unable to Determine Equip Location"; break;
	}
	end;
}

// Time calculation Function
// *********************************************************************
function	script	Time2Str	{
	set .@time_left, getarg(0) - gettimetick(2);
	
	set .@Days, .@time_left / 86400;
	set .@time_left, .@time_left - (.@Days * 86400);
	set .@Hours, .@time_left / 3600;
	set .@time_left, .@time_left - (.@Hours * 3600);
	set .@Minutes, .@time_left / 60;
	set .@time_left, .@time_left - (.@Minutes * 60);
	
	set .@Time$, "";
	if( .@Days > 1 )
		set .@Time$, .@Time$ + .@Days + " days, ";
	else if( .@Days > 0 )
		set .@Time$, .@Time$ + .@Days + " day, ";

	if( .@Hours > 1 )
		set .@Time$, .@Time$ + .@Hours + " hours, ";
	else if( .@Hours > 0 )
		set .@Time$, .@Time$ + .@Hours + " hour, ";

	if( .@Minutes > 1 )
		set .@Time$, .@Time$ + .@Minutes + " minutes, ";
	else if( .@Minutes > 0 )
		set .@Time$, .@Time$ + .@Minutes + " minute, ";

	if( .@time_left > 1 || .@time_left == 0 )
		set .@Time$, .@Time$ + .@time_left + " seconds";
	else if( .@time_left == 1 )
		set .@Time$, .@Time$ + .@time_left + " second";
	
	return .@Time$;
}
